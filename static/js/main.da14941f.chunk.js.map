{"version":3,"sources":["models/types.ts","assets/images/logo.png","components/AppHeader.tsx","components/AppSideBar.tsx","components/AppPreloader.tsx","components/UploadFileForm.tsx","components/AppAlert.tsx","components/SelectParentCategory.tsx","components/AppMap.tsx","api/axios.tsx","models/Contractors.ts","components/ImagesList.tsx","components/AppSearchField.tsx","store/selectors/categories.ts","models/Orders.ts","store/selectors/contractors.ts","pages/HomePage/components/ContractorsStatistic.tsx","store/selectors/orders.ts","pages/HomePage/components/OrdersStatistic.tsx","pages/HomePage/components/OrdersCounter.tsx","pages/HomePage/components/OrdersByCategories.tsx","pages/HomePage/components/ContractorsByCategories.tsx","services/contractorsApi.ts","services/attachmentsApi.ts","store/actions/contractors.ts","services/ordersApi.ts","services/chatsApi.ts","store/actions/orders.ts","pages/HomePage/HomePage.tsx","utils/formatter.ts","pages/OrdersPage/OrdersPage.tsx","utils/limits.ts","utils/validatorsSchemes.ts","services/categoriesApi.ts","store/actions/categories.ts","utils/getBase64.ts","pages/OrderCreatePage/components/OrderCreateForm.tsx","pages/OrderCreatePage/OrderCreatePage.tsx","pages/OrderPage/components/OrderEditableField.tsx","pages/OrderPage/components/OrderInfoBody.tsx","pages/OrderPage/components/OrderDescription.tsx","pages/OrderPage/OrderPage.tsx","pages/ContractorsPage/ContractorsPage.tsx","pages/ContractorPage/components/ContractorEditableField.tsx","pages/ContractorPage/components/ContractorInfoBody.tsx","pages/ContractorPage/components/ContractorDescription.tsx","pages/ContractorPage/ContractorPage.tsx","pages/ContractorCreatePage/components/ContractorField.tsx","pages/ContractorCreatePage/components/SupplierDescrForm.tsx","pages/ContractorCreatePage/components/CustomerDescrForm.tsx","pages/ContractorCreatePage/ContractorCreatePage.tsx","pages/CategoriesPage/components/CategoryEditableField.tsx","pages/CategoriesPage/components/MainCategoryActions.tsx","pages/CategoriesPage/CategoriesPage.tsx","pages/CategoryCreatePage/CategoryCreatePage.tsx","pages/DeletedCategoriesPage/DeletedCategoriesPage.tsx","pages/OrderChatsPage/OrderChatsPage.tsx","store/actions/chats.ts","store/selectors/chats.ts","pages/ChatPage/ChatPage.tsx","layouts/MainLayout.tsx","App.tsx","reportWebVitals.ts","store/reducers/auth.ts","store/reducers/categories.ts","store/reducers/contractors.ts","store/reducers/orders.ts","store/reducers/chats.ts","store/store.ts","index.tsx"],"names":["ActionStatusEnum","Header","Layout","AppHeader","React","useState","currentLocation","setCurrentLocation","location","useLocation","useEffect","pathname","split","offsetTop","className","to","src","logo","size","theme","mode","defaultSelectedKeys","selectedKeys","Item","SubMenu","Menu","Sider","AppSideBar","search","width","icon","GroupOutlined","title","UserOutlined","ClusterOutlined","memo","AppPreloader","UploadFileForm","onChange","isUploading","inputRef","useRef","input","current","addEventListener","removeEventListener","onClick","click","PlusOutlined","ref","type","hidden","accept","AppAlert","status","errorMessage","successMessage","onClose","NEVER","message","ERROR","closable","Option","Select","Text","Typography","SelectParentCategory","mainCategories","handleChangeParentId","item","error","classNames","defaultValue","parentId","id","name","map","mainCat","value","AppMap","withScriptjs","withGoogleMap","handleSelectCoords","marker","defaultZoom","coordinatesLatitude","length","isNaN","Number","defaultCenter","lat","lng","coordinatesLongitude","e","latLng","position","baseURL","axios","interceptors","request","use","config","headers","timeout","ContractorTypesEnum","ContractorStatusEnum","ImagesList","images","editMode","removeImage","img","shape","DeleteOutlined","attachmentLink","String","AppSearchField","placeholder","OrderStatusEnum","getCategoriesState","state","categories","getAllCategoriesState","getCategoriesErrorMessageState","getCategoriesLoadingState","isLoadingCategories","getMainCategoriesState","createSelector","filter","category","isDeleted","getSubCategoriesState","getDeletedCategoriesState","getCategoryInProcessEditState","categoryInProcessEdit","getCategoriesActionStatusState","categoriesActionStatus","getCategoriesTreeDataState","subCategories","subCats","subCat","key","children","getContractorsState","contractors","getContractorsListState","getCurrentContractorState","currentContractor","getFilteredContractorsListState","searchText","categoryId","contractor","contractorType","CUSTOMER","SUPPLIER","toLowerCase","includes","Boolean","find","getContractorsLoadingState","contractorsLoading","getContractorsActionStatusState","contractorsActionStatus","getContractorsErrorMessage","getContractorsCountState","getCustomersCountState","getSuppliersCountState","getDeletedContractorCountState","getContractorImagesState","contractorImages","getContractorImageUploadingState","contractorImageUploading","getContractorsByCategoriesState","contractorsByCurrentCategory","contractorCategory","categoryName","contractorsCount","renderActiveShape","props","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","fill","payload","percent","sin","cos","sx","sy","mx","my","ex","ey","textAnchor","x","y","dy","Sector","d","stroke","r","toFixed","ContractorsStatistic","activeIndex","setActiveIndex","allContractorsCount","useSelector","customersCount","suppliersCount","deletedContractorsCount","data","useMemo","ResponsiveContainer","PieChart","height","Pie","activeShape","dataKey","onMouseEnter","_","index","getOrdersState","orders","getOrdersListState","getFilteredOrdersListState","contractorId","order","orderStatus","NEW","DELETED","ARCHIVED","customerId","getOrdersLoadingState","ordersLoading","getOrdersErrorMessageState","getOrderActionStatusState","orderActionStatus","getCurrentOrderState","currentOrder","getAllOrdersCountState","getActiveOrdersCountState","getDeletedOrdersCountState","getHistoryOrdersCountState","getTodayOrdersCountState","startDayTime","moment","startOf","valueOf","endDayTime","endOf","creationDate","getTodayArchivedCountState","actualDate","getOrdersByCategoriesState","ordersByCurrentCategory","orderCategory","ordersCount","getOrderImagesState","orderImages","getOrderImagesLoadingState","getOrderChatsState","orderChats","OrdersStatistic","allOrdersCount","activeOrdersCount","deletedOrdersCount","historyOrdersCount","OrdersCounter","createdTodayCount","closedTodayCount","prefix","ArrowUpOutlined","valueStyle","color","ArrowDownOutlined","CustomTooltip","active","label","OrdersByCategories","ordersByCategories","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","content","Legend","Bar","barSize","ContractorsByCategories","contractorsByCategories","contractorsApi","getContractors","a","get","createContractor","formData","post","updateContractor","patch","deleteContractor","delete","getContractorById","removeContractorAttachment","attachmentId","attachmentsApi","addAttachment","attachment","removeAttachment","contractorActions","imageId","showError","text","dispatch","console","log","SUCCESS","addContractorImage","image","imageOut","ordersApi","getOrders","createOrder","getOrderById","orderId","deleteOrder","updateOrder","removeOrderAttachment","chatsApi","getOrderChats","getAllChatMessage","chatId","ordersActions","orderImageUploading","addOrderImage","Title","Content","HomePage","useDispatch","locale","formatDate","date","format","Column","Table","getNumberSorter","fieldName","compare","b","getStringSorter","localeCompare","OrdersPage","setSearchText","query","URLSearchParams","ordersError","history","useHistory","clearState","useCallback","fetchData","handleViewOrder","push","currentTarget","ReloadOutlined","showSorterTooltip","dataSource","rowKey","expandable","expandedRowRender","description","window","confirm","danger","dataIndex","render","colors","sorter","defaultSortOrder","TITLE_LENGTH","TEXT_LENGTH","CONTACT_INFORMATION_LENGTH","phoneCodes","orderSchema","yup","max","required","totalSum","test","comment","typeError","supplierSchema","phoneNumber","min","code","slice","address","contactName","webSite","eMail","email","customerSchema","otp","matches","categorySchema","categoriesApi","getAllCategories","deleteAllCategories","addCategory","getCategoryById","deleteCategoryById","updateCategoryById","categoriesActions","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","OrderCreateForm","control","errors","rules","field","validateStatus","help","TextArea","SHOW_ALL","TreeSelect","OrderCreatePage","useForm","resolver","yupResolver","reset","handleSubmit","formState","selectedCategories","setSelectedCategories","orderError","orderLoadingState","orderUploading","categoriesTree","categoriesError","clearOrderState","clearCategoriesState","handleUploadImage","target","files","base64","ext","pop","onSubmit","newOrder","attachments","level","treeData","treeCheckable","showCheckedStrategy","style","marginBottom","maxTagCount","removeNewOrderImage","disabled","Object","keys","OrderEditableField","isTextArea","isNumberInput","OrderInfoBody","handleSelectCategories","handleRemoveImage","handleAddImage","imageUploading","OrderDescription","column","OrderPage","setEditMode","useParams","toggleEditMode","prev","updatedOrder","editActionsButtons","actionsButtons","alert","ghost","onBack","back","extra","removeOrderImage","ContractorsPage","contractorsError","UNKNOWN","replace","ContractorEditableField","str","n","maxLength","href","rel","substr","ContractorInfoBody","registeringType","ContractorDescription","handleSelectRegType","toggleShowMap","Group","contacts","ContractorPage","setLatLng","setRegisteringType","showMap","setShowMap","contractorActionStatus","contractorError","contractorLoadingState","coordinates","newContractor","handleDeleteContractor","handleCancelEdit","checkDisabledBtn","actionButtons","containerElement","mapElement","googleMapURL","loadingElement","removeContractorImage","ContractorField","subtitle","textArea","InputField","Input","fields","SupplierDescrForm","CustomerDescrForm","ContractorCreatePage","contractorLoading","clearContractorsState","contractorsList","createContractorProfile","block","removeNewContractorImage","CategoryEditableField","currentValue","tooltip","stopPropagation","CategoryActions","disabledBtn","onSave","onEdit","onRemove","Panel","Collapse","CategoriesPage","editableCategory","setEditableCategory","categoriesLoading","categoryInEditProcess","onCategoryNameChange","accordion","header","MainCategoryActions","renderItem","actions","Meta","CategoryCreatePage","createdCategory","createCategory","DeletedCategoriesPage","deletedCategories","updateCategory","onRestore","OrderChatsPage","chatsLoading","chats","Empty","PRESENTED_IMAGE_SIMPLE","chat","bodyStyle","display","Grid","supplierId","supplierName","customerName","chatsActions","messages","getChatsState","getChatLoadinState","getChatMessagesState","ChatPage","messagesLoading","getChatMessages","bordered","mark","timeStamp","senderName","MainLayout","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","authReducer","action","currentCategory","categoriesReducer","newCategoriesList","contractorsReducer","ordersReducer","chatsReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","auth","createStore","applyMiddleware","thunk","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.da14941f.chunk.js","sourcesContent":["import { Control, FieldError } from \"react-hook-form\";\r\n\r\nexport type StateSpecializationType = {\r\n  [key: string]: {\r\n    IDs: string[];\r\n    names: string[] | [];\r\n  };\r\n};\r\n\r\nexport type ActionsCreatorsTypes<T> = T extends { [key: string]: infer U }\r\n  ? U\r\n  : never;\r\n\r\nexport enum ActionStatusEnum {\r\n  SUCCESS = \"SUCCESS\",\r\n  ERROR = \"ERROR\",\r\n  NEVER = \"NEVER\",\r\n}\r\n\r\nexport type OtpFormDataType = {\r\n  phoneNumber: string;\r\n  otp: string;\r\n};\r\n\r\nexport type EditableFieldPropsType<T, F> = {\r\n  editMode: boolean;\r\n  fieldName: F;\r\n  control: Control<T, object>;\r\n  error?: FieldError;\r\n  defaultValue?: string | number;\r\n  isTextArea?: boolean;\r\n  isNumberInput?: boolean;\r\n  placeholder?: string;\r\n  currentValue?: string;\r\n  maxLength?: number;\r\n};\r\n\r\nexport type Result = {\r\n  id: number;\r\n  error: string;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.4de10a08.png\";","import React from \"react\";\r\nimport { Affix, Layout, Menu, Avatar } from \"antd\";\r\nimport { NavLink, useLocation } from \"react-router-dom\";\r\nimport logo from \"../assets/images/logo.png\";\r\n\r\nconst { Header } = Layout;\r\n\r\nconst AppHeader = () => {\r\n  const [currentLocation, setCurrentLocation] = React.useState<string[]>([\"/\"]);\r\n\r\n  const location = useLocation();\r\n\r\n  React.useEffect(() => {\r\n    setCurrentLocation([location.pathname.split(\"/\")[1]]);\r\n  }, [location]);\r\n\r\n  return (\r\n    <Affix offsetTop={0}>\r\n      <Header className=\"header\">\r\n        <div className=\"header__logo\">\r\n          <NavLink to=\"/\">\r\n            <Avatar src={logo} size=\"large\" />\r\n          </NavLink>\r\n        </div>\r\n        <Menu\r\n          theme=\"dark\"\r\n          mode=\"horizontal\"\r\n          defaultSelectedKeys={[\"/home\"]}\r\n          selectedKeys={currentLocation}\r\n          className=\"header__menu\"\r\n        >\r\n          <Menu.Item key=\"home\">\r\n            <NavLink to=\"/home\">Главная</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"orders\">\r\n            <NavLink to=\"/orders\">Заявки</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"contractors\">\r\n            <NavLink to=\"/contractors\">Контрагенты</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"categories\">\r\n            <NavLink to=\"/categories\">Категории</NavLink>\r\n          </Menu.Item>\r\n        </Menu>\r\n        <div className=\"header__logout\">\r\n          <NavLink to=\"/suppliers\">Выйти</NavLink>\r\n        </div>\r\n      </Header>\r\n    </Affix>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React from \"react\";\r\n\r\nimport { Layout, Menu, Affix } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  ClusterOutlined,\r\n  GroupOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { NavLink, useLocation } from \"react-router-dom\";\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Sider } = Layout;\r\n\r\nconst AppSideBar = () => {\r\n  const [currentLocation, setCurrentLocation] = React.useState<string[]>([\"/\"]);\r\n\r\n  const location = useLocation();\r\n\r\n  React.useEffect(() => {\r\n    setCurrentLocation([`${location.pathname}${location.search}`]);\r\n  }, [location]);\r\n\r\n  return (\r\n    <Affix offsetTop={64}>\r\n      <Sider width={200} className=\"site-layout-background sidebar\">\r\n        <Menu\r\n          mode=\"inline\"\r\n          className=\"sidebar__menu\"\r\n          selectedKeys={currentLocation}\r\n        >\r\n          <SubMenu key=\"sub1\" icon={<GroupOutlined />} title=\"Заявки\">\r\n            <Menu.Item key=\"/orders\">\r\n              <NavLink to=\"/orders\">Все заявки</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/orders?filter=active\">\r\n              <NavLink to=\"/orders?filter=active\">Активные заявки</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/orders?filter=archived\">\r\n              <NavLink to=\"/orders?filter=archived\">Архивные заявки</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/orders?filter=deleted\">\r\n              <NavLink to=\"/orders?filter=deleted\">Удаленные заявки</NavLink>\r\n            </Menu.Item>\r\n\r\n            <Menu.Item key=\"/orders/create\">\r\n              <NavLink to=\"/orders/create\">Создать заявку</NavLink>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n\r\n          <SubMenu key=\"sub3\" icon={<UserOutlined />} title=\"Контрагенты\">\r\n            <Menu.Item key=\"/customcontractorsers\">\r\n              <NavLink to=\"/contractors\">Все контрагенты</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/contractors?filter=customers\">\r\n              <NavLink to=\"/contractors?filter=customers\">Заказчики</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/contractors?filter=supplier\">\r\n              <NavLink to=\"/contractors?filter=supplier\">Поставщики</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/contractors?filter=deleted\">\r\n              <NavLink to=\"/contractors?filter=deleted\">Удаленные</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/contractors/create\">\r\n              <NavLink to=\"/contractors/create\">Создать контрагента</NavLink>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n\r\n          <SubMenu key=\"sub4\" icon={<ClusterOutlined />} title=\"Категории\">\r\n            <Menu.Item key=\"/categories\">\r\n              <NavLink to=\"/categories\">Все категории</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/categories/deleted\">\r\n              <NavLink to=\"/categories/deleted\">Удаленные категории</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/categories/create\">\r\n              <NavLink to=\"/categories/create\">Создать категорию</NavLink>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        </Menu>\r\n      </Sider>\r\n    </Affix>\r\n  );\r\n};\r\n\r\nexport default React.memo(AppSideBar);\r\n","import { Spin } from \"antd\";\r\nimport React from \"react\";\r\n\r\ntype AppPreloaderPropsType = {\r\n  size?: \"small\" | \"large\" | \"default\";\r\n};\r\n\r\nconst AppPreloader: React.FC<AppPreloaderPropsType> = ({\r\n  size = \"default\",\r\n}) => {\r\n  return (\r\n    <div className=\"preloader\">\r\n      <Spin size={size} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppPreloader;\r\n","import React from \"react\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { Spin } from \"antd\";\r\n\r\ntype UploadFileFormPropsType = {\r\n  onChange: (e: Event) => void;\r\n  isUploading: boolean;\r\n};\r\n\r\nconst UploadFileForm: React.FC<UploadFileFormPropsType> = ({\r\n  onChange,\r\n  isUploading,\r\n}) => {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  const handleClick = () => {\r\n    inputRef.current?.click();\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const input = inputRef.current;\r\n    if (inputRef) {\r\n      input?.addEventListener(\"change\", onChange);\r\n    }\r\n    return () => {\r\n      input?.removeEventListener(\"change\", onChange);\r\n    };\r\n  }, [onChange]);\r\n\r\n  return (\r\n    <div className=\"upload\">\r\n      <div className=\"upload__btn\" onClick={handleClick}>\r\n        <div className=\"upload__btn-body\">\r\n          {isUploading ? (\r\n            <Spin />\r\n          ) : (\r\n            <>\r\n              <PlusOutlined /> <div>Загрузить</div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <input ref={inputRef} type=\"file\" hidden accept=\"image/*\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadFileForm;\r\n","import { Alert } from \"antd\";\r\nimport React from \"react\";\r\nimport { ActionStatusEnum } from \"../models/types\";\r\n\r\ntype AlertPropsType = {\r\n  status: string;\r\n  errorMessage?: string | null;\r\n  successMessage?: string;\r\n  onClose: () => void;\r\n};\r\n\r\nconst AppAlert: React.FC<AlertPropsType> = ({\r\n  status,\r\n  errorMessage,\r\n  successMessage,\r\n  onClose,\r\n}) => {\r\n  if (status === ActionStatusEnum.NEVER) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Alert\r\n      className=\"error\"\r\n      message={\r\n        status === ActionStatusEnum.ERROR ? errorMessage : successMessage\r\n      }\r\n      type={status === ActionStatusEnum.ERROR ? \"error\" : \"success\"}\r\n      closable\r\n      onClose={onClose}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AppAlert;\r\n","import { Select, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { CategoryType } from \"../models/Categories\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\ntype SelectParentCategoryPropsType = {\r\n  mainCategories: CategoryType[] | null;\r\n  handleChangeParentId: (id: number) => void;\r\n  item?: CategoryType;\r\n  error?: string;\r\n};\r\n\r\nconst SelectParentCategory: React.FC<SelectParentCategoryPropsType> = ({\r\n  mainCategories,\r\n  handleChangeParentId,\r\n  item,\r\n  error,\r\n}) => {\r\n  return (\r\n    <div\r\n      className={classNames(\"categories__select-wrapper\", {\r\n        \"categories__select-error\": error,\r\n      })}\r\n    >\r\n      <Text className=\"subtitle\">Выберите родительскую категорию</Text>\r\n      <Select\r\n        defaultValue={item ? item.parentId : 0}\r\n        onChange={handleChangeParentId}\r\n        className=\"categories__select\"\r\n      >\r\n        {mainCategories &&\r\n          [{ id: 0, name: \"ОСНОВНАЯ КАТЕГОРИЯ\" }, ...mainCategories].map(\r\n            (mainCat) => {\r\n              return (\r\n                <Option value={mainCat.id} key={mainCat.id}>\r\n                  {mainCat.name}\r\n                </Option>\r\n              );\r\n            }\r\n          )}\r\n      </Select>\r\n      <Text className=\"error-text\">{error}</Text>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectParentCategory;\r\n","import React from \"react\";\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n  WithGoogleMapProps,\r\n  WithScriptjsProps,\r\n} from \"react-google-maps\";\r\nimport { CoordinatesType } from \"../models/Contractors\";\r\n\r\ntype AppMapPropsType = {\r\n  handleSelectCoords: (latLng: google.maps.LatLng | null) => void;\r\n  marker: CoordinatesType | null;\r\n};\r\n\r\nconst AppMap: React.ComponentClass<\r\n  WithGoogleMapProps & WithScriptjsProps & AppMapPropsType\r\n> = withScriptjs(\r\n  withGoogleMap(({ handleSelectCoords, marker }) => {\r\n    const onMapClick = (\r\n      e: google.maps.MouseEvent | google.maps.IconMouseEvent\r\n    ) => {\r\n      handleSelectCoords(e.latLng);\r\n    };\r\n\r\n    return (\r\n      <GoogleMap\r\n        defaultZoom={\r\n          marker\r\n            ? marker.coordinatesLatitude.length > 0 &&\r\n              !isNaN(Number(marker.coordinatesLatitude))\r\n              ? 12\r\n              : 7\r\n            : 7\r\n        }\r\n        defaultCenter={\r\n          marker\r\n            ? marker.coordinatesLatitude.length > 0 &&\r\n              !isNaN(Number(marker.coordinatesLatitude))\r\n              ? {\r\n                  lat: Number(marker.coordinatesLatitude),\r\n                  lng: Number(marker.coordinatesLongitude),\r\n                }\r\n              : { lat: 51.2146889644867, lng: 68.80153486533352 }\r\n            : { lat: 51.2146889644867, lng: 68.80153486533352 }\r\n        }\r\n        onClick={onMapClick}\r\n      >\r\n        {marker && (\r\n          <Marker\r\n            position={{\r\n              lat: Number(marker.coordinatesLatitude),\r\n              lng: Number(marker.coordinatesLongitude),\r\n            }}\r\n          />\r\n        )}\r\n      </GoogleMap>\r\n    );\r\n  })\r\n);\r\n\r\nexport default AppMap;\r\n","import axios from \"axios\";\r\n\r\nexport const baseURL = \"https://office.e-health.kz:8889\";\r\n// export const baseURL = \"http://192.168.10.246:8888\";\r\n\r\naxios.interceptors.request.use((config) => {\r\n  config.headers[\"Content-Security-Policy-Report-Only\"] = \"default-src 'none';\";\r\n  config.headers[\"Authorization\"] = \"Basic YWRtaW46Z2hidnRo\";\r\n  config.baseURL = baseURL;\r\n  config.timeout = 5000;\r\n  return config;\r\n});\r\n\r\nexport { axios };\r\n","import { AttachmentInType, AttachmentOutType } from \"./Attachments\";\r\nimport { CategoryInType, CategoryOutType } from \"./Categories\";\r\n\r\nexport type CoordinatesType = {\r\n  coordinatesLatitude: string;\r\n  coordinatesLongitude: string;\r\n};\r\n\r\nexport type ContactsType = {\r\n  address?: string;\r\n  webSite?: string;\r\n  eMail?: string;\r\n};\r\n\r\nexport enum ContractorTypesEnum {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  SUPPLIER = \"SUPPLIER\",\r\n  CUSTOMER = \"CUSTOMER\",\r\n}\r\n\r\nexport enum ContractorStatusEnum {\r\n  NEW = \"NEW\",\r\n  REGISTERED = \"REGISTERED\",\r\n  BANNED = \"BANNED\",\r\n}\r\n\r\nexport type ContractorType = {\r\n  id: number;\r\n  isDeleted: boolean;\r\n  name: string;\r\n  contactName: string;\r\n  phoneNumber: string;\r\n  description: string;\r\n  location: string;\r\n  coordinates: CoordinatesType;\r\n  contacts: ContactsType;\r\n  contractorType: ContractorTypesEnum;\r\n  categories: CategoryOutType[];\r\n  attachments: AttachmentOutType[];\r\n  creationDate: number;\r\n  rating: number;\r\n};\r\n\r\nexport type ContractorStringSortFieldsType =\r\n  | \"contractorType\"\r\n  | \"name\"\r\n  | \"location\";\r\n\r\nexport type ContractorNumberSortFieldsType = \"rating\";\r\n\r\nexport type AddContractorFormDataType = {\r\n  name: string;\r\n  contactName: string;\r\n  phoneNumber: string;\r\n  description?: string;\r\n  location: string;\r\n  coordinates: CoordinatesType;\r\n  contacts: ContactsType;\r\n  contractorType: ContractorTypesEnum;\r\n  categories: CategoryInType[];\r\n  attachments: AttachmentInType[];\r\n};\r\n\r\nexport type SupplierDescrFormDataType = {\r\n  name: string;\r\n  phoneNumber: string;\r\n  contactName: string;\r\n  location: string;\r\n  webSite: string;\r\n  eMail: string;\r\n  address: string;\r\n  description?: string;\r\n};\r\nexport type CustomerDescrFormDataType = {\r\n  name: string;\r\n  phoneNumber: string;\r\n  contactName: string;\r\n  location: string;\r\n};\r\n\r\nexport type SupplierFieldsNameType =\r\n  | \"name\"\r\n  | \"phoneNumber\"\r\n  | \"contactName\"\r\n  | \"location\"\r\n  | \"webSite\"\r\n  | \"eMail\"\r\n  | \"address\"\r\n  | \"description\";\r\nexport type CustomerFieldsNameType =\r\n  | \"name\"\r\n  | \"phoneNumber\"\r\n  | \"contactName\"\r\n  | \"location\";\r\n\r\nexport type ContractorInType = {\r\n  contractorId: number;\r\n};\r\n\r\nexport type ContractorOutType = {\r\n  contractorId: number;\r\n  contractorName: string;\r\n};\r\n\r\nexport type ContractorsQueryFilterType =\r\n  | \"customers\"\r\n  | \"supplier\"\r\n  | \"deleted\"\r\n  | null;\r\n\r\nexport type UserOutType = {\r\n  id: number;\r\n  phoneNumber: string;\r\n  pushToken: string;\r\n  secretToken: string;\r\n  isBlocked: boolean;\r\n};\r\nexport type UserInType = {\r\n  phoneNumber: string;\r\n  password?: string;\r\n  smsCode: string;\r\n  pushToken?: string;\r\n};\r\nexport type UserCheckType = {\r\n  phoneNumber: string;\r\n  secretToken: string;\r\n};\r\nexport type UserCredentialsType = {\r\n  userName: string;\r\n  secretToken: string;\r\n};\r\n","import React from \"react\";\r\nimport { baseURL } from \"../api/axios\";\r\nimport { AttachmentOutType } from \"../models/Attachments\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Button, Image } from \"antd\";\r\n\r\ntype ImagesListPropsType = {\r\n  images: AttachmentOutType[];\r\n  editMode: boolean;\r\n  removeImage: (imageId: number) => void;\r\n};\r\n\r\nconst ImagesList: React.FC<ImagesListPropsType> = ({\r\n  images,\r\n  editMode,\r\n  removeImage,\r\n}) => {\r\n  return (\r\n    <div className=\"order__images-list\">\r\n      {images &&\r\n        images.map((img) => (\r\n          <div key={String(img.id)} className=\"order__image-wrapper\">\r\n            {editMode && (\r\n              <Button\r\n                type=\"default\"\r\n                shape=\"circle\"\r\n                icon={<DeleteOutlined />}\r\n                size=\"middle\"\r\n                className=\"order__image-delete\"\r\n                onClick={() => removeImage(img.id)}\r\n              />\r\n            )}\r\n            <Image\r\n              width={200}\r\n              src={`${baseURL}${img.attachmentLink}`}\r\n              className=\"order__image\"\r\n            />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\nexport default ImagesList;\r\n","import { Input } from \"antd\";\r\nimport React, { ChangeEventHandler } from \"react\";\r\n\r\ntype AppSearchFieldPropsType = {\r\n  value: string;\r\n  onChange: ChangeEventHandler<HTMLInputElement>;\r\n  placeholder: string;\r\n};\r\n\r\nconst AppSearchField: React.FC<AppSearchFieldPropsType> = ({\r\n  value,\r\n  onChange,\r\n  placeholder,\r\n}) => {\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"filter__input\">\r\n        <Input placeholder={placeholder} value={value} onChange={onChange} />\r\n      </div>\r\n      <div className=\"filter__actions\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppSearchField;\r\n","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./../store\";\r\n\r\nconst getCategoriesState = (state: AppStateType) => state.categories;\r\n\r\nconst getAllCategoriesState = (state: AppStateType) =>\r\n  getCategoriesState(state).categories;\r\n\r\nexport const getCategoriesErrorMessageState = (state: AppStateType) =>\r\n  getCategoriesState(state).errorMessage;\r\n\r\nexport const getCategoriesLoadingState = (state: AppStateType) =>\r\n  getCategoriesState(state).isLoadingCategories;\r\n\r\nexport const getMainCategoriesState = createSelector(\r\n  [getAllCategoriesState],\r\n  (categories) => {\r\n    return categories?.filter(\r\n      (category) => category.parentId === 0 && !category.isDeleted\r\n    );\r\n  }\r\n);\r\n\r\nexport const getSubCategoriesState = createSelector(\r\n  [getAllCategoriesState],\r\n  (categories) => {\r\n    return categories?.filter(\r\n      (category) => category.parentId !== 0 && !category.isDeleted\r\n    );\r\n  }\r\n);\r\n\r\nexport const getDeletedCategoriesState = (state: AppStateType) =>\r\n  getAllCategoriesState(state)?.filter((category) => category.isDeleted);\r\n\r\nexport const getCurrentCategoryState = (state: AppStateType) =>\r\n  getCategoriesState(state).currentCategory;\r\n\r\nexport const getCategoryInProcessEditState = (state: AppStateType) =>\r\n  getCategoriesState(state).categoryInProcessEdit;\r\n\r\nexport const getCategoriesActionStatusState = (state: AppStateType) =>\r\n  getCategoriesState(state).categoriesActionStatus;\r\n\r\nexport const getCategoriesTreeDataState = createSelector(\r\n  [getMainCategoriesState, getSubCategoriesState],\r\n  (mainCategories, subCategories) => {\r\n    if (mainCategories && subCategories) {\r\n      const tree = mainCategories.map((mainCat) => {\r\n        const subCats = subCategories\r\n          .filter((subCat) => subCat.parentId === mainCat.id)\r\n          .map((subCat) => {\r\n            return {\r\n              title: subCat.name,\r\n              value: subCat.id,\r\n              key: subCat.id,\r\n            };\r\n          });\r\n        return {\r\n          title: mainCat.name,\r\n          value: mainCat.id,\r\n          key: mainCat.id,\r\n          children: subCats,\r\n        };\r\n      });\r\n      return tree;\r\n    }\r\n\r\n    return [];\r\n  }\r\n);\r\n","import { AttachmentInType, AttachmentOutType } from \"./Attachments\";\r\nimport { CategoryInType, CategoryOutType } from \"./Categories\";\r\nimport { ContractorInType, ContractorOutType } from \"./Contractors\";\r\n\r\nexport type OrderType = {\r\n  id: number;\r\n  creationDate: number;\r\n  actualDate: number;\r\n  comment?: string;\r\n  title: string;\r\n  description?: string;\r\n  totalSum: number;\r\n  orderStatus: OrderStatusEnum;\r\n  customerId: number;\r\n  customerPhoneNumber: string;\r\n  categories: CategoryOutType[];\r\n  contractors: ContractorOutType[];\r\n  attachments: AttachmentOutType[];\r\n};\r\n\r\nexport type OrderNumberSortFieldsType =\r\n  | \"actualDate\"\r\n  | \"creationDate\"\r\n  | \"totalSum\";\r\nexport type OrderStringSortFieldsType = \"title\" | \"orderStatus\";\r\n\r\nexport enum OrderStatusEnum {\r\n  NEW = \"NEW\",\r\n  ARCHIVED = \"ARCHIVED\",\r\n  DELETED = \"DELETED\",\r\n}\r\nexport type OrderFieldsNameType =\r\n  | \"title\"\r\n  | \"totalSum\"\r\n  | \"comment\"\r\n  | \"description\";\r\n\r\nexport type AddOrderFormData = {\r\n  title: string;\r\n  comment: string;\r\n  totalSum: number;\r\n  categories: CategoryInType[];\r\n  contractors: ContractorInType[] | [];\r\n  attachments: AttachmentInType[];\r\n  customerId: number;\r\n  description?: string;\r\n};\r\nexport type DescriptionOrderFormData = {\r\n  title: string;\r\n  description?: string;\r\n  comment: string;\r\n  totalSum: number;\r\n};\r\n\r\nexport type OrdersQueryFilterType = \"active\" | \"deleted\" | \"archived\" | null;\r\nexport type SortByOrdersFieldsType = \"title\" | \"totalSum\" | \"creationDate\";\r\n","import { createSelector } from \"reselect\";\r\nimport {\r\n  ContractorsQueryFilterType,\r\n  ContractorTypesEnum,\r\n} from \"../../models/Contractors\";\r\nimport { AppStateType } from \"./../store\";\r\nimport { getMainCategoriesState } from \"./categories\";\r\n\r\nconst getContractorsState = (state: AppStateType) => state.contractors;\r\n\r\nconst getContractorsListState = (state: AppStateType) =>\r\n  state.contractors.contractors;\r\n\r\nexport const getCurrentContractorState = (state: AppStateType) =>\r\n  getContractorsState(state).currentContractor;\r\n\r\nexport const getFilteredContractorsListState = (\r\n  searchText: string,\r\n  filter: ContractorsQueryFilterType,\r\n  categoryId: string | null\r\n) =>\r\n  createSelector([getContractorsListState], (contractors) => {\r\n    return contractors\r\n      ?.filter((contractor) => {\r\n        if (filter === \"deleted\") {\r\n          return contractor.isDeleted;\r\n        } else if (filter === \"customers\") {\r\n          return contractor.contractorType === ContractorTypesEnum.CUSTOMER;\r\n        } else if (filter === \"supplier\") {\r\n          return contractor.contractorType === ContractorTypesEnum.SUPPLIER;\r\n        }\r\n        return true;\r\n      })\r\n      ?.filter((contractor) =>\r\n        contractor.name.toLowerCase().includes(searchText.toLowerCase())\r\n      )\r\n      ?.filter((contractor) => {\r\n        if (categoryId) {\r\n          return Boolean(\r\n            contractor.categories.find((category) => {\r\n              return (\r\n                category.categoryId === Number(categoryId) ||\r\n                category.parentId === Number(categoryId)\r\n              );\r\n            })\r\n          );\r\n        }\r\n        return true;\r\n      });\r\n  });\r\n\r\nexport const getContractorsLoadingState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorsLoading;\r\nexport const getContractorsActionStatusState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorsActionStatus;\r\nexport const getContractorsErrorMessage = (state: AppStateType) =>\r\n  getContractorsState(state).errorMessage;\r\n\r\nexport const getContractorsCountState = createSelector(\r\n  [getFilteredContractorsListState(\"\", null, null)],\r\n  (contractors) => contractors?.length\r\n);\r\n\r\nexport const getCustomersCountState = createSelector(\r\n  [getFilteredContractorsListState(\"\", \"customers\", null)],\r\n  (contractors) => contractors?.length\r\n);\r\n\r\nexport const getSuppliersCountState = createSelector(\r\n  [getFilteredContractorsListState(\"\", \"supplier\", null)],\r\n  (contractors) => contractors?.length\r\n);\r\n\r\nexport const getDeletedContractorCountState = createSelector(\r\n  [getFilteredContractorsListState(\"\", \"deleted\", null)],\r\n  (contractors) => contractors?.length\r\n);\r\n\r\nexport const getContractorImagesState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorImages;\r\nexport const getContractorImageUploadingState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorImageUploading;\r\n\r\nexport const getContractorsByCategoriesState = createSelector(\r\n  [getMainCategoriesState, getContractorsListState],\r\n  (mainCategories, contractors) => {\r\n    if (mainCategories && contractors) {\r\n      const contractorsByCategories = mainCategories.map((category) => {\r\n        const contractorsByCurrentCategory = contractors.filter(\r\n          (contractor) => {\r\n            const wantedCategory = contractor.categories.find(\r\n              (contractorCategory) =>\r\n                contractorCategory.categoryId === category.id\r\n            );\r\n\r\n            if (wantedCategory) {\r\n              return true;\r\n            }\r\n            return false;\r\n          }\r\n        );\r\n\r\n        return {\r\n          categoryName: category.name,\r\n          contractorsCount: contractorsByCurrentCategory.length,\r\n        };\r\n      });\r\n      return contractorsByCategories;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n);\r\n","import React from \"react\";\r\nimport { PieChart, Pie, Sector, ResponsiveContainer } from \"recharts\";\r\nimport { Typography } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getContractorsCountState,\r\n  getCustomersCountState,\r\n  getDeletedContractorCountState,\r\n  getSuppliersCountState,\r\n} from \"../../../store/selectors/contractors\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst renderActiveShape = (props: any) => {\r\n  const RADIAN = Math.PI / 180;\r\n  const {\r\n    cx,\r\n    cy,\r\n    midAngle,\r\n    innerRadius,\r\n    outerRadius,\r\n    startAngle,\r\n    endAngle,\r\n    fill,\r\n    payload,\r\n    percent,\r\n    value,\r\n  } = props;\r\n\r\n  const sin = Math.sin(-RADIAN * midAngle);\r\n  const cos = Math.cos(-RADIAN * midAngle);\r\n  const sx = cx + (outerRadius + 10) * cos;\r\n  const sy = cy + (outerRadius + 10) * sin;\r\n  const mx = cx + (outerRadius + 30) * cos;\r\n  const my = cy + (outerRadius + 30) * sin;\r\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22;\r\n  const ey = my;\r\n  const textAnchor = cos >= 0 ? \"start\" : \"end\";\r\n  return (\r\n    <g>\r\n      <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>\r\n        {payload.name}\r\n      </text>\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        innerRadius={innerRadius}\r\n        outerRadius={outerRadius}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        fill={fill}\r\n      />\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        innerRadius={outerRadius + 6}\r\n        outerRadius={outerRadius + 10}\r\n        fill={fill}\r\n      />\r\n      <path\r\n        d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`}\r\n        stroke={fill}\r\n        fill=\"none\"\r\n      />\r\n      <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\" />\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        textAnchor={textAnchor}\r\n        fill=\"#333\"\r\n      >{`${payload.name} ${value} шт`}</text>\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        dy={18}\r\n        textAnchor={textAnchor}\r\n        fill=\"#999\"\r\n      >\r\n        {`${(percent * 100).toFixed(2)}%`}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst ContractorsStatistic = () => {\r\n  const [activeIndex, setActiveIndex] = React.useState<\r\n    number | number[] | undefined\r\n  >();\r\n\r\n  const onPieEnter = (_: any, index: number) => {\r\n    setActiveIndex(index);\r\n  };\r\n\r\n  const allContractorsCount = useSelector(getContractorsCountState);\r\n  const customersCount = useSelector(getCustomersCountState);\r\n  const suppliersCount = useSelector(getSuppliersCountState);\r\n  const deletedContractorsCount = useSelector(getDeletedContractorCountState);\r\n\r\n  const data = React.useMemo(() => {\r\n    return [\r\n      { name: \"Заказчиков\", value: customersCount ? customersCount : 0 },\r\n      { name: \"Поставщиков\", value: suppliersCount ? suppliersCount : 0 },\r\n      {\r\n        name: \"Удаленных\",\r\n        value: deletedContractorsCount ? deletedContractorsCount : 0,\r\n      },\r\n    ];\r\n  }, [customersCount, deletedContractorsCount, suppliersCount]);\r\n\r\n  return (\r\n    <div className=\"statistic__pie\">\r\n      <Text className=\"statistic__title\">Контрагенты</Text>\r\n      <Text className=\"statistic__pie-subtitle\">\r\n        Всего контрагентов: {allContractorsCount}\r\n      </Text>\r\n      {data && (\r\n        <ResponsiveContainer>\r\n          <PieChart width={400} height={400}>\r\n            <Pie\r\n              activeIndex={activeIndex}\r\n              activeShape={renderActiveShape}\r\n              data={data}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              innerRadius={60}\r\n              outerRadius={80}\r\n              fill=\"#8884d8\"\r\n              dataKey=\"value\"\r\n              onMouseEnter={onPieEnter}\r\n            />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContractorsStatistic;\r\n","import { createSelector } from \"reselect\";\r\nimport moment from \"moment\";\r\n\r\nimport { OrdersQueryFilterType, OrderStatusEnum } from \"../../models/Orders\";\r\n\r\nimport { AppStateType } from \"./../store\";\r\nimport { getMainCategoriesState } from \"./categories\";\r\n\r\nconst getOrdersState = (state: AppStateType) => state.orders;\r\nconst getOrdersListState = (state: AppStateType) => state.orders.orders;\r\n\r\nexport const getFilteredOrdersListState = (\r\n  searchText: string,\r\n  filter: OrdersQueryFilterType,\r\n  categoryId: string | null,\r\n  contractorId: string | null\r\n) =>\r\n  createSelector([getOrdersListState], (orders) => {\r\n    return orders\r\n      ?.filter((order) => {\r\n        if (filter === \"active\") {\r\n          return order.orderStatus === OrderStatusEnum.NEW;\r\n        } else if (filter === \"deleted\") {\r\n          return order.orderStatus === OrderStatusEnum.DELETED;\r\n        } else if (filter === \"archived\") {\r\n          return order.orderStatus === OrderStatusEnum.ARCHIVED;\r\n        }\r\n        return true;\r\n      })\r\n      ?.filter((order) =>\r\n        order.title.toLowerCase().includes(searchText.toLowerCase())\r\n      )\r\n      ?.filter((order) => {\r\n        if (categoryId) {\r\n          return Boolean(\r\n            order.categories.find((category) => {\r\n              return (\r\n                category.categoryId === Number(categoryId) ||\r\n                category.parentId === Number(categoryId)\r\n              );\r\n            })\r\n          );\r\n        }\r\n        return true;\r\n      })\r\n      ?.filter((order) => {\r\n        if (contractorId) {\r\n          return order.customerId === Number(contractorId);\r\n        }\r\n        return true;\r\n      });\r\n  });\r\n\r\nexport const getOrdersLoadingState = (state: AppStateType) =>\r\n  getOrdersState(state).ordersLoading;\r\n\r\nexport const getOrdersErrorMessageState = (state: AppStateType) =>\r\n  getOrdersState(state).errorMessage;\r\n\r\nexport const getOrderActionStatusState = (state: AppStateType) =>\r\n  getOrdersState(state).orderActionStatus;\r\n\r\nexport const getCurrentOrderState = (state: AppStateType) =>\r\n  getOrdersState(state).currentOrder;\r\n\r\nexport const getAllOrdersCountState = createSelector(\r\n  [getFilteredOrdersListState(\"\", null, null, null)],\r\n  (orders) => orders?.length\r\n);\r\n\r\nexport const getActiveOrdersCountState = createSelector(\r\n  [getFilteredOrdersListState(\"\", \"active\", null, null)],\r\n  (orders) => orders?.length\r\n);\r\n\r\nexport const getDeletedOrdersCountState = createSelector(\r\n  [getFilteredOrdersListState(\"\", \"deleted\", null, null)],\r\n  (orders) => orders?.length\r\n);\r\n\r\nexport const getHistoryOrdersCountState = createSelector(\r\n  [getFilteredOrdersListState(\"\", \"archived\", null, null)],\r\n  (orders) => orders?.length\r\n);\r\n\r\nexport const getTodayOrdersCountState = createSelector(\r\n  [getOrdersListState],\r\n  (orders) => {\r\n    if (orders) {\r\n      const startDayTime = moment().startOf(\"day\").valueOf();\r\n      const endDayTime = moment().endOf(\"day\").valueOf();\r\n      const createdToday = orders.filter((order) => {\r\n        return (\r\n          order.creationDate > startDayTime && order.creationDate < endDayTime\r\n        );\r\n      });\r\n      return createdToday.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n);\r\n\r\nexport const getTodayArchivedCountState = createSelector(\r\n  [getOrdersListState],\r\n  (orders) => {\r\n    if (orders) {\r\n      const startDayTime = moment().startOf(\"day\").valueOf();\r\n      const endDayTime = moment().endOf(\"day\").valueOf();\r\n      const archivedToday = orders.filter((order) => {\r\n        return order.actualDate > startDayTime && order.actualDate < endDayTime;\r\n      });\r\n      return archivedToday.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n);\r\n\r\n//TODO сделать индексацию\r\n\r\nexport const getOrdersByCategoriesState = createSelector(\r\n  [getMainCategoriesState, getOrdersListState],\r\n  (mainCategories, orders) => {\r\n    if (mainCategories && orders) {\r\n      const ordersByCategories = mainCategories.map((category) => {\r\n        const ordersByCurrentCategory = orders.filter((order) => {\r\n          const wantedCategory = order.categories.find(\r\n            (orderCategory) => orderCategory.categoryId === category.id\r\n          );\r\n\r\n          if (wantedCategory) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n\r\n        return {\r\n          categoryName: category.name,\r\n          ordersCount: ordersByCurrentCategory.length,\r\n        };\r\n      });\r\n      return ordersByCategories;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n);\r\n\r\nexport const getOrderImagesState = (state: AppStateType) =>\r\n  getOrdersState(state).orderImages;\r\n\r\nexport const getOrderImagesLoadingState = (state: AppStateType) =>\r\n  getOrdersState(state).ordersLoading;\r\nexport const getOrderChatsState = (state: AppStateType) =>\r\n  getOrdersState(state).orderChats;\r\n","import React from \"react\";\r\nimport { PieChart, Pie, Sector, ResponsiveContainer } from \"recharts\";\r\nimport { Typography } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getActiveOrdersCountState,\r\n  getAllOrdersCountState,\r\n  getDeletedOrdersCountState,\r\n  getHistoryOrdersCountState,\r\n} from \"../../../store/selectors/orders\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst renderActiveShape = (props: any) => {\r\n  const RADIAN = Math.PI / 180;\r\n  const {\r\n    cx,\r\n    cy,\r\n    midAngle,\r\n    innerRadius,\r\n    outerRadius,\r\n    startAngle,\r\n    endAngle,\r\n    fill,\r\n    payload,\r\n    percent,\r\n    value,\r\n  } = props;\r\n\r\n  const sin = Math.sin(-RADIAN * midAngle);\r\n  const cos = Math.cos(-RADIAN * midAngle);\r\n  const sx = cx + (outerRadius + 10) * cos;\r\n  const sy = cy + (outerRadius + 10) * sin;\r\n  const mx = cx + (outerRadius + 30) * cos;\r\n  const my = cy + (outerRadius + 30) * sin;\r\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22;\r\n  const ey = my;\r\n  const textAnchor = cos >= 0 ? \"start\" : \"end\";\r\n  return (\r\n    <g>\r\n      <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>\r\n        {payload.name}\r\n      </text>\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        innerRadius={innerRadius}\r\n        outerRadius={outerRadius}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        fill={fill}\r\n      />\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        innerRadius={outerRadius + 6}\r\n        outerRadius={outerRadius + 10}\r\n        fill={fill}\r\n      />\r\n      <path\r\n        d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`}\r\n        stroke={fill}\r\n        fill=\"none\"\r\n      />\r\n      <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\" />\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        textAnchor={textAnchor}\r\n        fill=\"#333\"\r\n      >{`${payload.name} ${value} шт`}</text>\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        dy={18}\r\n        textAnchor={textAnchor}\r\n        fill=\"#999\"\r\n      >\r\n        {`${(percent * 100).toFixed(2)}%`}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst OrdersStatistic = () => {\r\n  const [activeIndex, setActiveIndex] = React.useState<\r\n    number | number[] | undefined\r\n  >();\r\n\r\n  const onPieEnter = (_: any, index: number) => {\r\n    setActiveIndex(index);\r\n  };\r\n\r\n  const allOrdersCount = useSelector(getAllOrdersCountState);\r\n  const activeOrdersCount = useSelector(getActiveOrdersCountState);\r\n  const deletedOrdersCount = useSelector(getDeletedOrdersCountState);\r\n  const historyOrdersCount = useSelector(getHistoryOrdersCountState);\r\n\r\n  const data = React.useMemo(() => {\r\n    return [\r\n      { name: \"Активных\", value: activeOrdersCount ? activeOrdersCount : 0 },\r\n      { name: \"Архивных\", value: historyOrdersCount ? historyOrdersCount : 0 },\r\n      {\r\n        name: \"Удаленных\",\r\n        value: deletedOrdersCount ? deletedOrdersCount : 0,\r\n      },\r\n    ];\r\n  }, [activeOrdersCount, deletedOrdersCount, historyOrdersCount]);\r\n\r\n  return (\r\n    <div className=\"statistic__pie\">\r\n      <Text className=\"statistic__title\">Заявки</Text>\r\n      <Text className=\"statistic__pie-subtitle\">\r\n        Всего заявок: {allOrdersCount}\r\n      </Text>\r\n      {data && (\r\n        <ResponsiveContainer>\r\n          <PieChart width={400} height={400}>\r\n            <Pie\r\n              activeIndex={activeIndex}\r\n              activeShape={renderActiveShape}\r\n              data={data}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              innerRadius={60}\r\n              outerRadius={80}\r\n              fill=\"#8884d8\"\r\n              dataKey=\"value\"\r\n              onMouseEnter={onPieEnter}\r\n            />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersStatistic;\r\n","import React from \"react\";\r\nimport { Card, Statistic, Typography } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from \"@ant-design/icons\";\r\n\r\nimport {\r\n  getTodayArchivedCountState,\r\n  getTodayOrdersCountState,\r\n} from \"../../../store/selectors/orders\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst OrdersCounter = () => {\r\n  const createdTodayCount = useSelector(getTodayOrdersCountState);\r\n  const closedTodayCount = useSelector(getTodayArchivedCountState);\r\n\r\n  return (\r\n    <div className=\"statistic__counters\">\r\n      <div className=\"counters\">\r\n        <Card className=\"counters__item\">\r\n          <Statistic\r\n            title=\"Заявок сегодня\"\r\n            value={createdTodayCount}\r\n            prefix={<ArrowUpOutlined />}\r\n            valueStyle={{ color: \"#3f8600\" }}\r\n          />\r\n        </Card>\r\n        <Card className=\"counters__item\">\r\n          <Statistic\r\n            title=\"Сегодня закроются\"\r\n            value={closedTodayCount}\r\n            prefix={<ArrowDownOutlined />}\r\n            valueStyle={{ color: \"#cf1322\" }}\r\n          />\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersCounter;\r\n","import { Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  TooltipProps,\r\n} from \"recharts\";\r\nimport {\r\n  NameType,\r\n  ValueType,\r\n} from \"recharts/types/component/DefaultTooltipContent\";\r\nimport { getOrdersByCategoriesState } from \"../../../store/selectors/orders\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst CustomTooltip = ({\r\n  active,\r\n  payload,\r\n  label,\r\n}: TooltipProps<ValueType, NameType>) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"chart-categories__tooltip\">\r\n        <p className=\"chart-categories__tooltip-label\">{`${label} : ${payload[0].value} шт`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst OrdersByCategories = () => {\r\n  const ordersByCategories = useSelector(getOrdersByCategoriesState);\r\n\r\n  return (\r\n    <div className=\"statistic__chart-categories chart-categories\">\r\n      <Text className=\"statistic__title\">Заявки по категориям</Text>\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <BarChart\r\n          width={500}\r\n          height={300}\r\n          data={ordersByCategories}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"categoryName\" />\r\n          <YAxis />\r\n          <Tooltip content={<CustomTooltip />} />\r\n          <Legend />\r\n          <Bar\r\n            dataKey=\"ordersCount\"\r\n            name=\"Категории\"\r\n            barSize={20}\r\n            fill=\"#8884d8\"\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersByCategories;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Typography } from \"antd\";\r\n\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  TooltipProps,\r\n} from \"recharts\";\r\nimport {\r\n  NameType,\r\n  ValueType,\r\n} from \"recharts/types/component/DefaultTooltipContent\";\r\nimport { getContractorsByCategoriesState } from \"../../../store/selectors/contractors\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst CustomTooltip = ({\r\n  active,\r\n  payload,\r\n  label,\r\n}: TooltipProps<ValueType, NameType>) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"chart-categories__tooltip\">\r\n        <p className=\"chart-categories__tooltip-label\">{`${label} : ${payload[0].value} шт`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst ContractorsByCategories = () => {\r\n  const contractorsByCategories = useSelector(getContractorsByCategoriesState);\r\n\r\n  return (\r\n    <div className=\"statistic__chart-categories\">\r\n      <Text className=\"statistic__title\">Контрагенты по категориям</Text>\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <BarChart\r\n          width={500}\r\n          height={300}\r\n          data={contractorsByCategories}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"categoryName\" />\r\n          <YAxis />\r\n          <Tooltip content={<CustomTooltip />} />\r\n          <Legend />\r\n          <Bar\r\n            dataKey=\"contractorsCount\"\r\n            name=\"Категории\"\r\n            barSize={20}\r\n            fill=\"#8884d8\"\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContractorsByCategories;\r\n","import { axios } from \"../api/axios\";\r\nimport {\r\n  AddContractorFormDataType,\r\n  ContractorType,\r\n} from \"../models/Contractors\";\r\n\r\nexport const contractorsApi = {\r\n  // contractors\r\n  getContractors: async (): Promise<ContractorType[]> => {\r\n    const { data } = await axios.get<ContractorType[]>(\"contractors\");\r\n    return data;\r\n  },\r\n  createContractor: async (\r\n    formData: AddContractorFormDataType\r\n  ): Promise<ContractorType[]> => {\r\n    const { data } = await axios.post<ContractorType[]>(\r\n      \"contractors\",\r\n      formData\r\n    );\r\n    return data;\r\n  },\r\n\r\n  // contractors/${id}\r\n\r\n  updateContractor: async (\r\n    formData: AddContractorFormDataType,\r\n    id: number\r\n  ): Promise<ContractorType[]> => {\r\n    const { data } = await axios.patch(`/contractors/${id}`, formData);\r\n    return data;\r\n  },\r\n  deleteContractor: async (contractorId: number): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(\r\n      `/contractors/${contractorId}`\r\n    );\r\n    return data;\r\n  },\r\n\r\n  // contractors/${id}\r\n\r\n  getContractorById: async (\r\n    contractorId: number\r\n  ): Promise<ContractorType[]> => {\r\n    const { data } = await axios.get<ContractorType[]>(\r\n      `/contractors/${contractorId}`\r\n    );\r\n    return data;\r\n  },\r\n\r\n  // contractors/{orderId}/attachments/{attachmentId}\r\n\r\n  removeContractorAttachment: async (\r\n    contractorId: number,\r\n    attachmentId: number\r\n  ): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(\r\n      `/contractors/${contractorId}/attachments/${attachmentId}`\r\n    );\r\n    return data;\r\n  },\r\n};\r\n","import axios from \"axios\";\r\nimport { AttachmentOutType, AttachmentType } from \"../models/Attachments\";\r\n\r\nexport const attachmentsApi = {\r\n  addAttachment: async (\r\n    attachment: AttachmentType\r\n  ): Promise<AttachmentOutType[]> => {\r\n    const { data } = await axios.post<AttachmentOutType[]>(\r\n      \"attachments\",\r\n      attachment\r\n    );\r\n    return data;\r\n  },\r\n  removeAttachment: async (id: number): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(`attachments/${id}`);\r\n    return data;\r\n  },\r\n};\r\n","import { AttachmentOutType } from \"./../../models/Attachments\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { ActionsCreatorsTypes } from \"../../models/types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppStateType } from \"../store\";\r\nimport { Dispatch } from \"redux\";\r\nimport { contractorsApi } from \"../../services/contractorsApi\";\r\nimport { AttachmentType } from \"../../models/Attachments\";\r\nimport { attachmentsApi } from \"../../services/attachmentsApi\";\r\nimport {\r\n  AddContractorFormDataType,\r\n  ContractorType,\r\n} from \"../../models/Contractors\";\r\n\r\nexport const contractorActions = {\r\n  setCurrentContractor: (currentContractor: ContractorType | null) => {\r\n    return {\r\n      type: \"SET_CURRENT_CONTRACTOR\",\r\n      payload: { currentContractor },\r\n    } as const;\r\n  },\r\n  setContractorsLoading: (contractorsLoading: boolean) => {\r\n    return {\r\n      type: \"SET_CONTRACTORS_LOADING\",\r\n      payload: { contractorsLoading },\r\n    } as const;\r\n  },\r\n  setContractorsActionstatus: (contractorsActionStatus: ActionStatusEnum) => {\r\n    return {\r\n      type: \"SET_CONTRACTORS_ACTION_STATUS\",\r\n      payload: { contractorsActionStatus },\r\n    } as const;\r\n  },\r\n  setContractorsErrorMessage: (errorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_CONTRACTORS_ERROR_MESSAGE\",\r\n      payload: { errorMessage },\r\n    } as const;\r\n  },\r\n  setContractors: (contractors: ContractorType[]) => {\r\n    return {\r\n      type: \"SET_CONTRACTORS\",\r\n      payload: { contractors },\r\n    } as const;\r\n  },\r\n  removeContractor: (contractorId: number) => {\r\n    return {\r\n      type: \"REMOVE_CONTRACTOR\",\r\n      payload: { contractorId },\r\n    } as const;\r\n  },\r\n  setContractorImageUploading: (contractorImageUploading: boolean) => {\r\n    return {\r\n      type: \"SET_CONTRACTOR_IMAGE_UPLOADING\",\r\n      payload: { contractorImageUploading },\r\n    } as const;\r\n  },\r\n  setContractorImages: (images: AttachmentOutType[]) => {\r\n    return {\r\n      type: \"SET_CONTRACTOR_IMAGES\",\r\n      payload: { images },\r\n    } as const;\r\n  },\r\n  addContractorImage: (images: AttachmentOutType[]) => {\r\n    return {\r\n      type: \"ADD_CONTRACTOR_IMAGE\",\r\n      payload: { images },\r\n    } as const;\r\n  },\r\n  removeContractorImage: (imageId: number) => {\r\n    return {\r\n      type: \"REMOVE_CONTRACTOR_IMAGE\",\r\n      payload: { imageId },\r\n    } as const;\r\n  },\r\n  clearContractorImages: () => {\r\n    return {\r\n      type: \"CLEAR_CONTRACTOR_IMAGES\",\r\n    } as const;\r\n  },\r\n};\r\n\r\nconst showError = (text: string, dispatch: Dispatch) => {\r\n  dispatch(\r\n    contractorActions.setContractorsActionstatus(ActionStatusEnum.ERROR)\r\n  );\r\n  dispatch(contractorActions.setContractorsErrorMessage(text));\r\n};\r\n\r\nexport const createContractorProfile =\r\n  (formData: AddContractorFormDataType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorsLoading(true));\r\n      const contractorsList = await contractorsApi.createContractor(formData);\r\n      if (contractorsList.length > 0) {\r\n        dispatch(\r\n          contractorActions.setContractorsActionstatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(contractorActions.setCurrentContractor(contractorsList[0]));\r\n      } else {\r\n        showError(\"Не удалось создать профиль, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"createContractorProfile ERROR ===>\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorsLoading(false));\r\n    }\r\n  };\r\n\r\nexport const getContractors = (): ThunkAcionType => async (dispatch) => {\r\n  try {\r\n    dispatch(contractorActions.setContractorsLoading(true));\r\n    const contractors = await contractorsApi.getContractors();\r\n    dispatch(contractorActions.setContractors(contractors));\r\n  } catch (error) {\r\n    console.log(\"getContracors ===> \", error);\r\n    showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n  } finally {\r\n    dispatch(contractorActions.setContractorsLoading(false));\r\n  }\r\n};\r\n\r\nexport const deleteContractor =\r\n  (contractorId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorsLoading(true));\r\n      const response = await contractorsApi.deleteContractor(contractorId);\r\n      if (response) {\r\n        dispatch(\r\n          contractorActions.setContractorsActionstatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(contractorActions.removeContractor(contractorId));\r\n        dispatch(contractorActions.setCurrentContractor(null));\r\n      } else {\r\n        showError(\"Не удалось удалить заявку, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"deleteContractor ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorsLoading(false));\r\n    }\r\n  };\r\n\r\nexport const updateContractor =\r\n  (contractor: AddContractorFormDataType, id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorsLoading(true));\r\n      const contractors = await contractorsApi.updateContractor(contractor, id);\r\n      if (contractors.length > 0) {\r\n        dispatch(\r\n          contractorActions.setContractorsActionstatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(contractorActions.clearContractorImages());\r\n        dispatch(contractorActions.setCurrentContractor(contractors[0]));\r\n      } else {\r\n        showError(\r\n          \"Не удалось сохранить изменения, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getContracors ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorsLoading(false));\r\n    }\r\n  };\r\n\r\nexport const getContractorById =\r\n  (contractorId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorsLoading(true));\r\n      const contractors = await contractorsApi.getContractorById(contractorId);\r\n      if (contractors.length === 0) {\r\n        showError(\"Контрагент не найден\", dispatch);\r\n      } else {\r\n        dispatch(contractorActions.setCurrentContractor(contractors[0]));\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getFullContractorInfo ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorsLoading(false));\r\n    }\r\n  };\r\n\r\nexport const addContractorImage =\r\n  (image: AttachmentType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorImageUploading(true));\r\n      const imageOut = await attachmentsApi.addAttachment(image);\r\n\r\n      if (imageOut.length > 0) {\r\n        dispatch(contractorActions.addContractorImage(imageOut));\r\n      } else {\r\n        showError(\r\n          \"Не удалось загрузить вложение, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"addContractorImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const removeContractorImage =\r\n  (contractorId: number, imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorImageUploading(true));\r\n\r\n      const response = await contractorsApi.removeContractorAttachment(\r\n        contractorId,\r\n        imageId\r\n      );\r\n\r\n      if (response) {\r\n        dispatch(contractorActions.removeContractorImage(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"removeContractorImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const removeNewContractorImage =\r\n  (imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorImageUploading(true));\r\n\r\n      const response = await attachmentsApi.removeAttachment(imageId);\r\n\r\n      if (response) {\r\n        dispatch(contractorActions.removeContractorImage(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"removeNewContractorImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorImageUploading(false));\r\n    }\r\n  };\r\nexport type ContractorsActionTypes = ReturnType<\r\n  ActionsCreatorsTypes<typeof contractorActions>\r\n>;\r\n\r\ntype ThunkAcionType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  ContractorsActionTypes\r\n>;\r\n","import { axios } from \"../api/axios\";\r\nimport { AddOrderFormData, OrderType } from \"../models/Orders\";\r\n\r\nexport const ordersApi = {\r\n  // orders\r\n\r\n  getOrders: async (): Promise<OrderType[]> => {\r\n    const { data } = await axios.get<OrderType[]>(\"orders\");\r\n    return data;\r\n  },\r\n  createOrder: async (formData: AddOrderFormData): Promise<OrderType[]> => {\r\n    const { data } = await axios.post<OrderType[]>(\"orders\", formData);\r\n    return data;\r\n  },\r\n\r\n  // orders/${id}\r\n\r\n  getOrderById: async (orderId: number): Promise<OrderType[]> => {\r\n    const { data } = await axios.get<OrderType[]>(`/orders/${orderId}`);\r\n    return data;\r\n  },\r\n  deleteOrder: async (orderId: number): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(`/orders/${orderId}`);\r\n    return data;\r\n  },\r\n  updateOrder: async (\r\n    order: AddOrderFormData,\r\n    id: number\r\n  ): Promise<OrderType[]> => {\r\n    const { data } = await axios.patch<OrderType[]>(`/orders/${id}`, order);\r\n    return data;\r\n  },\r\n\r\n  // orders/{orderId}/attachments/{attachmentId}\r\n\r\n  removeOrderAttachment: async (\r\n    orderId: number,\r\n    attachmentId: number\r\n  ): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(\r\n      `/orders/${orderId}/attachments/${attachmentId}`\r\n    );\r\n    return data;\r\n  },\r\n};\r\n","import { axios } from \"../api/axios\";\r\nimport { ChatMessageOutType, ChatType } from \"../models/Chats\";\r\n\r\nexport const chatsApi = {\r\n  // chats/{orderId}\r\n\r\n  getOrderChats: async (orderId: number): Promise<ChatType[]> => {\r\n    const { data } = await axios.get<ChatType[]>(`/chats/${orderId}`);\r\n    return data;\r\n  },\r\n\r\n  // chats/{orderId}/{chatId}\r\n\r\n  getAllChatMessage: async (\r\n    orderId: number,\r\n    chatId: number\r\n  ): Promise<ChatMessageOutType[]> => {\r\n    const { data } = await axios.get<ChatMessageOutType[]>(\r\n      `chats/${orderId}/${chatId}`\r\n    );\r\n    return data;\r\n  },\r\n};\r\n","import { ActionStatusEnum } from \"../../models/types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { ActionsCreatorsTypes } from \"../../models/types\";\r\nimport { AppStateType } from \"../store\";\r\nimport { ordersApi } from \"../../services/ordersApi\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AttachmentOutType, AttachmentType } from \"../../models/Attachments\";\r\nimport { attachmentsApi } from \"../../services/attachmentsApi\";\r\nimport { AddOrderFormData, OrderType } from \"../../models/Orders\";\r\nimport { ChatType } from \"../../models/Chats\";\r\nimport { chatsApi } from \"../../services/chatsApi\";\r\n\r\nexport const ordersActions = {\r\n  setOrders: (orders: OrderType[]) => {\r\n    return {\r\n      type: \"SET_ORDERS\",\r\n      payload: { orders },\r\n    } as const;\r\n  },\r\n  setOrdersLoading: (ordersLoading: boolean) => {\r\n    return {\r\n      type: \"SET_ORDERS_LOADING\",\r\n      payload: { ordersLoading },\r\n    } as const;\r\n  },\r\n  setOrdersErrorMessage: (errorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_ORDERS_ERROR\",\r\n      payload: { errorMessage },\r\n    } as const;\r\n  },\r\n  setOrderActionStatus: (orderActionStatus: ActionStatusEnum) => {\r\n    return {\r\n      type: \"SET_ORDER_ACTION_STATUS\",\r\n      payload: { orderActionStatus },\r\n    } as const;\r\n  },\r\n  setCurrentOrder: (currentOrder: OrderType | null) => {\r\n    return {\r\n      type: \"SET_CURRENT_ORDER\",\r\n      payload: { currentOrder },\r\n    } as const;\r\n  },\r\n  replaceOrder: (order: OrderType) => {\r\n    return {\r\n      type: \"REPLACE_ORDER\",\r\n      payload: { order },\r\n    } as const;\r\n  },\r\n  removeOrder: (id: number) => {\r\n    return {\r\n      type: \"REMOVE_ORDER\",\r\n      payload: { id },\r\n    } as const;\r\n  },\r\n  addNewOrder: (order: OrderType) => {\r\n    return {\r\n      type: \"ADD_NEW_ORDER\",\r\n      payload: { order },\r\n    } as const;\r\n  },\r\n  updateOrder: (order: OrderType) => {\r\n    return {\r\n      type: \"UPDATE_ORDER\",\r\n      payload: { order },\r\n    } as const;\r\n  },\r\n  setOrderImageUploading: (orderImageUploading: boolean) => {\r\n    return {\r\n      type: \"SET_ORDER_IMAGE_UPLOADING\",\r\n      payload: { orderImageUploading },\r\n    } as const;\r\n  },\r\n  addOrderImage: (images: AttachmentOutType[]) => {\r\n    return {\r\n      type: \"ADD_ORDER_IMAGE\",\r\n      payload: { images },\r\n    } as const;\r\n  },\r\n  setOrderImages: (images: AttachmentOutType[]) => {\r\n    return {\r\n      type: \"SET_ORDER_IMAGES\",\r\n      payload: { images },\r\n    } as const;\r\n  },\r\n  removeOrderImage: (imageId: number) => {\r\n    return {\r\n      type: \"REMOVE_ORDER_IMAGE\",\r\n      payload: { imageId },\r\n    } as const;\r\n  },\r\n  clearOrderImages: () => {\r\n    return {\r\n      type: \"CLEAR_ORDER_IMAGES\",\r\n    } as const;\r\n  },\r\n  setOrderChats: (orderChats: ChatType[] | null) => {\r\n    return {\r\n      type: \"SET_ORDER_CHATS\",\r\n      payload: { orderChats },\r\n    } as const;\r\n  },\r\n};\r\n\r\nconst showError = (text: string, dispatch: Dispatch) => {\r\n  dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.ERROR));\r\n  dispatch(ordersActions.setOrdersErrorMessage(text));\r\n};\r\n\r\nexport const getOrders = (): ThunkAcionType => async (dispatch) => {\r\n  try {\r\n    dispatch(ordersActions.setOrdersLoading(true));\r\n    const orders = await ordersApi.getOrders();\r\n    dispatch(ordersActions.setOrders(orders));\r\n  } catch (error) {\r\n    console.log(\"getOrders ===> \", error);\r\n    showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n  } finally {\r\n    dispatch(ordersActions.setOrdersLoading(false));\r\n  }\r\n};\r\n\r\nexport const createOrder =\r\n  (formData: AddOrderFormData): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      const orders = await ordersApi.createOrder(formData);\r\n      if (orders.length > 0) {\r\n        dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.SUCCESS));\r\n        dispatch(ordersActions.setCurrentOrder(orders[0]));\r\n        dispatch(ordersActions.addNewOrder(orders[0]));\r\n      } else {\r\n        showError(\"Не удалось создать заявку, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"createOrder ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    }\r\n  };\r\n\r\nexport const updateOrder =\r\n  (order: AddOrderFormData, id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrdersLoading(true));\r\n      const orders = await ordersApi.updateOrder(order, id);\r\n      if (orders.length > 0) {\r\n        dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.SUCCESS));\r\n        dispatch(ordersActions.clearOrderImages());\r\n        dispatch(ordersActions.setCurrentOrder(orders[0]));\r\n      } else {\r\n        showError(\r\n          \"Не удалось сохранить изменения, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"updateOrder ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrdersLoading(false));\r\n    }\r\n  };\r\n\r\nexport const deleteOrder =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrdersLoading(true));\r\n      const response = await ordersApi.deleteOrder(id);\r\n      if (response) {\r\n        dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.SUCCESS));\r\n        dispatch(ordersActions.removeOrder(id));\r\n        dispatch(ordersActions.setCurrentOrder(null));\r\n      } else {\r\n        showError(\"Не удалось удалить заявку, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"deleteOrder ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrdersLoading(false));\r\n    }\r\n  };\r\n\r\nexport const getOrderById =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrdersLoading(true));\r\n      const orders = await ordersApi.getOrderById(id);\r\n      if (orders.length === 0) {\r\n        showError(\"Заявка не найдена\", dispatch);\r\n      } else {\r\n        dispatch(ordersActions.setCurrentOrder(orders[0]));\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getFullOrderInfo ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrdersLoading(false));\r\n    }\r\n  };\r\n\r\nexport const addOrderImage =\r\n  (image: AttachmentType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrderImageUploading(true));\r\n      const imageOut = await attachmentsApi.addAttachment(image);\r\n\r\n      if (imageOut.length > 0) {\r\n        dispatch(ordersActions.addOrderImage(imageOut));\r\n      } else {\r\n        showError(\r\n          \"Не удалось загрузить вложение, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"addOrderImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrderImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const removeOrderImage =\r\n  (orderId: number, imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrderImageUploading(true));\r\n\r\n      const response = await ordersApi.removeOrderAttachment(orderId, imageId);\r\n\r\n      if (response) {\r\n        dispatch(ordersActions.removeOrderImage(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getFullOrderInfo ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrderImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const removeNewOrderImage =\r\n  (imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrderImageUploading(true));\r\n\r\n      const response = await attachmentsApi.removeAttachment(imageId);\r\n\r\n      if (response) {\r\n        dispatch(ordersActions.removeOrderImage(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getFullOrderInfo ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrderImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const getOrderChats =\r\n  (orderId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrdersLoading(true));\r\n\r\n      const chats = await chatsApi.getOrderChats(orderId);\r\n\r\n      if (chats) {\r\n        dispatch(ordersActions.setOrderChats(chats));\r\n      } else {\r\n        showError(\"Ошибка, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrdersLoading(false));\r\n    }\r\n  };\r\n\r\nexport type OrdersActionTypes = ReturnType<\r\n  ActionsCreatorsTypes<typeof ordersActions>\r\n>;\r\n\r\ntype ThunkAcionType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  OrdersActionTypes\r\n>;\r\n","import React from \"react\";\r\nimport { Card, Layout, Typography } from \"antd\";\r\nimport {\r\n  ContractorsByCategories,\r\n  ContractorsStatistic,\r\n  OrdersByCategories,\r\n  OrdersCounter,\r\n  OrdersStatistic,\r\n} from \"./components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppPreloader } from \"../../components\";\r\nimport { getContractorsLoadingState } from \"../../store/selectors/contractors\";\r\nimport { getContractors } from \"../../store/actions/contractors\";\r\nimport { getOrders } from \"../../store/actions/orders\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst { Content } = Layout;\r\n\r\nconst HomePage = () => {\r\n  const contractorsLoading = useSelector(getContractorsLoadingState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getContractors());\r\n    dispatch(getOrders());\r\n  }, [dispatch]);\r\n\r\n  if (contractorsLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <Card>\r\n        <Title className=\"title\">Статистика</Title>\r\n        <div className=\"statistic\">\r\n          <div className=\"statistic__left-side\">\r\n            <OrdersStatistic />\r\n            <OrdersByCategories />\r\n            <OrdersCounter />\r\n          </div>\r\n          <div className=\"statistic__right-side\">\r\n            <ContractorsStatistic />\r\n            <ContractorsByCategories />\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import moment from \"moment\";\r\nimport \"moment/locale/ru\";\r\nmoment.locale(\"ru\");\r\n\r\nexport const formatDate = (date: number) => {\r\n  return moment(date).format(\"DD.MM.YYYY\");\r\n};\r\n\r\nexport const formatDateWithTime = (date: number) => {\r\n  return moment(date).format(\"DD.MM.YYYY hh:mm\");\r\n};\r\n\r\nexport const truncateString = (str: string, n: number) => {\r\n  return str.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n};\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { Layout, Table, Tag, Button, Space, BackTop } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ReloadOutlined } from \"@ant-design/icons\";\r\n\r\nimport {\r\n  getOrderActionStatusState,\r\n  getOrdersErrorMessageState,\r\n  getFilteredOrdersListState,\r\n  getOrdersLoadingState,\r\n} from \"../../store/selectors/orders\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport {\r\n  deleteOrder,\r\n  getOrders,\r\n  ordersActions,\r\n} from \"../../store/actions/orders\";\r\nimport { AppAlert, AppPreloader, AppSearchField } from \"../../components\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  OrderNumberSortFieldsType,\r\n  OrdersQueryFilterType,\r\n  OrderStatusEnum,\r\n  OrderStringSortFieldsType,\r\n  OrderType,\r\n} from \"../../models/Orders\";\r\nimport { formatDate } from \"../../utils/formatter\";\r\n\r\nconst { Content } = Layout;\r\nconst { Column } = Table;\r\n\r\nconst getNumberSorter = (fieldName: OrderNumberSortFieldsType) => ({\r\n  compare: (a: OrderType, b: OrderType) => a[fieldName] - b[fieldName],\r\n});\r\n\r\nconst getStringSorter = (fieldName: OrderStringSortFieldsType) => ({\r\n  compare: (a: OrderType, b: OrderType) =>\r\n    a[fieldName].localeCompare(b[fieldName]),\r\n});\r\n\r\nconst OrdersPage = () => {\r\n  const [searchText, setSearchText] = React.useState<string>(\"\");\r\n\r\n  const useQuery = () => {\r\n    return new URLSearchParams(useLocation().search);\r\n  };\r\n  const query = useQuery();\r\n\r\n  const orders = useSelector(\r\n    getFilteredOrdersListState(\r\n      searchText,\r\n      query.get(\"filter\") as OrdersQueryFilterType,\r\n      query.get(\"category\"),\r\n      query.get(\"contractor\")\r\n    )\r\n  );\r\n  const ordersLoading = useSelector(getOrdersLoadingState);\r\n  const ordersError = useSelector(getOrdersErrorMessageState);\r\n  const orderActionStatus = useSelector(getOrderActionStatusState);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER));\r\n    dispatch(ordersActions.setOrdersErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  const fetchData = React.useCallback(() => {\r\n    dispatch(getOrders());\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getOrders());\r\n    return () => {\r\n      clearState();\r\n    };\r\n  }, [dispatch, clearState]);\r\n\r\n  const handleDeleteOrder = (id: number) => {\r\n    const answer = window.confirm(\"Вы уверены что хотите удалить заявку?\");\r\n    if (answer) {\r\n      dispatch(deleteOrder(id));\r\n    }\r\n  };\r\n\r\n  const handleViewOrder = (order: OrderType) => {\r\n    history.push(`/orders/${order.id}`);\r\n  };\r\n\r\n  const addFilterByCategory = (categoryId: number) => {\r\n    history.push({\r\n      pathname: \"/orders\",\r\n      search: `?category=${categoryId}`,\r\n    });\r\n  };\r\n\r\n  const handleChangeSearchText = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.currentTarget.value);\r\n  };\r\n\r\n  if (ordersLoading) {\r\n    return <AppPreloader size=\"large\" />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={ordersError}\r\n        successMessage=\"Заявка успешно удалена\"\r\n        status={orderActionStatus}\r\n      />\r\n      <div className=\"orders__header\">\r\n        <AppSearchField\r\n          value={searchText}\r\n          onChange={handleChangeSearchText}\r\n          placeholder=\"Найти по заголовку\"\r\n        />\r\n\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<ReloadOutlined />}\r\n          size=\"large\"\r\n          onClick={fetchData}\r\n        />\r\n      </div>\r\n      <Table\r\n        showSorterTooltip={false}\r\n        dataSource={orders}\r\n        rowKey={\"id\"}\r\n        expandable={{\r\n          expandedRowRender: (order) => (\r\n            <div className=\"order__expanded\">\r\n              <p className=\"order__tab-descr\">{order.description}</p>\r\n              <div className=\"order__expanded-action\">\r\n                <Button\r\n                  className=\"order__expanded-btn\"\r\n                  onClick={() => handleViewOrder(order)}\r\n                >\r\n                  Посмотреть\r\n                </Button>\r\n                <Button\r\n                  className=\"order__expanded-btn\"\r\n                  onClick={() => handleDeleteOrder(order.id)}\r\n                  danger\r\n                >\r\n                  Удалить\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n      >\r\n        <Column<OrderType>\r\n          title=\"Статус\"\r\n          dataIndex=\"orderStatus\"\r\n          key=\"age\"\r\n          render={(status: OrderStatusEnum) => {\r\n            const colors = {\r\n              [OrderStatusEnum.NEW]: \"green\",\r\n              [OrderStatusEnum.ARCHIVED]: \"geekblue\",\r\n              [OrderStatusEnum.DELETED]: \"volcano\",\r\n            };\r\n\r\n            return (\r\n              <Tag color={colors[status]} key={status}>\r\n                {status}\r\n              </Tag>\r\n            );\r\n          }}\r\n          sorter={getStringSorter(\"orderStatus\")}\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Заголовок\"\r\n          key=\"title\"\r\n          render={(_, order) => (\r\n            <Space size=\"middle\">\r\n              {/* <NavLink to={`orders/${order.id}`}>{order.title}</NavLink> */}\r\n              <Button\r\n                onClick={() => handleViewOrder(order)}\r\n                type=\"link\"\r\n                key=\"title\"\r\n              >\r\n                {order.title}\r\n              </Button>\r\n            </Space>\r\n          )}\r\n          sorter={getStringSorter(\"title\")}\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Дата создания\"\r\n          dataIndex=\"creationDate\"\r\n          key=\"creationDate\"\r\n          render={(_, data) => formatDate(data.creationDate)}\r\n          defaultSortOrder=\"descend\"\r\n          sorter={getNumberSorter(\"creationDate\")}\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Дата закрытия\"\r\n          dataIndex=\"actualDate\"\r\n          key=\"actualDate\"\r\n          render={(_, data) => formatDate(data.actualDate)}\r\n          sorter={getNumberSorter(\"actualDate\")}\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Категории\"\r\n          dataIndex=\"categories\"\r\n          key=\"categories\"\r\n          render={(_, data) => {\r\n            return (\r\n              <>\r\n                {data.categories\r\n                  .filter((category) => category.parentId === 0)\r\n                  .map((category) => (\r\n                    <Button\r\n                      onClick={() => addFilterByCategory(category.categoryId)}\r\n                      type=\"link\"\r\n                      key={category.categoryId}\r\n                    >\r\n                      <Tag color=\"blue\" className=\"order__tag\">\r\n                        {category.categoryName}\r\n                      </Tag>\r\n                    </Button>\r\n                  ))}\r\n              </>\r\n            );\r\n          }}\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Цена (тг)\"\r\n          dataIndex=\"totalSum\"\r\n          key=\"totalSum\"\r\n          sorter={getNumberSorter(\"totalSum\")}\r\n        />\r\n        <Column<OrderType> title=\"Сроки\" dataIndex=\"comment\" key=\"comment\" />\r\n      </Table>\r\n      <BackTop />\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default OrdersPage;\r\n","export const COORDINATES_LENGTH = 20; // Длина полей широта и долгота в Coordinates\r\nexport const PHONE_NUMBER_LENGTH = 11; // Длина номера телефона 7xxxNNNNNNN\r\nexport const TITLE_LENGTH = 150; // Длина заголовка заявки, названия вложения\r\nexport const TEXT_LENGTH = 5000; // Длина текстовых полей\r\nexport const CONTACT_INFORMATION_LENGTH = 50; // Длина полей в Contacts\r\nexport const ADDRESS_LENGTH = 250; // Длина поля адрес в Contractor\r\nexport const CHAT_MESSAGE_LENGTH = 10000; // Длина текста в сообщении чата\r\nexport const SMS_CODE_LENGTH = 4; // Длина кода регистрации\r\nexport const EXTENSION_LENGTH = 5; // Длина расширения файла\r\nexport const MONTH_OF_RELEVANCE = 1; // Количество месяцев актуальности заявки\r\nexport const SMS_RESEND_PERIOD = 5; // Время повторной отправки смс, в минутах\r\n","import * as yup from \"yup\";\r\nimport {\r\n  ADDRESS_LENGTH,\r\n  CONTACT_INFORMATION_LENGTH,\r\n  PHONE_NUMBER_LENGTH,\r\n  TEXT_LENGTH,\r\n  TITLE_LENGTH,\r\n} from \"./limits\";\r\n\r\n//TODO: сортировка категорий\r\n\r\nconst phoneCodes = [\r\n  \"700\",\r\n  \"701\",\r\n  \"702\",\r\n  \"703\",\r\n  \"704\",\r\n  \"705\",\r\n  \"706\",\r\n  \"707\",\r\n  \"708\",\r\n  \"709\",\r\n  \"747\",\r\n  \"750\",\r\n  \"751\",\r\n  \"760\",\r\n  \"761\",\r\n  \"762\",\r\n  \"763\",\r\n  \"764\",\r\n  \"771\",\r\n  \"775\",\r\n  \"776\",\r\n  \"777\",\r\n  \"778\",\r\n];\r\n\r\nexport const orderSchema = yup.object().shape({\r\n  title: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  totalSum: yup.mixed().test(\"Ok\", \"Введите корректную цену\", (value) => {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n    if (isNaN(value)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }),\r\n  comment: yup.string(),\r\n  description: yup\r\n    .string()\r\n    .typeError(\"Значением может быть только текст\")\r\n    .max(TEXT_LENGTH),\r\n});\r\n\r\nexport const supplierSchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  location: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    )\r\n    .required(\"Обязательное поле\"),\r\n  phoneNumber: yup\r\n    .number()\r\n    .typeError(\"Введите корректный номер телефона\")\r\n    .min(PHONE_NUMBER_LENGTH, \"Введите корректный номер телефона\")\r\n    .required(\"Обязательное поле\")\r\n    .test(\r\n      \"Ok\",\r\n      \"Введенный номер не является телефоном сотовых операторов РК!\",\r\n      (value) => {\r\n        const code = String(value).slice(-10).slice(0, 3);\r\n\r\n        if (!phoneCodes.includes(code)) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    ),\r\n  description: yup\r\n    .string()\r\n    .typeError(\"Значением может быть только текст\")\r\n    .max(TEXT_LENGTH, `Максимальная длина ${TEXT_LENGTH} символов`),\r\n  address: yup\r\n    .string()\r\n    .max(ADDRESS_LENGTH, `Максимальная длина ${ADDRESS_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  contactName: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  webSite: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    ),\r\n  eMail: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    )\r\n    .email(\"Введите корректный e-mail\"),\r\n});\r\n\r\nexport const otpSchema = yup.object().shape({\r\n  phoneNumber: yup\r\n    .number()\r\n    .typeError(\"Введите корректный номер телефона\")\r\n    .min(11, \"Введите корректный номер телефона\")\r\n    .required(\"Обязательное поле\"),\r\n  otp: yup\r\n    .string()\r\n    .required(\"Обязательное поле\")\r\n    .matches(/^[0-9]+$/, \"Введите корректный СМС-код\")\r\n    .min(4, \"Введите корректный СМС-код\")\r\n    .max(4, \"Введите корректный СМС-код\"),\r\n});\r\n\r\nexport const customerSchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  location: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    )\r\n    .required(\"Обязательное поле\"),\r\n  contactName: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    )\r\n    .required(\"Обязательное поле\"),\r\n  phoneNumber: yup\r\n    .number()\r\n    .typeError(\"Введите корректный номер телефона\")\r\n    .min(PHONE_NUMBER_LENGTH, \"Введите корректный номер телефона\")\r\n    .required(\"Обязательное поле\")\r\n    .test(\r\n      \"Ok\",\r\n      \"Введенный номер не является телефоном сотовых операторов РК!\",\r\n      (value) => {\r\n        const code = String(value).slice(-10).slice(0, 3);\r\n\r\n        if (!phoneCodes.includes(code)) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    ),\r\n});\r\n\r\nexport const categorySchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  parentId: yup\r\n    .number()\r\n    .typeError(\"Введите корректный идентификатор\")\r\n    .required(\"Обязательное поле\"),\r\n});\r\n","import { axios } from \"../api/axios\";\r\nimport { AddCategoryFormData, CategoryType } from \"../models/Categories\";\r\n\r\nexport const categoriesApi = {\r\n  //categories\r\n  getAllCategories: async (): Promise<CategoryType[]> => {\r\n    const { data } = await axios.get<CategoryType[]>(\"categories\");\r\n    return data;\r\n  },\r\n  deleteAllCategories: async (): Promise<Boolean> => {\r\n    const { data } = await axios.delete<Boolean>(\"categories\");\r\n    return data;\r\n  },\r\n  addCategory: async (\r\n    formData: AddCategoryFormData\r\n  ): Promise<CategoryType[]> => {\r\n    const { data } = await axios.post<CategoryType[]>(\"categories\", formData);\r\n    return data;\r\n  },\r\n\r\n  //categories/${id}\r\n\r\n  getCategoryById: async (id: number): Promise<CategoryType[]> => {\r\n    const { data } = await axios.get<CategoryType[]>(`categories/${id}`);\r\n    return data;\r\n  },\r\n  deleteCategoryById: async (id: number): Promise<Boolean> => {\r\n    const { data } = await axios.delete<Boolean>(`categories/${id}`);\r\n    return data;\r\n  },\r\n  updateCategoryById: async (category: CategoryType): Promise<Boolean> => {\r\n    const { data } = await axios.patch<Boolean>(\r\n      `categories/${category.id}`,\r\n      category\r\n    );\r\n    return data;\r\n  },\r\n};\r\n","import { ActionStatusEnum } from \"../../models/types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { ActionsCreatorsTypes } from \"../../models/types\";\r\nimport { AppStateType } from \"../store\";\r\nimport { categoriesApi } from \"../../services/categoriesApi\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AddCategoryFormData, CategoryType } from \"../../models/Categories\";\r\n\r\nexport const categoriesActions = {\r\n  setAllCategories: (categories: CategoryType[]) => {\r\n    return {\r\n      type: \"SET_CATEGORIES\",\r\n      payload: { categories },\r\n    } as const;\r\n  },\r\n  setIsLoadingCategories: (isLoadingCategories: boolean) => {\r\n    return {\r\n      type: \"SET_IS_LOADING_CATEGORIES\",\r\n      payload: {\r\n        isLoadingCategories,\r\n      },\r\n    } as const;\r\n  },\r\n  setCategoriesErrorMessage: (errorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_CATEGORIES_ERROR_MESSAGE\",\r\n      payload: { errorMessage },\r\n    } as const;\r\n  },\r\n  setCategoriesActionStatus: (categoriesActionStatus: ActionStatusEnum) => {\r\n    return {\r\n      type: \"SET_CATEGORIES_ACTION_STATUS\",\r\n      payload: { categoriesActionStatus },\r\n    } as const;\r\n  },\r\n  setCurrentCategory: (currentCategory: CategoryType) => {\r\n    return {\r\n      type: \"SET_CURRENT_CATEGORY\",\r\n      payload: { currentCategory },\r\n    } as const;\r\n  },\r\n  setCategoryInEditProcess: (categoryInProcessEdit: number | null) => {\r\n    return {\r\n      type: \"SET_CATEGORY_IN_EDIT_PROCESS\",\r\n      payload: { categoryInProcessEdit },\r\n    } as const;\r\n  },\r\n  replaceCategory: (category: CategoryType) => {\r\n    return {\r\n      type: \"REPLACE_CATEGORY\",\r\n      payload: { category },\r\n    } as const;\r\n  },\r\n  removeCategory: (id: number) => {\r\n    return {\r\n      type: \"REMOVE_CATEGORY\",\r\n      payload: { id },\r\n    } as const;\r\n  },\r\n  clearCategories: () => {\r\n    return {\r\n      type: \"CLEAR_CATEGORIES\",\r\n    } as const;\r\n  },\r\n  addNewCategory: (category: CategoryType) => {\r\n    return {\r\n      type: \"ADD_NEW_CATEGORY\",\r\n      payload: { category },\r\n    } as const;\r\n  },\r\n};\r\n\r\nexport type CategoriesActionTypes = ReturnType<\r\n  ActionsCreatorsTypes<typeof categoriesActions>\r\n>;\r\n\r\nconst showError = (text: string, dispatch: Dispatch) => {\r\n  dispatch(categoriesActions.setCategoriesActionStatus(ActionStatusEnum.ERROR));\r\n  dispatch(categoriesActions.setCategoriesErrorMessage(text));\r\n};\r\n\r\nexport const getAllCategories = (): ThunkAcionType => async (dispatch) => {\r\n  try {\r\n    dispatch(categoriesActions.setIsLoadingCategories(true));\r\n    const categories = await categoriesApi.getAllCategories();\r\n    dispatch(categoriesActions.setAllCategories(categories));\r\n  } catch (error) {\r\n    console.log(\"getAllCategories...\", error);\r\n    showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n  } finally {\r\n    dispatch(categoriesActions.setIsLoadingCategories(false));\r\n  }\r\n};\r\n\r\n// TODO: опасный метод\r\nexport const deleteAllCategories = (): ThunkAcionType => async (dispatch) => {\r\n  try {\r\n    dispatch(categoriesActions.setIsLoadingCategories(true));\r\n    const response = await categoriesApi.deleteAllCategories();\r\n    if (response) {\r\n      dispatch(\r\n        categoriesActions.setCategoriesActionStatus(ActionStatusEnum.SUCCESS)\r\n      );\r\n      dispatch(categoriesActions.clearCategories());\r\n    } else {\r\n      showError(\r\n        \"Не удалось удалить все категории, попробуйте еще раз\",\r\n        dispatch\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.log(\"deleteAllCategories...\", error);\r\n    showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n  } finally {\r\n    dispatch(categoriesActions.setIsLoadingCategories(false));\r\n  }\r\n};\r\n\r\nexport const createCategory =\r\n  (formData: AddCategoryFormData): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(categoriesActions.setIsLoadingCategories(true));\r\n      const createdCategory = await categoriesApi.addCategory({\r\n        name: formData.name,\r\n        parentId: Number(formData.parentId),\r\n        isDeleted: false,\r\n      });\r\n\r\n      if (createdCategory.length > 0) {\r\n        dispatch(\r\n          categoriesActions.setCategoriesActionStatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(categoriesActions.addNewCategory(createdCategory[0]));\r\n      } else {\r\n        showError(\r\n          \"Не получилось добавить категорию, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"addCategory...\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(categoriesActions.setIsLoadingCategories(false));\r\n    }\r\n  };\r\n//TODO: Нужно????\r\nexport const getCategoryById =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(categoriesActions.setIsLoadingCategories(true));\r\n      const categoryList = await categoriesApi.getCategoryById(id);\r\n\r\n      if (categoryList.length === 0) {\r\n        showError(\"Категория не найдена\", dispatch);\r\n      } else {\r\n        dispatch(categoriesActions.setCurrentCategory(categoryList[0]));\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getCategoryById...\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(categoriesActions.setIsLoadingCategories(false));\r\n    }\r\n  };\r\n\r\nexport const deleteCategoryById =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(categoriesActions.setIsLoadingCategories(true));\r\n      const response = await categoriesApi.deleteCategoryById(id);\r\n      if (response) {\r\n        dispatch(\r\n          categoriesActions.setCategoriesActionStatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(categoriesActions.removeCategory(id));\r\n      } else {\r\n        showError(\r\n          \"Не получилось удалить категорию, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"deleteCategoryById...\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(categoriesActions.setIsLoadingCategories(false));\r\n    }\r\n  };\r\n\r\nexport const updateCategoryById =\r\n  (category: CategoryType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(categoriesActions.setCategoryInEditProcess(category.id));\r\n      const response = await categoriesApi.updateCategoryById(category);\r\n      if (response) {\r\n        dispatch(\r\n          categoriesActions.setCategoriesActionStatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(categoriesActions.replaceCategory(category));\r\n      } else {\r\n        showError(\r\n          \"Не получилось обновить категорию, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"updateCategoryById...\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(categoriesActions.setCategoryInEditProcess(null));\r\n    }\r\n  };\r\n\r\ntype ThunkAcionType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  CategoriesActionTypes\r\n>;\r\n","const getBase64 = (file: File): Promise<string | null> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result as string);\r\n    reader.onerror = (error) => reject(error);\r\n  });\r\n};\r\n\r\nexport default getBase64;\r\n","import { Form, Input, InputNumber, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, Controller, FieldError } from \"react-hook-form\";\r\nimport { DescriptionOrderFormData } from \"../../../models/Orders\";\r\n\r\nconst { Text } = Typography;\r\n\r\ntype OrderCreateFormPropsType = {\r\n  control: Control<DescriptionOrderFormData, object>;\r\n  errors: {\r\n    title?: FieldError;\r\n    description?: FieldError;\r\n    comment?: FieldError;\r\n    totalSum?: FieldError;\r\n  };\r\n};\r\n\r\nconst OrderCreateForm: React.FC<OrderCreateFormPropsType> = ({\r\n  control,\r\n  errors,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, value } }) => (\r\n          <Form.Item\r\n            validateStatus={errors.title ? \"error\" : \"success\"}\r\n            help={errors.title?.message}\r\n            className=\"input order__title-input\"\r\n            required\r\n          >\r\n            <Text className=\"subtitle\">Заголовок</Text>\r\n            <Input\r\n              placeholder=\"Заголовок заявки\"\r\n              value={value}\r\n              onChange={onChange}\r\n            />\r\n          </Form.Item>\r\n        )}\r\n        name=\"title\"\r\n        defaultValue=\"\"\r\n      />\r\n      <div className=\"order__numeric-fields\">\r\n        <Controller\r\n          control={control}\r\n          rules={{\r\n            required: true,\r\n          }}\r\n          render={({ field: { onChange, value } }) => (\r\n            <Form.Item\r\n              validateStatus={errors.comment ? \"error\" : \"success\"}\r\n              help={errors.comment?.message}\r\n              className=\"order__comment-input input\"\r\n              required\r\n            >\r\n              <Text className=\"subtitle\">Сроки</Text>\r\n              <Input\r\n                placeholder=\"Желаемые сроки\"\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            </Form.Item>\r\n          )}\r\n          name=\"comment\"\r\n          defaultValue=\"\"\r\n        />\r\n\r\n        <Controller\r\n          control={control}\r\n          rules={{\r\n            required: true,\r\n          }}\r\n          render={({ field: { onChange, value } }) => (\r\n            <Form.Item\r\n              validateStatus={errors.totalSum ? \"error\" : \"success\"}\r\n              help={errors.totalSum?.message}\r\n              className=\"input order__totalsum-input\"\r\n              required\r\n            >\r\n              <div className=\"order__totalsum-field\">\r\n                <Text className=\"subtitle\">Цена (тг)</Text>\r\n                <InputNumber value={value} onChange={onChange} />\r\n              </div>\r\n            </Form.Item>\r\n          )}\r\n          name=\"totalSum\"\r\n          defaultValue={0}\r\n        />\r\n      </div>\r\n\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: false,\r\n        }}\r\n        render={({ field: { onChange, value } }) => (\r\n          <Form.Item\r\n            validateStatus={errors.description ? \"error\" : \"success\"}\r\n            help={errors.description?.message}\r\n            className=\"input order__descr-input\"\r\n            required\r\n          >\r\n            <Text className=\"subtitle\">Описание</Text>\r\n            <Input.TextArea\r\n              placeholder=\"Описание\"\r\n              value={value}\r\n              onChange={onChange}\r\n            />\r\n          </Form.Item>\r\n        )}\r\n        name=\"description\"\r\n        defaultValue=\"\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(OrderCreateForm);\r\n","import React from \"react\";\r\nimport { Button, Card, Layout, Typography, TreeSelect, message } from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {\r\n  AppAlert,\r\n  AppPreloader,\r\n  ImagesList,\r\n  UploadFileForm,\r\n} from \"../../components\";\r\nimport {\r\n  addOrderImage,\r\n  createOrder,\r\n  ordersActions,\r\n  removeNewOrderImage,\r\n} from \"../../store/actions/orders\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport {\r\n  getCurrentOrderState,\r\n  getOrderActionStatusState,\r\n  getOrderImagesLoadingState,\r\n  getOrderImagesState,\r\n  getOrdersErrorMessageState,\r\n  getOrdersLoadingState,\r\n} from \"../../store/selectors/orders\";\r\nimport { orderSchema } from \"../../utils/validatorsSchemes\";\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoriesTreeDataState,\r\n} from \"../../store/selectors/categories\";\r\nimport { categoriesActions } from \"../../store/actions/categories\";\r\nimport getBase64 from \"../../utils/getBase64\";\r\nimport { AttachmentType } from \"../../models/Attachments\";\r\nimport { OrderCreateForm } from \"./components\";\r\nimport {\r\n  AddOrderFormData,\r\n  DescriptionOrderFormData,\r\n} from \"../../models/Orders\";\r\n\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\nconst { SHOW_ALL } = TreeSelect;\r\n\r\n// TODO: БАГ С КАТЕГОРИЯМИ\r\n\r\nconst OrderCreatePage = () => {\r\n  const {\r\n    control,\r\n    reset,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<DescriptionOrderFormData>({\r\n    resolver: yupResolver(orderSchema),\r\n  });\r\n\r\n  const [selectedCategories, setSelectedCategories] = React.useState<number[]>(\r\n    []\r\n  );\r\n\r\n  const orderActionStatus = useSelector(getOrderActionStatusState);\r\n  const orderError = useSelector(getOrdersErrorMessageState);\r\n  const orderLoadingState = useSelector(getOrdersLoadingState);\r\n  const currentOrder = useSelector(getCurrentOrderState);\r\n  const orderImages = useSelector(getOrderImagesState);\r\n  const orderUploading = useSelector(getOrderImagesLoadingState);\r\n\r\n  const categoriesTree = useSelector(getCategoriesTreeDataState);\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const clearOrderState = React.useCallback(() => {\r\n    dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER));\r\n    dispatch(ordersActions.setOrdersErrorMessage(null));\r\n    dispatch(ordersActions.clearOrderImages());\r\n  }, [dispatch]);\r\n\r\n  const clearCategoriesState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      clearOrderState();\r\n      clearCategoriesState();\r\n    };\r\n  }, [clearCategoriesState, clearOrderState]);\r\n\r\n  React.useEffect(() => {\r\n    if (currentOrder && orderActionStatus === ActionStatusEnum.SUCCESS) {\r\n      history.push(`/orders/${currentOrder.id}`);\r\n    }\r\n  }, [currentOrder, history, orderActionStatus]);\r\n\r\n  const handleChangeCategories = (value: number[]) => {\r\n    setSelectedCategories(value);\r\n  };\r\n\r\n  const handleRemoveImage = (imageId: number) => {\r\n    dispatch(removeNewOrderImage(imageId));\r\n  };\r\n\r\n  const handleUploadImage = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n\r\n    if (file) {\r\n      if (\r\n        file.type !== \"image/png\" &&\r\n        file.type !== \"image/jpeg\" &&\r\n        file.type !== \"image/jpg\"\r\n      ) {\r\n        return message.error(`${file.name} не является картинкой`);\r\n      } else {\r\n        const base64 = await getBase64(file);\r\n        const ext = file.name.split(\".\").pop();\r\n        const name = file.name;\r\n\r\n        if (base64 && ext && name) {\r\n          const image: AttachmentType = {\r\n            name: name,\r\n            ext: ext,\r\n            content: base64.split(\",\")[1],\r\n          };\r\n          dispatch(addOrderImage(image));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    const categories = selectedCategories.map((categoryId) => ({\r\n      categoryId,\r\n    }));\r\n\r\n    const newOrder: AddOrderFormData = {\r\n      title: formData.title,\r\n      description: formData.description,\r\n      comment: formData.comment,\r\n      totalSum: formData.totalSum,\r\n      contractors: [],\r\n      attachments: orderImages.map((image) => ({\r\n        attachmentId: image.id,\r\n      })),\r\n      customerId: 1,\r\n      categories,\r\n    };\r\n\r\n    dispatch(createOrder(newOrder));\r\n    reset();\r\n  });\r\n\r\n  if (orderLoadingState) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearOrderState}\r\n        errorMessage={orderError}\r\n        successMessage={\"Заявка сохранена\"}\r\n        status={orderActionStatus}\r\n      />\r\n      <AppAlert\r\n        onClose={clearCategoriesState}\r\n        errorMessage={categoriesError}\r\n        status={categoriesActionStatus}\r\n      />\r\n      <Card className=\"form\">\r\n        <Title level={3} className=\"title\">\r\n          Создание заявки\r\n        </Title>\r\n        <OrderCreateForm control={control} errors={errors} />\r\n        <TreeSelect\r\n          treeData={categoriesTree}\r\n          value={selectedCategories}\r\n          onChange={handleChangeCategories}\r\n          treeCheckable={true}\r\n          showCheckedStrategy={SHOW_ALL}\r\n          placeholder={\"Выберите категории заявки\"}\r\n          style={{ width: \"100%\", marginBottom: 10 }}\r\n          maxTagCount={5}\r\n        />\r\n        <ImagesList\r\n          removeImage={handleRemoveImage}\r\n          images={orderImages}\r\n          editMode={true}\r\n        />\r\n        <UploadFileForm\r\n          onChange={handleUploadImage}\r\n          isUploading={orderUploading}\r\n        />\r\n        <Button\r\n          className=\"order__save-btn\"\r\n          onClick={onSubmit}\r\n          disabled={\r\n            Object.keys(errors).length > 0 || selectedCategories.length === 0\r\n          }\r\n        >\r\n          Сохранить\r\n        </Button>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default OrderCreatePage;\r\n","import { Form, Input, InputNumber, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport {\r\n  DescriptionOrderFormData,\r\n  OrderFieldsNameType,\r\n} from \"../../../models/Orders\";\r\nimport { EditableFieldPropsType } from \"../../../models/types\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst OrderEditableField: React.FC<\r\n  EditableFieldPropsType<DescriptionOrderFormData, OrderFieldsNameType>\r\n> = ({\r\n  placeholder,\r\n  editMode,\r\n  fieldName,\r\n  control,\r\n  error,\r\n  defaultValue,\r\n  isTextArea = false,\r\n  isNumberInput = false,\r\n}) => {\r\n  if (editMode) {\r\n    return (\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, value } }) => (\r\n          <Form.Item\r\n            validateStatus={error ? \"error\" : \"success\"}\r\n            help={error?.message}\r\n            className=\"input\"\r\n          >\r\n            {isTextArea ? (\r\n              <Input.TextArea\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            ) : isNumberInput ? (\r\n              <InputNumber\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            ) : (\r\n              <Input\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            )}\r\n          </Form.Item>\r\n        )}\r\n        name={fieldName}\r\n        defaultValue={defaultValue}\r\n      />\r\n    );\r\n  }\r\n  return <Text>{defaultValue}</Text>;\r\n};\r\n\r\nexport default OrderEditableField;\r\n","import { Card, Divider, TreeSelect } from \"antd\";\r\nimport { DataNode } from \"antd/lib/tree\";\r\nimport React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\n\r\nimport { ImagesList, UploadFileForm } from \"../../../components\";\r\nimport { AttachmentOutType } from \"../../../models/Attachments\";\r\nimport { DescriptionOrderFormData } from \"../../../models/Orders\";\r\nimport OrderEditableField from \"./OrderEditableField\";\r\n\r\nconst { SHOW_ALL } = TreeSelect;\r\n\r\ntype OrderInfoBodyPropsType = {\r\n  handleRemoveImage: (imageId: number) => void;\r\n  handleSelectCategories: (value: number[]) => void;\r\n  handleAddImage: (e: Event) => void;\r\n  selectedCategories: number[];\r\n  editMode: boolean;\r\n  imageUploading: boolean;\r\n  images: AttachmentOutType[];\r\n  control: Control<DescriptionOrderFormData, object>;\r\n  categoriesTree?: DataNode[];\r\n  defaultValue?: string;\r\n  error?: FieldError;\r\n};\r\n\r\nconst OrderInfoBody: React.FC<OrderInfoBodyPropsType> = ({\r\n  categoriesTree,\r\n  selectedCategories,\r\n  handleSelectCategories,\r\n  handleRemoveImage,\r\n  handleAddImage,\r\n  editMode,\r\n  defaultValue,\r\n  error,\r\n  images,\r\n  control,\r\n  imageUploading,\r\n}) => {\r\n  return (\r\n    <div className=\"order__body\">\r\n      <Card>\r\n        <Divider>Описание</Divider>\r\n        <OrderEditableField\r\n          defaultValue={defaultValue}\r\n          editMode={editMode}\r\n          control={control}\r\n          error={error}\r\n          fieldName=\"description\"\r\n          placeholder=\"Описание\"\r\n          isTextArea\r\n        />\r\n        <Divider>Категории</Divider>\r\n        {categoriesTree && (\r\n          <TreeSelect\r\n            treeData={categoriesTree}\r\n            value={selectedCategories}\r\n            onChange={handleSelectCategories}\r\n            treeCheckable={true}\r\n            showCheckedStrategy={SHOW_ALL}\r\n            placeholder={editMode ? \"Выберите категории заявки\" : \"Категории\"}\r\n            style={{ width: \"100%\", marginBottom: 10 }}\r\n            disabled={!editMode}\r\n          />\r\n        )}\r\n        <Divider>Фото</Divider>\r\n        <div className=\"order__images\">\r\n          <ImagesList\r\n            removeImage={handleRemoveImage}\r\n            images={images}\r\n            editMode={editMode}\r\n          />\r\n          {editMode && (\r\n            <UploadFileForm\r\n              onChange={handleAddImage}\r\n              isUploading={imageUploading}\r\n            />\r\n          )}\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(OrderInfoBody);\r\n","import { Descriptions } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DescriptionOrderFormData, OrderType } from \"../../../models/Orders\";\r\nimport { formatDate } from \"../../../utils/formatter\";\r\nimport OrderEditableField from \"./OrderEditableField\";\r\n\r\ntype OrderDescriptionPropsType = {\r\n  order: OrderType;\r\n  editMode: boolean;\r\n  errors: {\r\n    title?: FieldError;\r\n    totalSum?: FieldError;\r\n  };\r\n  control: Control<DescriptionOrderFormData, object>;\r\n};\r\n\r\nconst OrderDescription: React.FC<OrderDescriptionPropsType> = ({\r\n  order,\r\n  editMode,\r\n  errors,\r\n  control,\r\n}) => {\r\n  return (\r\n    <Descriptions size=\"small\" column={3}>\r\n      <Descriptions.Item label=\"Дата создания\">\r\n        {formatDate(order.creationDate)}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Автор\">\r\n        <NavLink to={`/contractors/${order.customerId}`}>Заказчик</NavLink>\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Сроки\">\r\n        <OrderEditableField\r\n          defaultValue={order.comment}\r\n          editMode={editMode}\r\n          control={control}\r\n          error={errors.title}\r\n          fieldName=\"comment\"\r\n          placeholder=\"Сроки\"\r\n        />\r\n      </Descriptions.Item>\r\n\r\n      <Descriptions.Item label=\"Дата закрытия\">\r\n        {formatDate(order.actualDate)}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Чаты\">\r\n        <NavLink to={`/orders/${order.id}/chats`}>Чаты</NavLink>\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Цена (тг)\">\r\n        <OrderEditableField\r\n          isNumberInput\r\n          defaultValue={order.totalSum}\r\n          editMode={editMode}\r\n          control={control}\r\n          error={errors.totalSum}\r\n          fieldName=\"totalSum\"\r\n          placeholder=\"Цена\"\r\n        />\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Номер заявки\">{order.id}</Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n\r\nexport default OrderDescription;\r\n","import React from \"react\";\r\nimport { Layout, PageHeader, Button, message } from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport { orderSchema } from \"../../utils/validatorsSchemes\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport {\r\n  getCurrentOrderState,\r\n  getOrderActionStatusState,\r\n  getOrderImagesLoadingState,\r\n  getOrderImagesState,\r\n  getOrdersErrorMessageState,\r\n  getOrdersLoadingState,\r\n} from \"../../store/selectors/orders\";\r\nimport {\r\n  addOrderImage,\r\n  deleteOrder,\r\n  getOrderById,\r\n  ordersActions,\r\n  removeOrderImage,\r\n  updateOrder,\r\n} from \"../../store/actions/orders\";\r\nimport { AppAlert, AppPreloader } from \"../../components\";\r\n\r\nimport {\r\n  OrderDescription,\r\n  OrderEditableField,\r\n  OrderInfoBody,\r\n} from \"./components\";\r\nimport { getCategoriesTreeDataState } from \"../../store/selectors/categories\";\r\nimport getBase64 from \"../../utils/getBase64\";\r\nimport { AttachmentType } from \"../../models/Attachments\";\r\nimport {\r\n  AddOrderFormData,\r\n  DescriptionOrderFormData,\r\n} from \"../../models/Orders\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst OrderPage = () => {\r\n  const [editMode, setEditMode] = React.useState(false);\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm<DescriptionOrderFormData>({\r\n    resolver: yupResolver(orderSchema),\r\n  });\r\n\r\n  const [selectedCategories, setSelectedCategories] = React.useState<number[]>(\r\n    []\r\n  );\r\n\r\n  const order = useSelector(getCurrentOrderState);\r\n  const orderActionStatus = useSelector(getOrderActionStatusState);\r\n  const orderError = useSelector(getOrdersErrorMessageState);\r\n  const orderLoadingState = useSelector(getOrdersLoadingState);\r\n\r\n  const orderImages = useSelector(getOrderImagesState);\r\n  const orderImageUploading = useSelector(getOrderImagesLoadingState);\r\n\r\n  const categoriesTree = useSelector(getCategoriesTreeDataState);\r\n\r\n  const { orderId }: { orderId?: string } = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  //TODO: отрегулировать TREE\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER));\r\n    dispatch(ordersActions.setCurrentOrder(null));\r\n    dispatch(ordersActions.clearOrderImages());\r\n  }, [dispatch]);\r\n\r\n  const toggleEditMode = () => {\r\n    setEditMode((prev) => {\r\n      dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER));\r\n      return !prev;\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getOrderById(Number(orderId)));\r\n    return () => {\r\n      clearState();\r\n    };\r\n  }, [clearState, dispatch, orderId]);\r\n\r\n  React.useEffect(() => {\r\n    if (order) {\r\n      setSelectedCategories(\r\n        order.categories?.map((category) => category.categoryId)\r\n      );\r\n      dispatch(ordersActions.setOrderImages(order.attachments));\r\n    }\r\n  }, [order, dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    // ВО ВРЕМЯ УДАЛЕНИЯ\r\n    if (!order && orderActionStatus === ActionStatusEnum.SUCCESS) {\r\n      history.push(\"/orders\");\r\n    }\r\n  }, [history, order, orderActionStatus]);\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    if (order) {\r\n      const categories = selectedCategories.map((categoryId) => ({\r\n        categoryId,\r\n      }));\r\n      const updatedOrder: AddOrderFormData = {\r\n        ...order,\r\n        title: formData.title,\r\n        description: formData.description,\r\n        totalSum: formData.totalSum,\r\n        comment: formData.comment,\r\n        contractors: order.contractors,\r\n        attachments: orderImages.map((image) => ({ attachmentId: image.id })),\r\n        customerId: 1,\r\n        categories,\r\n      };\r\n      setEditMode(false);\r\n      dispatch(updateOrder(updatedOrder, order.id));\r\n    }\r\n  });\r\n\r\n  const goBack = () => window.history.back();\r\n\r\n  const handleSelectCategories = React.useCallback((value: number[]) => {\r\n    setSelectedCategories(value);\r\n  }, []);\r\n\r\n  const handleDeleteOrder = () => {\r\n    const answer = window.confirm(\"Вы уверены что хотите удалить заявку?\");\r\n    if (answer && order) {\r\n      dispatch(deleteOrder(order.id));\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    toggleEditMode();\r\n    if (order) {\r\n      setSelectedCategories(\r\n        order.categories?.map((category) => category.categoryId)\r\n      );\r\n      dispatch(ordersActions.clearOrderImages());\r\n      dispatch(ordersActions.setOrderImages(order.attachments));\r\n      reset({\r\n        title: order.title,\r\n        description: order.description,\r\n        comment: order.comment,\r\n        totalSum: order.totalSum,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleUploadImage = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n\r\n    if (file) {\r\n      if (\r\n        file.type !== \"image/png\" &&\r\n        file.type !== \"image/jpeg\" &&\r\n        file.type !== \"image/jpg\"\r\n      ) {\r\n        return message.error(`${file.name} не является картинкой`);\r\n      } else {\r\n        const base64 = await getBase64(file);\r\n        const ext = file.name.split(\".\").pop();\r\n        const name = file.name;\r\n\r\n        if (base64 && ext && name) {\r\n          const image: AttachmentType = {\r\n            name: name,\r\n            ext: ext,\r\n            content: base64.split(\",\")[1],\r\n          };\r\n          dispatch(addOrderImage(image));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRemoveImage = (imageId: number) => {\r\n    if (order) {\r\n      dispatch(removeOrderImage(order.id, imageId));\r\n    }\r\n  };\r\n\r\n  const editActionsButtons = [\r\n    <Button\r\n      key=\"1\"\r\n      onClick={onSubmit}\r\n      disabled={\r\n        Object.keys(errors).length !== 0 || selectedCategories.length === 0\r\n      }\r\n    >\r\n      Сохранить\r\n    </Button>,\r\n    <Button key=\"2\" onClick={handleCancelEdit} danger>\r\n      Отменить\r\n    </Button>,\r\n  ];\r\n\r\n  const actionsButtons = [\r\n    <Button key=\"3\" onClick={toggleEditMode}>\r\n      Редактировать\r\n    </Button>,\r\n\r\n    (order?.orderStatus === \"ARCHIVED\" || order?.orderStatus === \"DELETED\") && (\r\n      <Button\r\n        key=\"4\"\r\n        onClick={() => {\r\n          alert(\"В разработке\");\r\n        }}\r\n      >\r\n        Восстановить\r\n      </Button>\r\n    ),\r\n    <Button key=\"5\" onClick={handleDeleteOrder} danger>\r\n      Удалить\r\n    </Button>,\r\n  ];\r\n\r\n  if (orderLoadingState) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={() =>\r\n          dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER))\r\n        }\r\n        errorMessage={orderError}\r\n        status={orderActionStatus}\r\n        successMessage=\"Изменения успешно сохранены\"\r\n      />\r\n      {order && (\r\n        <>\r\n          <div className=\"page-header\">\r\n            <PageHeader\r\n              ghost={false}\r\n              onBack={goBack}\r\n              title={\r\n                <OrderEditableField\r\n                  defaultValue={order.title}\r\n                  editMode={editMode}\r\n                  control={control}\r\n                  error={errors.title}\r\n                  fieldName=\"title\"\r\n                  placeholder=\"Заголовок\"\r\n                />\r\n              }\r\n              extra={editMode ? editActionsButtons : actionsButtons}\r\n            >\r\n              <OrderDescription\r\n                order={order}\r\n                editMode={editMode}\r\n                errors={errors}\r\n                control={control}\r\n              />\r\n            </PageHeader>\r\n          </div>\r\n          <OrderInfoBody\r\n            categoriesTree={categoriesTree}\r\n            selectedCategories={selectedCategories}\r\n            handleSelectCategories={handleSelectCategories}\r\n            handleRemoveImage={handleRemoveImage}\r\n            handleAddImage={handleUploadImage}\r\n            editMode={editMode}\r\n            defaultValue={order.description}\r\n            error={errors.description}\r\n            images={orderImages}\r\n            control={control}\r\n            imageUploading={orderImageUploading}\r\n          />\r\n        </>\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default OrderPage;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { ReloadOutlined } from \"@ant-design/icons\";\r\n\r\nimport { Layout, Table, Tag, Button, Space } from \"antd\";\r\nimport { AppAlert, AppPreloader, AppSearchField } from \"../../components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getContractorsActionStatusState,\r\n  getContractorsErrorMessage,\r\n  getFilteredContractorsListState,\r\n  getContractorsLoadingState,\r\n} from \"../../store/selectors/contractors\";\r\nimport { NavLink, useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  contractorActions,\r\n  deleteContractor,\r\n  getContractors,\r\n} from \"../../store/actions/contractors\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport {\r\n  ContractorNumberSortFieldsType,\r\n  ContractorsQueryFilterType,\r\n  ContractorStringSortFieldsType,\r\n  ContractorType,\r\n  ContractorTypesEnum,\r\n} from \"../../models/Contractors\";\r\n\r\nconst { Content } = Layout;\r\nconst { Column } = Table;\r\n\r\nconst getNumberSorter = (fieldName: ContractorNumberSortFieldsType) => ({\r\n  compare: (a: ContractorType, b: ContractorType) =>\r\n    a[fieldName] - b[fieldName],\r\n});\r\n\r\nconst getStringSorter = (fieldName: ContractorStringSortFieldsType) => ({\r\n  compare: (a: ContractorType, b: ContractorType) =>\r\n    a[fieldName].localeCompare(b[fieldName]),\r\n});\r\n\r\nconst ContractorsPage = () => {\r\n  const [searchText, setSearchText] = React.useState<string>(\"\");\r\n\r\n  const useQuery = () => {\r\n    return new URLSearchParams(useLocation().search);\r\n  };\r\n  const query = useQuery();\r\n\r\n  const contractorsError = useSelector(getContractorsErrorMessage);\r\n  const contractorsActionStatus = useSelector(getContractorsActionStatusState);\r\n  const contractorsLoading = useSelector(getContractorsLoadingState);\r\n  const contractors = useSelector(\r\n    getFilteredContractorsListState(\r\n      searchText,\r\n      query.get(\"filter\") as ContractorsQueryFilterType,\r\n      query.get(\"category\")\r\n    )\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(contractorActions.setContractorsErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  const handleDeleteContractor = (id: number) => {\r\n    const answer = window.confirm(\"Вы уверены что хотите удалить контрагента?\");\r\n    if (answer) {\r\n      dispatch(deleteContractor(id));\r\n    }\r\n  };\r\n\r\n  const handleViewContractor = (contractor: ContractorType) => {\r\n    history.push(`contractors/${contractor.id}`);\r\n  };\r\n\r\n  const handleChangeSearchText = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.currentTarget.value);\r\n  };\r\n\r\n  const fetchData = React.useCallback(() => {\r\n    dispatch(getContractors());\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getContractors());\r\n    return () => {\r\n      clearState();\r\n    };\r\n  }, [dispatch, clearState]);\r\n\r\n  const addCategory = (categoryId: number) => {\r\n    history.replace(`?category=${categoryId}`);\r\n  };\r\n\r\n  if (contractorsLoading) {\r\n    return <AppPreloader size=\"large\" />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={contractorsError}\r\n        successMessage=\"Контрагент успешно удален\"\r\n        status={contractorsActionStatus}\r\n      />\r\n      <div className=\"contractors__header\">\r\n        <AppSearchField\r\n          value={searchText}\r\n          onChange={handleChangeSearchText}\r\n          placeholder=\"Найти по названию организации\"\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<ReloadOutlined />}\r\n          size=\"large\"\r\n          onClick={fetchData}\r\n        />\r\n      </div>\r\n      <Table\r\n        showSorterTooltip={false}\r\n        dataSource={contractors}\r\n        rowKey={\"id\"}\r\n        expandable={{\r\n          expandedRowRender: (order) => (\r\n            <div className=\"contractor__expanded\">\r\n              <p className=\"contractor__tab-descr\">{order.description}</p>\r\n              <div className=\"contractor__expanded-action\">\r\n                <Button\r\n                  className=\"contractor__expanded-btn\"\r\n                  onClick={() => handleViewContractor(order)}\r\n                >\r\n                  Посмотреть\r\n                </Button>\r\n                <Button\r\n                  className=\"contractor__expanded-btn\"\r\n                  onClick={() => handleDeleteContractor(order.id)}\r\n                  danger\r\n                >\r\n                  Удалить\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n      >\r\n        <Column<ContractorType>\r\n          title=\"Тип контрагента\"\r\n          dataIndex=\"contractorType\"\r\n          key=\"contractorType\"\r\n          render={(_, contractor) => {\r\n            const colors = {\r\n              [ContractorTypesEnum.CUSTOMER]: \"green\",\r\n              [ContractorTypesEnum.SUPPLIER]: \"geekblue\",\r\n              [ContractorTypesEnum.UNKNOWN]: \"gray\",\r\n            };\r\n\r\n            return (\r\n              <Tag\r\n                color={colors[contractor.contractorType]}\r\n                key={contractor.contractorType}\r\n              >\r\n                {contractor.contractorType === ContractorTypesEnum.CUSTOMER\r\n                  ? \"Заказчик\"\r\n                  : \"Поставщик\"}\r\n              </Tag>\r\n            );\r\n          }}\r\n          sorter={getStringSorter(\"contractorType\")}\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Название организации\"\r\n          key=\"name\"\r\n          render={(_, contractor) => (\r\n            <Space size=\"middle\">\r\n              <NavLink to={`contractors/${contractor.id}`}>\r\n                {contractor.name}\r\n              </NavLink>\r\n            </Space>\r\n          )}\r\n          sorter={getStringSorter(\"name\")}\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Номер телефона\"\r\n          dataIndex=\"phoneNumber\"\r\n          key=\"phoneNumber\"\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Город\"\r\n          dataIndex=\"location\"\r\n          key=\"location\"\r\n          sorter={getStringSorter(\"location\")}\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Категории\"\r\n          dataIndex=\"categories\"\r\n          key=\"categories\"\r\n          render={(_, data) => {\r\n            return (\r\n              <>\r\n                {data.categories\r\n                  .filter((category) => category.parentId === 0)\r\n                  .map((category) => (\r\n                    <Button\r\n                      onClick={() => addCategory(category.categoryId)}\r\n                      type=\"link\"\r\n                      key={category.categoryId}\r\n                    >\r\n                      <Tag color=\"blue\" className=\"order__tag\">\r\n                        {category.categoryName}\r\n                      </Tag>\r\n                    </Button>\r\n                  ))}\r\n              </>\r\n            );\r\n          }}\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Контактное лицо\"\r\n          dataIndex=\"contactName\"\r\n          key=\"contactName\"\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Рейтинг\"\r\n          dataIndex=\"rating\"\r\n          key=\"rating\"\r\n          sorter={getNumberSorter(\"rating\")}\r\n        />\r\n      </Table>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ContractorsPage;\r\n","import { Form, Input, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport {\r\n  CustomerDescrFormDataType,\r\n  CustomerFieldsNameType,\r\n  SupplierDescrFormDataType,\r\n  SupplierFieldsNameType,\r\n} from \"../../../models/Contractors\";\r\nimport { EditableFieldPropsType } from \"../../../models/types\";\r\nimport { truncateString } from \"../../../utils/formatter\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst ContractorEditableField: React.FC<\r\n  EditableFieldPropsType<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    SupplierFieldsNameType | CustomerFieldsNameType\r\n  >\r\n> = ({\r\n  placeholder,\r\n  editMode,\r\n  fieldName,\r\n  control,\r\n  error,\r\n  defaultValue,\r\n  isTextArea = false,\r\n  maxLength,\r\n}) => {\r\n  if (editMode) {\r\n    return (\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, value } }) => (\r\n          <Form.Item\r\n            validateStatus={error ? \"error\" : \"success\"}\r\n            help={error?.message}\r\n            className=\"input\"\r\n          >\r\n            {isTextArea ? (\r\n              <Input.TextArea\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            ) : (\r\n              <Input\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                maxLength={maxLength}\r\n              />\r\n            )}\r\n          </Form.Item>\r\n        )}\r\n        name={fieldName}\r\n        defaultValue={defaultValue as string}\r\n      />\r\n    );\r\n  }\r\n  if (fieldName === \"eMail\") {\r\n    return <a href={`mailto:${defaultValue}`}>{defaultValue}</a>;\r\n  }\r\n  if (fieldName === \"webSite\" && defaultValue) {\r\n    return (\r\n      <a href={defaultValue as string} target=\"_blank\" rel=\"noreferrer\">\r\n        {truncateString(defaultValue as string, 25)}\r\n      </a>\r\n    );\r\n  }\r\n  return <Text>{defaultValue}</Text>;\r\n};\r\n\r\nexport default React.memo(ContractorEditableField);\r\n","import { Card, Divider, TreeSelect } from \"antd\";\r\nimport { DataNode } from \"antd/lib/tree\";\r\nimport React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport { ImagesList, UploadFileForm } from \"../../../components\";\r\nimport { AttachmentOutType } from \"../../../models/Attachments\";\r\nimport {\r\n  ContractorTypesEnum,\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n} from \"../../../models/Contractors\";\r\n\r\nimport ContractorEditableField from \"./ContractorEditableField\";\r\n\r\ntype ContractorInfoBodyPropsType = {\r\n  defaultValue: string;\r\n  editMode: boolean;\r\n  control: Control<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    object\r\n  >;\r\n  error?: FieldError;\r\n  categoriesTree: DataNode[];\r\n  selectedCategories: number[];\r\n  handleSelectCategories: (value: number[]) => void;\r\n  handleRemoveImage: (imageId: number) => void;\r\n  handleAddImage: (e: Event) => void;\r\n  imageUploading: boolean;\r\n  images: AttachmentOutType[];\r\n  registeringType: ContractorTypesEnum;\r\n};\r\n\r\nconst { SHOW_ALL } = TreeSelect;\r\n\r\nconst ContractorInfoBody: React.FC<ContractorInfoBodyPropsType> = ({\r\n  defaultValue,\r\n  editMode,\r\n  control,\r\n  error,\r\n  categoriesTree,\r\n  selectedCategories,\r\n  handleSelectCategories,\r\n  handleRemoveImage,\r\n  handleAddImage,\r\n  imageUploading,\r\n  images,\r\n  registeringType,\r\n}) => {\r\n  return (\r\n    <div className=\"contractor__body\">\r\n      <Card>\r\n        {registeringType === ContractorTypesEnum.SUPPLIER && (\r\n          <>\r\n            <Divider>Описание</Divider>\r\n            <ContractorEditableField\r\n              defaultValue={defaultValue}\r\n              editMode={editMode}\r\n              control={control}\r\n              error={error}\r\n              fieldName=\"description\"\r\n              placeholder=\"Описание\"\r\n              isTextArea\r\n            />\r\n            <Divider>Категории</Divider>\r\n            {categoriesTree && (\r\n              <TreeSelect\r\n                treeData={categoriesTree}\r\n                value={selectedCategories}\r\n                onChange={handleSelectCategories}\r\n                treeCheckable={true}\r\n                showCheckedStrategy={SHOW_ALL}\r\n                placeholder={\r\n                  editMode ? \"Выберите категории контрагента\" : \"Категории\"\r\n                }\r\n                style={{ width: \"100%\", marginBottom: 10 }}\r\n                // maxTagCount={5}\r\n                disabled={!editMode}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n        <Divider>Фото</Divider>\r\n        <div className=\"contractor__images\">\r\n          <ImagesList\r\n            removeImage={handleRemoveImage}\r\n            images={images}\r\n            editMode={editMode}\r\n          />\r\n          {editMode && (\r\n            <UploadFileForm\r\n              onChange={handleAddImage}\r\n              isUploading={imageUploading}\r\n            />\r\n          )}\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContractorInfoBody);\r\n","import { Button, Descriptions, Radio, RadioChangeEvent } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n  ContractorType,\r\n  ContractorTypesEnum,\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n} from \"../../../models/Contractors\";\r\nimport ContractorEditableField from \"./ContractorEditableField\";\r\n\r\ntype ContractorDescriptionPropsType = {\r\n  editMode: boolean;\r\n  handleSelectRegType: (e: RadioChangeEvent) => void;\r\n  toggleShowMap: () => void;\r\n  registeringType: ContractorTypesEnum;\r\n  contractor: ContractorType;\r\n  control: Control<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    object\r\n  >;\r\n  errors:\r\n    | {\r\n        name?: FieldError;\r\n        phoneNumber?: FieldError;\r\n        contactName?: FieldError;\r\n        location?: FieldError;\r\n        webSite?: FieldError;\r\n        eMail?: FieldError;\r\n        address?: FieldError;\r\n        description?: FieldError;\r\n      }\r\n    | {\r\n        name?: FieldError;\r\n        phoneNumber?: FieldError;\r\n        contactName?: FieldError;\r\n        location?: FieldError;\r\n      };\r\n};\r\n\r\nconst ContractorDescription: React.FC<ContractorDescriptionPropsType> = ({\r\n  editMode,\r\n  handleSelectRegType,\r\n  registeringType,\r\n  contractor,\r\n  control,\r\n  errors,\r\n  toggleShowMap,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Descriptions size=\"small\" column={4}>\r\n        <Descriptions.Item label=\"Тип контрагента\">\r\n          {editMode ? (\r\n            <Radio.Group onChange={handleSelectRegType} value={registeringType}>\r\n              <Radio value={ContractorTypesEnum.SUPPLIER}>Поставщик</Radio>\r\n              <Radio value={ContractorTypesEnum.CUSTOMER}>Заказчик</Radio>\r\n            </Radio.Group>\r\n          ) : contractor.contractorType === ContractorTypesEnum.CUSTOMER ? (\r\n            \"Заказчик\"\r\n          ) : (\r\n            \"Поставщик\"\r\n          )}\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Заявки контрагента\">\r\n          <NavLink to={`/orders/?contractor=${contractor.id}`}>\r\n            Посмотреть\r\n          </NavLink>\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Контактное лицо\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.contactName}\r\n            editMode={editMode}\r\n            control={control}\r\n            error={errors.contactName}\r\n            fieldName=\"contactName\"\r\n            placeholder=\"Контактное лицо\"\r\n          />\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item label=\"Город\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.location}\r\n            editMode={editMode}\r\n            control={control}\r\n            error={errors.location}\r\n            fieldName=\"location\"\r\n            placeholder=\"Город\"\r\n          />\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Координаты\">\r\n          <Button size=\"small\" type=\"link\" onClick={toggleShowMap}>\r\n            Посмотреть на карте\r\n          </Button>\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item label=\"Сайт\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.contacts.webSite}\r\n            editMode={editMode}\r\n            control={control}\r\n            //@ts-ignore\r\n            error={errors.webSite}\r\n            fieldName=\"webSite\"\r\n            placeholder=\"Сайт\"\r\n          />\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Почта\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.contacts.eMail}\r\n            editMode={editMode}\r\n            control={control}\r\n            //@ts-ignore\r\n            error={errors.eMail}\r\n            fieldName=\"eMail\"\r\n            placeholder=\"Почта\"\r\n          />\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Адрес\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.contacts.address}\r\n            editMode={editMode}\r\n            control={control}\r\n            //@ts-ignore\r\n            error={errors.address}\r\n            fieldName=\"address\"\r\n            placeholder=\"Адрес\"\r\n          />\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item label=\"Телефон\">\r\n          <ContractorEditableField\r\n            defaultValue={`+${contractor.phoneNumber}`}\r\n            editMode={editMode}\r\n            control={control}\r\n            error={errors.phoneNumber}\r\n            fieldName=\"phoneNumber\"\r\n            placeholder=\"Телефон\"\r\n            maxLength={12}\r\n          />\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Идентификатор контрагента\">\r\n          {contractor.id}\r\n        </Descriptions.Item>\r\n      </Descriptions>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContractorDescription);\r\n","import React from \"react\";\r\nimport {\r\n  Layout,\r\n  PageHeader,\r\n  Button,\r\n  Card,\r\n  RadioChangeEvent,\r\n  message,\r\n} from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { customerSchema, supplierSchema } from \"../../utils/validatorsSchemes\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { AppAlert, AppMap, AppPreloader } from \"../../components\";\r\n\r\nimport { getCategoriesTreeDataState } from \"../../store/selectors/categories\";\r\nimport {\r\n  getContractorImagesState,\r\n  getContractorImageUploadingState,\r\n  getContractorsActionStatusState,\r\n  getContractorsErrorMessage,\r\n  getContractorsLoadingState,\r\n  getCurrentContractorState,\r\n} from \"../../store/selectors/contractors\";\r\nimport {\r\n  addContractorImage,\r\n  contractorActions,\r\n  deleteContractor,\r\n  getContractorById,\r\n  removeContractorImage,\r\n  updateContractor,\r\n} from \"../../store/actions/contractors\";\r\nimport {\r\n  ContractorDescription,\r\n  ContractorEditableField,\r\n  ContractorInfoBody,\r\n} from \"./components\";\r\nimport { AttachmentType } from \"../../models/Attachments\";\r\nimport getBase64 from \"../../utils/getBase64\";\r\nimport {\r\n  AddContractorFormDataType,\r\n  ContractorTypesEnum,\r\n  CoordinatesType,\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n} from \"../../models/Contractors\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst ContractorPage = () => {\r\n  const [editMode, setEditMode] = React.useState(false);\r\n  const [selectedCategories, setSelectedCategories] = React.useState<number[]>(\r\n    []\r\n  );\r\n  const [latLng, setLatLng] = React.useState<CoordinatesType | null>(null);\r\n  const [registeringType, setRegisteringType] =\r\n    React.useState<ContractorTypesEnum>(ContractorTypesEnum.SUPPLIER);\r\n  const [showMap, setShowMap] = React.useState(false);\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm<SupplierDescrFormDataType | CustomerDescrFormDataType>({\r\n    resolver: yupResolver(\r\n      registeringType === ContractorTypesEnum.SUPPLIER\r\n        ? supplierSchema\r\n        : customerSchema\r\n    ),\r\n  });\r\n\r\n  const contractor = useSelector(getCurrentContractorState);\r\n  const contractorActionStatus = useSelector(getContractorsActionStatusState);\r\n  const contractorError = useSelector(getContractorsErrorMessage);\r\n  const contractorLoadingState = useSelector(getContractorsLoadingState);\r\n\r\n  const contractorImages = useSelector(getContractorImagesState);\r\n  const contractorImageUploading = useSelector(\r\n    getContractorImageUploadingState\r\n  );\r\n\r\n  const categoriesTree = useSelector(getCategoriesTreeDataState);\r\n\r\n  const { contractorId }: { contractorId?: string } = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(contractorActions.setCurrentContractor(null));\r\n    dispatch(contractorActions.clearContractorImages());\r\n  }, [dispatch]);\r\n\r\n  const toggleEditMode = React.useCallback(() => {\r\n    setEditMode((prev) => {\r\n      dispatch(\r\n        contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n      );\r\n      return !prev;\r\n    });\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getContractorById(Number(contractorId)));\r\n    return () => {\r\n      clearState();\r\n    };\r\n  }, [clearState, dispatch, contractorId]);\r\n\r\n  React.useEffect(() => {\r\n    if (contractor) {\r\n      setSelectedCategories(\r\n        contractor.categories?.map((category) => category.categoryId)\r\n      );\r\n      setRegisteringType(contractor.contractorType);\r\n      setLatLng({\r\n        coordinatesLatitude: contractor.coordinates.coordinatesLatitude,\r\n        coordinatesLongitude: contractor.coordinates.coordinatesLongitude,\r\n      });\r\n      dispatch(contractorActions.setContractorImages(contractor.attachments));\r\n    }\r\n  }, [contractor, dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    // ВО ВРЕМЯ УДАЛЕНИЯ\r\n    if (!contractor && contractorActionStatus === ActionStatusEnum.SUCCESS) {\r\n      history.push(\"/contractors\");\r\n    }\r\n  }, [history, contractor, contractorActionStatus]);\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    if (contractor) {\r\n      const categories = selectedCategories.map((categoryId) => ({\r\n        categoryId,\r\n      }));\r\n\r\n      const newContractor: AddContractorFormDataType = {\r\n        name: formData.name,\r\n        contactName: formData.contactName,\r\n        phoneNumber: `7${String(formData.phoneNumber).slice(-10)}`,\r\n        //@ts-ignore\r\n        description: formData.description ? formData.description : \"\",\r\n        location: formData.location,\r\n        coordinates: latLng\r\n          ? latLng\r\n          : {\r\n              coordinatesLatitude: \"\",\r\n              coordinatesLongitude: \"\",\r\n            },\r\n        contacts: {\r\n          //@ts-ignore\r\n          address: formData.address ? formData.address : \"\",\r\n          //@ts-ignore\r\n          webSite: formData.webSite ? formData.webSite : \"\",\r\n          //@ts-ignore\r\n          eMail: formData.eMail ? formData.eMail : \"\",\r\n        },\r\n        contractorType: registeringType,\r\n        categories,\r\n        attachments: contractorImages.map((image) => ({\r\n          attachmentId: image.id,\r\n        })),\r\n      };\r\n      setEditMode(false);\r\n      dispatch(updateContractor(newContractor, contractor.id));\r\n    }\r\n  });\r\n\r\n  const goBack = () => window.history.back();\r\n\r\n  const handleSelectCategories = React.useCallback((value: number[]) => {\r\n    setSelectedCategories(value);\r\n  }, []);\r\n\r\n  const handleDeleteContractor = React.useCallback(() => {\r\n    const answer = window.confirm(\"Вы уверены что хотите удалить контрагента?\");\r\n    if (answer && contractor) {\r\n      dispatch(deleteContractor(contractor.id));\r\n    }\r\n  }, [contractor, dispatch]);\r\n\r\n  const handleSelectRegType = React.useCallback((e: RadioChangeEvent) => {\r\n    setRegisteringType(e.target.value);\r\n  }, []);\r\n\r\n  const handleCancelEdit = React.useCallback(() => {\r\n    toggleEditMode();\r\n    if (contractor) {\r\n      setSelectedCategories(\r\n        contractor.categories?.map((category) => category.categoryId)\r\n      );\r\n      dispatch(contractorActions.clearContractorImages());\r\n      dispatch(contractorActions.setContractorImages(contractor.attachments));\r\n      reset({\r\n        name: contractor.name,\r\n        phoneNumber: contractor.phoneNumber,\r\n        contactName: contractor.contactName,\r\n        location: contractor.location,\r\n        webSite: contractor.contacts.webSite,\r\n        eMail: contractor.contacts.eMail,\r\n        address: contractor.contacts.address,\r\n        description: contractor.description,\r\n      });\r\n    }\r\n  }, [contractor, dispatch, reset, toggleEditMode]);\r\n\r\n  const toggleShowMap = React.useCallback(() => {\r\n    setShowMap(!showMap);\r\n  }, [showMap]);\r\n\r\n  const handleSelectCoords = React.useCallback(\r\n    (latLng: google.maps.LatLng | null) => {\r\n      if (editMode) {\r\n        setLatLng({\r\n          coordinatesLatitude: String(latLng?.lat()),\r\n          coordinatesLongitude: String(latLng?.lng()),\r\n        });\r\n      }\r\n    },\r\n    [editMode]\r\n  );\r\n\r\n  const handleUploadImage = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n\r\n    if (file) {\r\n      if (\r\n        file.type !== \"image/png\" &&\r\n        file.type !== \"image/jpeg\" &&\r\n        file.type !== \"image/jpg\"\r\n      ) {\r\n        return message.error(`${file.name} не является картинкой`);\r\n      } else {\r\n        const base64 = await getBase64(file);\r\n        const ext = file.name.split(\".\").pop();\r\n        const name = file.name;\r\n\r\n        if (base64 && ext && name) {\r\n          const image: AttachmentType = {\r\n            name: name,\r\n            ext: ext,\r\n            content: base64.split(\",\")[1],\r\n          };\r\n          dispatch(addContractorImage(image));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRemoveImage = (imageId: number) => {\r\n    if (contractor) {\r\n      dispatch(removeContractorImage(contractor.id, imageId));\r\n    }\r\n  };\r\n\r\n  const checkDisabledBtn = React.useCallback(() => {\r\n    if (registeringType === ContractorTypesEnum.SUPPLIER) {\r\n      return (\r\n        Object.keys(errors).length !== 0 || selectedCategories.length === 0\r\n      );\r\n    }\r\n    return Object.keys(errors).length !== 0;\r\n  }, [errors, registeringType, selectedCategories.length]);\r\n\r\n  const getEditActionsButtons = () => {\r\n    return [\r\n      <Button key=\"1\" onClick={onSubmit} disabled={checkDisabledBtn()}>\r\n        Сохранить\r\n      </Button>,\r\n      <Button key=\"2\" onClick={handleCancelEdit} danger>\r\n        Отменить\r\n      </Button>,\r\n    ];\r\n  };\r\n\r\n  const getActionsButtons = () => {\r\n    return [\r\n      <Button key=\"3\" onClick={toggleEditMode}>\r\n        Редактировать\r\n      </Button>,\r\n      <Button key=\"5\" onClick={handleDeleteContractor} danger>\r\n        Удалить\r\n      </Button>,\r\n    ];\r\n  };\r\n\r\n  const editActionsButtons = React.useMemo(getEditActionsButtons, [\r\n    checkDisabledBtn,\r\n    handleCancelEdit,\r\n    onSubmit,\r\n  ]);\r\n  const actionButtons = React.useMemo(getActionsButtons, [\r\n    handleDeleteContractor,\r\n    toggleEditMode,\r\n  ]);\r\n\r\n  if (showMap) {\r\n    return (\r\n      <Content className=\"content\">\r\n        <div className=\"map__header\">\r\n          <Button className=\"map-btn\" type=\"default\" onClick={toggleShowMap}>\r\n            Назад\r\n          </Button>\r\n          {latLng && editMode && (\r\n            <Button onClick={toggleShowMap}>Сохранить</Button>\r\n          )}\r\n        </div>\r\n\r\n        <AppMap\r\n          containerElement={<Card className=\"map\" />}\r\n          mapElement={<div className=\"map-element\" />}\r\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAF9_PSjdOnSf6dukQ6qhNMiYhKz6sMcv8&v=3.exp&libraries=geometry,drawing,places\"\r\n          loadingElement={<AppPreloader />}\r\n          handleSelectCoords={handleSelectCoords}\r\n          marker={latLng}\r\n        />\r\n      </Content>\r\n    );\r\n  }\r\n\r\n  if (contractorLoadingState) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={() =>\r\n          dispatch(\r\n            contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n          )\r\n        }\r\n        errorMessage={contractorError}\r\n        status={contractorActionStatus}\r\n        successMessage=\"Изменения успешно сохранены\"\r\n      />\r\n      {contractor && (\r\n        <>\r\n          <div className=\"page-header\">\r\n            <PageHeader\r\n              ghost={false}\r\n              onBack={goBack}\r\n              title={\r\n                <ContractorEditableField\r\n                  defaultValue={contractor.name}\r\n                  editMode={editMode}\r\n                  control={control}\r\n                  error={errors.name}\r\n                  fieldName=\"name\"\r\n                  placeholder=\"Название\"\r\n                />\r\n              }\r\n              extra={editMode ? editActionsButtons : actionButtons}\r\n            >\r\n              <ContractorDescription\r\n                editMode={editMode}\r\n                handleSelectRegType={handleSelectRegType}\r\n                registeringType={registeringType}\r\n                contractor={contractor}\r\n                control={control}\r\n                errors={errors}\r\n                toggleShowMap={toggleShowMap}\r\n              />\r\n            </PageHeader>\r\n          </div>\r\n          <ContractorInfoBody\r\n            defaultValue={contractor.description}\r\n            editMode={editMode}\r\n            control={control}\r\n            //@ts-ignore\r\n            error={errors.description}\r\n            categoriesTree={categoriesTree}\r\n            selectedCategories={selectedCategories}\r\n            handleSelectCategories={handleSelectCategories}\r\n            images={contractorImages}\r\n            registeringType={registeringType}\r\n            handleRemoveImage={handleRemoveImage}\r\n            handleAddImage={handleUploadImage}\r\n            imageUploading={contractorImageUploading}\r\n          />\r\n        </>\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ContractorPage;\r\n","import { Form, Typography, Input } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, Controller, FieldError } from \"react-hook-form\";\r\nimport {\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n  SupplierFieldsNameType,\r\n} from \"../../../models/Contractors\";\r\n\r\ntype ContractorFieldPropsType = {\r\n  subtitle: string;\r\n  fieldName: SupplierFieldsNameType;\r\n  required: boolean;\r\n  maxLength?: number;\r\n  control?: Control<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    object\r\n  >;\r\n  error?: FieldError;\r\n  textArea?: boolean;\r\n  defaultValue?: string;\r\n};\r\n\r\nconst { Text } = Typography;\r\n\r\nconst ContractorField: React.FC<ContractorFieldPropsType> = ({\r\n  control,\r\n  error,\r\n  subtitle,\r\n  fieldName,\r\n  required = true,\r\n  maxLength,\r\n  textArea,\r\n  defaultValue,\r\n}) => {\r\n  const InputField = textArea ? Input.TextArea : Input;\r\n\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      rules={{ required }}\r\n      render={({ field: { onChange, value } }) => (\r\n        <Form.Item\r\n          validateStatus={error ? \"error\" : \"success\"}\r\n          help={error?.message}\r\n          className=\"input form__input\"\r\n          required={required}\r\n        >\r\n          <Text className=\"subtitle\">{subtitle}</Text>\r\n          <InputField\r\n            placeholder={subtitle}\r\n            value={value}\r\n            onChange={onChange}\r\n            maxLength={maxLength}\r\n          />\r\n        </Form.Item>\r\n      )}\r\n      name={fieldName}\r\n      defaultValue={defaultValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContractorField;\r\n","import React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport {\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n  SupplierFieldsNameType,\r\n} from \"../../../models/Contractors\";\r\nimport ContractorField from \"./ContractorField\";\r\n\r\nconst fields = [\r\n  {\r\n    id: \"1\",\r\n    fieldName: \"name\",\r\n    subtitle: \"Название организации\",\r\n    required: true,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    fieldName: \"contactName\",\r\n    subtitle: \"Контактное лицо\",\r\n    required: true,\r\n  },\r\n  { id: \"3\", fieldName: \"location\", subtitle: \"Город\", required: true },\r\n  { id: \"4\", fieldName: \"address\", subtitle: \"Адрес\", required: true },\r\n  { id: \"5\", fieldName: \"eMail\", subtitle: \"Почта\", required: false },\r\n  { id: \"6\", fieldName: \"webSite\", subtitle: \"Сайт компании\", required: false },\r\n  {\r\n    id: \"7\",\r\n    fieldName: \"phoneNumber\",\r\n    subtitle: \"Номер телефона\",\r\n    maxLength: 12,\r\n    required: true,\r\n    defaultValue: \"+7\",\r\n  },\r\n  {\r\n    id: \"8\",\r\n    fieldName: \"description\",\r\n    subtitle: \"Описание\",\r\n    required: false,\r\n    textArea: true,\r\n  },\r\n];\r\n\r\ntype SupplierDescrFormPropsType = {\r\n  control?: Control<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    object\r\n  >;\r\n  errors: {\r\n    name?: FieldError;\r\n    phoneNumber?: FieldError;\r\n    contactName?: FieldError;\r\n    location?: FieldError;\r\n    webSite?: FieldError;\r\n    eMail?: FieldError;\r\n    address?: FieldError;\r\n    description?: FieldError;\r\n  };\r\n};\r\n\r\nconst SupplierDescrForm: React.FC<SupplierDescrFormPropsType> = ({\r\n  control,\r\n  errors,\r\n}) => {\r\n  return (\r\n    <>\r\n      {fields.map((field) => {\r\n        return (\r\n          <ContractorField\r\n            key={field.id}\r\n            control={control}\r\n            error={errors[field.fieldName as SupplierFieldsNameType]}\r\n            subtitle={field.subtitle}\r\n            fieldName={field.fieldName as SupplierFieldsNameType}\r\n            required={field.required}\r\n            maxLength={field.maxLength}\r\n            textArea={field.textArea}\r\n            defaultValue={field.defaultValue}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SupplierDescrForm;\r\n","import React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport {\r\n  CustomerDescrFormDataType,\r\n  CustomerFieldsNameType,\r\n} from \"../../../models/Contractors\";\r\nimport ContractorField from \"./ContractorField\";\r\n\r\nconst fields = [\r\n  {\r\n    id: \"1\",\r\n    fieldName: \"name\",\r\n    subtitle: \"Название организации\",\r\n    required: true,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    fieldName: \"contactName\",\r\n    subtitle: \"Контактное лицо\",\r\n    required: true,\r\n  },\r\n  { id: \"3\", fieldName: \"location\", subtitle: \"Город\", required: true },\r\n  {\r\n    id: \"7\",\r\n    fieldName: \"phoneNumber\",\r\n    subtitle: \"Номер телефона\",\r\n    maxLength: 12,\r\n    required: true,\r\n    defaultValue: \"+7\",\r\n  },\r\n];\r\n\r\ntype CustomerDescrFormPropsType = {\r\n  control?: Control<CustomerDescrFormDataType, object>;\r\n  errors: {\r\n    name?: FieldError;\r\n    phoneNumber?: FieldError;\r\n    contactName?: FieldError;\r\n    location?: FieldError;\r\n  };\r\n};\r\n\r\nconst CustomerDescrForm: React.FC<CustomerDescrFormPropsType> = ({\r\n  control,\r\n  errors,\r\n}) => {\r\n  return (\r\n    <>\r\n      {fields.map((field) => {\r\n        return (\r\n          <ContractorField\r\n            key={field.id}\r\n            control={control}\r\n            error={errors[field.fieldName as CustomerFieldsNameType]}\r\n            subtitle={field.subtitle}\r\n            fieldName={field.fieldName as CustomerFieldsNameType}\r\n            required={field.required}\r\n            maxLength={field.maxLength}\r\n            defaultValue={field.defaultValue}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomerDescrForm;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Radio,\r\n  Layout,\r\n  Typography,\r\n  TreeSelect,\r\n  RadioChangeEvent,\r\n  message,\r\n} from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  AppAlert,\r\n  AppMap,\r\n  AppPreloader,\r\n  ImagesList,\r\n  UploadFileForm,\r\n} from \"../../components\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { customerSchema, supplierSchema } from \"../../utils/validatorsSchemes\";\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoriesTreeDataState,\r\n} from \"../../store/selectors/categories\";\r\nimport { categoriesActions } from \"../../store/actions/categories\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  addContractorImage,\r\n  contractorActions,\r\n  createContractorProfile,\r\n  removeNewContractorImage,\r\n} from \"../../store/actions/contractors\";\r\nimport {\r\n  getContractorImagesState,\r\n  getContractorImageUploadingState,\r\n  getContractorsActionStatusState,\r\n  getContractorsErrorMessage,\r\n  getContractorsLoadingState,\r\n  getCurrentContractorState,\r\n} from \"../../store/selectors/contractors\";\r\nimport { SupplierDescrForm } from \"./components\";\r\nimport CustomerDescrForm from \"./components/CustomerDescrForm\";\r\nimport getBase64 from \"../../utils/getBase64\";\r\nimport { AttachmentType } from \"../../models/Attachments\";\r\nimport {\r\n  AddContractorFormDataType,\r\n  ContractorTypesEnum,\r\n  CoordinatesType,\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n} from \"../../models/Contractors\";\r\n\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\nconst { SHOW_ALL } = TreeSelect;\r\n\r\nconst ContractorCreatePage = () => {\r\n  const [selectedCategories, setSelectedCategories] = React.useState<number[]>(\r\n    []\r\n  );\r\n  const [registeringType, setRegisteringType] =\r\n    React.useState<ContractorTypesEnum>(ContractorTypesEnum.SUPPLIER);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm<SupplierDescrFormDataType | CustomerDescrFormDataType>({\r\n    resolver: yupResolver(\r\n      registeringType === ContractorTypesEnum.SUPPLIER\r\n        ? supplierSchema\r\n        : customerSchema\r\n    ),\r\n  });\r\n\r\n  const [showMap, setShowMap] = React.useState(false);\r\n  const [latLng, setLatLng] = React.useState<CoordinatesType | null>(null);\r\n\r\n  const contractorActionStatus = useSelector(getContractorsActionStatusState);\r\n  const contractorError = useSelector(getContractorsErrorMessage);\r\n  const contractorLoading = useSelector(getContractorsLoadingState);\r\n  const currentContractor = useSelector(getCurrentContractorState);\r\n\r\n  const contractorImages = useSelector(getContractorImagesState);\r\n  const contractorImageUploading = useSelector(\r\n    getContractorImageUploadingState\r\n  );\r\n\r\n  const categoriesTree = useSelector(getCategoriesTreeDataState);\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const clearContractorsState = React.useCallback(() => {\r\n    dispatch(\r\n      contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(contractorActions.setContractorsErrorMessage(null));\r\n    dispatch(contractorActions.clearContractorImages());\r\n  }, [dispatch]);\r\n\r\n  const clearCategoriesState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      clearContractorsState();\r\n      clearCategoriesState();\r\n    };\r\n  }, [clearCategoriesState, clearContractorsState]);\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      currentContractor &&\r\n      contractorActionStatus === ActionStatusEnum.SUCCESS\r\n    ) {\r\n      history.push(`/contractors/${currentContractor.id}`);\r\n    }\r\n  }, [currentContractor, history, contractorActionStatus]);\r\n\r\n  const handleSelectCategories = (value: number[]) => {\r\n    setSelectedCategories(value);\r\n  };\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    const categories = selectedCategories.map((categoryId) => ({\r\n      categoryId,\r\n    }));\r\n\r\n    const newContractor: AddContractorFormDataType = {\r\n      name: formData.name,\r\n      contactName: formData.contactName,\r\n      phoneNumber: `7${String(formData.phoneNumber).slice(-10)}`,\r\n      //@ts-ignore\r\n      description: formData.description ? formData.description : \"\",\r\n      location: formData.location,\r\n      coordinates: latLng\r\n        ? latLng\r\n        : {\r\n            coordinatesLatitude: \"\",\r\n            coordinatesLongitude: \"\",\r\n          },\r\n      contacts: {\r\n        //@ts-ignore\r\n        address: formData.address ? formData.address : \"\",\r\n        //@ts-ignore\r\n        webSite: formData.webSite ? formData.webSite : \"\",\r\n        //@ts-ignore\r\n        eMail: formData.eMail ? formData.eMail : \"\",\r\n      },\r\n      contractorType: registeringType,\r\n      categories,\r\n      attachments: contractorImages.map((image) => ({\r\n        attachmentId: image.id,\r\n      })),\r\n    };\r\n    dispatch(createContractorProfile(newContractor));\r\n  });\r\n\r\n  const handleSelectRegType = (e: RadioChangeEvent) => {\r\n    reset();\r\n    setRegisteringType(e.target.value);\r\n  };\r\n\r\n  const toggleShowMap = () => {\r\n    setShowMap(!showMap);\r\n  };\r\n\r\n  const handleSelectCoords = (latLng: google.maps.LatLng | null) => {\r\n    setLatLng({\r\n      coordinatesLatitude: String(latLng?.lat()),\r\n      coordinatesLongitude: String(latLng?.lng()),\r\n    });\r\n  };\r\n\r\n  const handleRemoveImage = (imageId: number) => {\r\n    dispatch(removeNewContractorImage(imageId));\r\n  };\r\n\r\n  const handleUploadImage = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n\r\n    if (file) {\r\n      if (\r\n        file.type !== \"image/png\" &&\r\n        file.type !== \"image/jpeg\" &&\r\n        file.type !== \"image/jpg\"\r\n      ) {\r\n        return message.error(`${file.name} не является картинкой`);\r\n      } else {\r\n        const base64 = await getBase64(file);\r\n        const ext = file.name.split(\".\").pop();\r\n        const name = file.name;\r\n\r\n        if (base64 && ext && name) {\r\n          const image: AttachmentType = {\r\n            name: name,\r\n            ext: ext,\r\n            content: base64.split(\",\")[1],\r\n          };\r\n          dispatch(addContractorImage(image));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  if (contractorLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  if (showMap) {\r\n    return (\r\n      <Content className=\"content\">\r\n        <div className=\"map__header\">\r\n          <Button className=\"map-btn\" type=\"default\" onClick={toggleShowMap}>\r\n            Назад\r\n          </Button>\r\n          {latLng && <Button onClick={toggleShowMap}>Сохранить</Button>}\r\n        </div>\r\n\r\n        <AppMap\r\n          containerElement={<Card className=\"map\" />}\r\n          mapElement={<div className=\"map-element\" />}\r\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAF9_PSjdOnSf6dukQ6qhNMiYhKz6sMcv8&v=3.exp&libraries=geometry,drawing,places\"\r\n          loadingElement={<AppPreloader />}\r\n          handleSelectCoords={handleSelectCoords}\r\n          marker={latLng}\r\n        />\r\n      </Content>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearContractorsState}\r\n        errorMessage={contractorError}\r\n        successMessage={\"Контрагент сохранен\"}\r\n        status={contractorActionStatus}\r\n      />\r\n      <AppAlert\r\n        onClose={clearCategoriesState}\r\n        errorMessage={categoriesError}\r\n        status={categoriesActionStatus}\r\n      />\r\n      <Card className=\"form\">\r\n        <Title level={3} className=\"title\">\r\n          Создание контрагента\r\n        </Title>\r\n        {registeringType === ContractorTypesEnum.SUPPLIER ? (\r\n          <SupplierDescrForm control={control} errors={errors} />\r\n        ) : (\r\n          <CustomerDescrForm control={control} errors={errors} />\r\n        )}\r\n        {registeringType === ContractorTypesEnum.SUPPLIER && (\r\n          <TreeSelect\r\n            treeData={categoriesTree}\r\n            value={selectedCategories}\r\n            onChange={handleSelectCategories}\r\n            treeCheckable={true}\r\n            showCheckedStrategy={SHOW_ALL}\r\n            placeholder={\"Выберите категории контрагента\"}\r\n            style={{ width: \"100%\", marginBottom: 10 }}\r\n            maxTagCount={5}\r\n          />\r\n        )}\r\n\r\n        <Radio.Group\r\n          onChange={handleSelectRegType}\r\n          value={registeringType}\r\n          className=\"radio-group\"\r\n        >\r\n          <Radio value={ContractorTypesEnum.SUPPLIER}>Поставщик</Radio>\r\n          <Radio value={ContractorTypesEnum.CUSTOMER}>Заказчик</Radio>\r\n        </Radio.Group>\r\n        {registeringType === ContractorTypesEnum.SUPPLIER && (\r\n          <Button\r\n            className=\"map-btn\"\r\n            type=\"default\"\r\n            onClick={toggleShowMap}\r\n            block\r\n          >\r\n            {latLng ? \"Изменить координаты\" : \"Отметить на карте\"}\r\n          </Button>\r\n        )}\r\n        <ImagesList\r\n          removeImage={handleRemoveImage}\r\n          images={contractorImages}\r\n          editMode={true}\r\n        />\r\n        <UploadFileForm\r\n          onChange={handleUploadImage}\r\n          isUploading={contractorImageUploading}\r\n        />\r\n        <Button\r\n          className=\"order__save-btn\"\r\n          onClick={onSubmit}\r\n          disabled={\r\n            Object.keys(errors).length > 0 ||\r\n            (registeringType === ContractorTypesEnum.SUPPLIER &&\r\n              selectedCategories.length === 0)\r\n          }\r\n        >\r\n          Сохранить\r\n        </Button>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ContractorCreatePage;\r\n","import { Form, Input, Typography } from \"antd\";\r\nimport React, { ChangeEvent } from \"react\";\r\n\r\nconst { Text } = Typography;\r\n\r\ntype CategoryEditablePropsType = {\r\n  editMode: boolean;\r\n  placeholder?: string;\r\n  value: string;\r\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  currentValue?: string;\r\n  error?: string;\r\n};\r\n\r\nconst CategoryEditableField: React.FC<CategoryEditablePropsType> = ({\r\n  placeholder,\r\n  editMode,\r\n  value,\r\n  currentValue,\r\n  error,\r\n  onChange,\r\n}) => {\r\n  const handleInputClick = (\r\n    e: React.MouseEvent<HTMLInputElement, MouseEvent>\r\n  ) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  if (editMode) {\r\n    return (\r\n      <Form.Item\r\n        validateStatus={error ? \"error\" : \"success\"}\r\n        help={error}\r\n        className=\"input\"\r\n        required\r\n        tooltip=\"Обязательное поле\"\r\n      >\r\n        <Input\r\n          placeholder={placeholder}\r\n          onClick={handleInputClick}\r\n          value={currentValue}\r\n          onChange={onChange}\r\n        />\r\n      </Form.Item>\r\n    );\r\n  }\r\n  return <Text>{value}</Text>;\r\n};\r\n\r\nexport default CategoryEditableField;\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { CategoryType } from \"../../../models/Categories\";\r\n\r\ntype CategoryActionsPropsType = {\r\n  editMode: boolean;\r\n  disabledBtn: boolean;\r\n  onSave: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\r\n  onEdit: (category: CategoryType) => void;\r\n  category: CategoryType;\r\n  onRemove: (id: number) => void;\r\n};\r\n\r\nconst CategoryActions: React.FC<CategoryActionsPropsType> = ({\r\n  editMode,\r\n  disabledBtn,\r\n  onSave,\r\n  onEdit,\r\n  category,\r\n  onRemove,\r\n}) => {\r\n  return (\r\n    <div className=\"categories__actions\">\r\n      {editMode ? (\r\n        <Button onClick={onSave} disabled={disabledBtn}>\r\n          Сохранить\r\n        </Button>\r\n      ) : (\r\n        <>\r\n          <Button\r\n            className=\"categories__btn\"\r\n            onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n              e.stopPropagation();\r\n              onEdit(category);\r\n            }}\r\n          >\r\n            Редактировать\r\n          </Button>\r\n          <Button\r\n            className=\"categories__btn\"\r\n            onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n              e.stopPropagation();\r\n              onRemove(category.id);\r\n            }}\r\n            danger\r\n          >\r\n            Удалить\r\n          </Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoryActions;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { Layout, Typography, Empty, Collapse, Button, List } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoriesLoadingState,\r\n  getCategoryInProcessEditState,\r\n  getMainCategoriesState,\r\n  getSubCategoriesState,\r\n} from \"../../store/selectors/categories\";\r\nimport {\r\n  categoriesActions,\r\n  deleteCategoryById,\r\n  updateCategoryById,\r\n} from \"../../store/actions/categories\";\r\nimport { AppAlert, AppPreloader, SelectParentCategory } from \"../../components\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { MainCategoryActions, CategoryEditableField } from \"./components\";\r\nimport { CategoryType } from \"../../models/Categories\";\r\n\r\nconst { Content } = Layout;\r\nconst { Text } = Typography;\r\nconst { Panel } = Collapse;\r\n\r\nconst CategoriesPage = () => {\r\n  const [editableCategory, setEditableCategory] =\r\n    React.useState<CategoryType | null>(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const mainCategories = useSelector(getMainCategoriesState);\r\n  const subCategories = useSelector(getSubCategoriesState);\r\n  const categoriesLoading = useSelector(getCategoriesLoadingState);\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoryInEditProcess = useSelector(getCategoryInProcessEditState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    return () => clearState();\r\n  }, [clearState]);\r\n\r\n  const onRemove = (id: number) => {\r\n    const answer = window.confirm(\"Вы действительно хотите удалить категорию?\");\r\n    if (answer) {\r\n      dispatch(deleteCategoryById(id));\r\n    }\r\n  };\r\n\r\n  const onEdit = (category: CategoryType) => {\r\n    setEditableCategory(category);\r\n  };\r\n\r\n  const onSave = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    e.stopPropagation();\r\n    if (editableCategory) {\r\n      dispatch(updateCategoryById(editableCategory));\r\n    }\r\n    setEditableCategory(null);\r\n  };\r\n\r\n  const onCategoryNameChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setEditableCategory((prev) => {\r\n      if (prev) {\r\n        return { ...prev, name: e.target.value };\r\n      }\r\n      return prev;\r\n    });\r\n  };\r\n\r\n  const handleChangeParentId = (id: number) => {\r\n    setEditableCategory((prev) => {\r\n      if (prev) {\r\n        return { ...prev, parentId: id };\r\n      }\r\n      return prev;\r\n    });\r\n  };\r\n\r\n  if (categoriesLoading) {\r\n    return <AppPreloader size=\"large\" />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={categoriesError}\r\n        successMessage={\"Изменения сохранены\"}\r\n        status={categoriesActionStatus}\r\n      />\r\n      {mainCategories && mainCategories.length > 0 ? (\r\n        <Collapse accordion>\r\n          {mainCategories.map((mainCat) => {\r\n            return (\r\n              <Panel\r\n                header={\r\n                  <div className=\"categories__header\">\r\n                    {categoryInEditProcess === mainCat.id ? (\r\n                      <Text>Сохранение...</Text>\r\n                    ) : (\r\n                      <CategoryEditableField\r\n                        editMode={editableCategory?.id === mainCat.id}\r\n                        value={mainCat.name}\r\n                        currentValue={editableCategory?.name}\r\n                        onChange={onCategoryNameChange}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                }\r\n                key={mainCat.id}\r\n                extra={\r\n                  <MainCategoryActions\r\n                    editMode={editableCategory?.id === mainCat.id}\r\n                    disabledBtn={editableCategory?.name.length === 0}\r\n                    onSave={onSave}\r\n                    onEdit={onEdit}\r\n                    category={mainCat}\r\n                    onRemove={onRemove}\r\n                  />\r\n                }\r\n              >\r\n                {subCategories && (\r\n                  <List\r\n                    dataSource={subCategories.filter(\r\n                      (subCat) => subCat.parentId === mainCat.id\r\n                    )}\r\n                    renderItem={(item) => (\r\n                      <List.Item\r\n                        actions={\r\n                          editableCategory?.id === item.id\r\n                            ? [\r\n                                <Button\r\n                                  onClick={onSave}\r\n                                  disabled={editableCategory?.name.length === 0}\r\n                                >\r\n                                  Сохранить\r\n                                </Button>,\r\n                              ]\r\n                            : [\r\n                                <Button\r\n                                  size=\"small\"\r\n                                  onClick={(\r\n                                    e: React.MouseEvent<HTMLElement, MouseEvent>\r\n                                  ) => {\r\n                                    e.stopPropagation();\r\n                                    onEdit(item);\r\n                                  }}\r\n                                >\r\n                                  Редактировать\r\n                                </Button>,\r\n                                <Button\r\n                                  size=\"small\"\r\n                                  onClick={(\r\n                                    e: React.MouseEvent<HTMLElement, MouseEvent>\r\n                                  ) => {\r\n                                    e.stopPropagation();\r\n                                    onRemove(item.id);\r\n                                  }}\r\n                                  danger\r\n                                >\r\n                                  Удалить\r\n                                </Button>,\r\n                              ]\r\n                        }\r\n                      >\r\n                        <List.Item.Meta\r\n                          description={\r\n                            <>\r\n                              {categoryInEditProcess === item.id ? (\r\n                                <Text>Сохранение...</Text>\r\n                              ) : (\r\n                                <>\r\n                                  <CategoryEditableField\r\n                                    editMode={editableCategory?.id === item.id}\r\n                                    value={item.name}\r\n                                    currentValue={editableCategory?.name}\r\n                                    onChange={onCategoryNameChange}\r\n                                  />\r\n                                  {editableCategory?.id === item.id && (\r\n                                    <SelectParentCategory\r\n                                      mainCategories={mainCategories}\r\n                                      handleChangeParentId={\r\n                                        handleChangeParentId\r\n                                      }\r\n                                      item={item}\r\n                                    />\r\n                                  )}\r\n                                </>\r\n                              )}\r\n                            </>\r\n                          }\r\n                        />\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                )}\r\n              </Panel>\r\n            );\r\n          })}\r\n        </Collapse>\r\n      ) : (\r\n        <Empty description=\"Данных нет\" />\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default CategoriesPage;\r\n","import React from \"react\";\r\n\r\nimport { Button, Card, Form, Input, Layout, Typography } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoriesLoadingState,\r\n  getMainCategoriesState,\r\n} from \"../../store/selectors/categories\";\r\nimport { AppAlert, AppPreloader, SelectParentCategory } from \"../../components\";\r\nimport {\r\n  categoriesActions,\r\n  createCategory,\r\n} from \"../../store/actions/categories\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { categorySchema } from \"../../utils/validatorsSchemes\";\r\nimport { AddCategoryFormData } from \"../../models/Categories\";\r\n\r\nconst { Content } = Layout;\r\nconst { Text, Title } = Typography;\r\n\r\nconst CategoryCreatePage = () => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<AddCategoryFormData>({\r\n    resolver: yupResolver(categorySchema),\r\n  });\r\n\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n  const mainCategories = useSelector(getMainCategoriesState);\r\n  const categoriesLoading = useSelector(getCategoriesLoadingState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    dispatch(createCategory(formData));\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    return () => clearState();\r\n  }, [clearState]);\r\n\r\n  if (categoriesLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={categoriesError}\r\n        successMessage={\"Категория сохранена\"}\r\n        status={categoriesActionStatus}\r\n      />\r\n      <Card className=\"form\">\r\n        <Title level={3} className=\"title\">\r\n          Создание категории\r\n        </Title>\r\n        <Controller\r\n          control={control}\r\n          rules={{\r\n            required: true,\r\n          }}\r\n          render={({ field: { onChange, value } }) => (\r\n            <Form.Item\r\n              validateStatus={errors.name ? \"error\" : \"success\"}\r\n              help={errors.name?.message}\r\n              className=\"input\"\r\n              required\r\n            >\r\n              <Text className=\"subtitle\">Название категории</Text>\r\n              <Input\r\n                placeholder=\"Название категории\"\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            </Form.Item>\r\n          )}\r\n          name=\"name\"\r\n          defaultValue=\"\"\r\n        />\r\n        {mainCategories && (\r\n          <Controller\r\n            control={control}\r\n            rules={{\r\n              required: true,\r\n            }}\r\n            render={({ field: { onChange, value } }) => (\r\n              <SelectParentCategory\r\n                mainCategories={mainCategories}\r\n                handleChangeParentId={onChange}\r\n                error={errors.parentId?.message}\r\n              />\r\n            )}\r\n            name=\"parentId\"\r\n            defaultValue={0}\r\n          />\r\n        )}\r\n        <Button\r\n          className=\"categories__save-btn\"\r\n          onClick={onSubmit}\r\n          disabled={categoriesLoading || Object.keys(errors).length > 0}\r\n        >\r\n          Сохранить\r\n        </Button>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default CategoryCreatePage;\r\n","import { Button, Card, Empty, List, Typography } from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppAlert } from \"../../components\";\r\nimport {\r\n  categoriesActions,\r\n  updateCategoryById,\r\n} from \"../../store/actions/categories\";\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoryInProcessEditState,\r\n  getDeletedCategoriesState,\r\n} from \"../../store/selectors/categories\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { CategoryType } from \"../../models/Categories\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst DeletedCategoriesPage = () => {\r\n  const deletedCategories = useSelector(getDeletedCategoriesState);\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n  const categoryInEditProcess = useSelector(getCategoryInProcessEditState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  const onRestore = (category: CategoryType) => {\r\n    const answer = window.confirm(\"Восстановить выбранную категорию?\");\r\n    if (answer) {\r\n      const updateCategory = { ...category, isDeleted: false };\r\n      dispatch(updateCategoryById(updateCategory));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={categoriesError}\r\n        successMessage={\"Изменения сохранены\"}\r\n        status={categoriesActionStatus}\r\n      />\r\n      {deletedCategories && deletedCategories.length === 0 ? (\r\n        <Empty />\r\n      ) : (\r\n        <Card>\r\n          <List\r\n            dataSource={deletedCategories}\r\n            renderItem={(item) => (\r\n              <List.Item\r\n                actions={[\r\n                  <Button onClick={() => onRestore(item)}>Восстановить</Button>,\r\n                ]}\r\n              >\r\n                <List.Item.Meta\r\n                  description={\r\n                    categoryInEditProcess === item.id ? (\r\n                      <Text>Сохранение...</Text>\r\n                    ) : (\r\n                      <Text>{item.name}</Text>\r\n                    )\r\n                  }\r\n                />\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Card>\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default DeletedCategoriesPage;\r\n","import { Empty, Card } from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink, useParams } from \"react-router-dom\";\r\nimport { AppPreloader } from \"../../components\";\r\nimport { getOrderChats } from \"../../store/actions/orders\";\r\nimport {\r\n  getOrderChatsState,\r\n  getOrdersLoadingState,\r\n} from \"../../store/selectors/orders\";\r\n\r\nconst OrderChatsPage = () => {\r\n  const { orderId }: { orderId?: string } = useParams();\r\n\r\n  const orderChats = useSelector(getOrderChatsState);\r\n  const chatsLoading = useSelector(getOrdersLoadingState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getOrderChats(Number(orderId)));\r\n  }, [dispatch, orderId]);\r\n\r\n  if (chatsLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      {orderChats ? (\r\n        orderChats.length === 0 ? (\r\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n        ) : (\r\n          <>\r\n            {orderChats.map((chat) => (\r\n              <Card\r\n                title={`Чат №${chat.id}`}\r\n                bodyStyle={{ display: \"flex\" }}\r\n                key={chat.id}\r\n              >\r\n                <Card.Grid>\r\n                  Поставщик:{\" \"}\r\n                  {\r\n                    <NavLink to={`/contractors/${chat.supplierId}`}>\r\n                      {chat.supplierName}\r\n                    </NavLink>\r\n                  }\r\n                </Card.Grid>\r\n                <Card.Grid>\r\n                  Заказчик:{\" \"}\r\n                  {\r\n                    <NavLink to={`/contractors/${chat.customerId}`}>\r\n                      {chat.customerName}\r\n                    </NavLink>\r\n                  }\r\n                </Card.Grid>\r\n                <Card.Grid>\r\n                  {\r\n                    <NavLink to={`/orders/${chat.orderId}/chats/${chat.id}`}>\r\n                      Сообщения\r\n                    </NavLink>\r\n                  }\r\n                </Card.Grid>\r\n              </Card>\r\n            ))}\r\n          </>\r\n        )\r\n      ) : null}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default OrderChatsPage;\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { ChatMessageOutType } from \"../../models/Chats\";\r\nimport { ActionsCreatorsTypes } from \"../../models/types\";\r\nimport { chatsApi } from \"../../services/chatsApi\";\r\nimport { AppStateType } from \"../store\";\r\n\r\nexport const chatsActions = {\r\n  setErrorMessage: (errorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_CHATS_ERROR_MESSAGE\",\r\n      payload: { errorMessage },\r\n    } as const;\r\n  },\r\n  setChatsLoading: (chatsLoading: boolean) => {\r\n    return {\r\n      type: \"SET_CHATS_LOADING\",\r\n      payload: { chatsLoading },\r\n    } as const;\r\n  },\r\n  setMessages: (messages: ChatMessageOutType[]) => {\r\n    return {\r\n      type: \"SET_NEW_MESSAGES\",\r\n      payload: { messages },\r\n    } as const;\r\n  },\r\n};\r\n\r\n// chats/{orderId}/{chatId}\r\n\r\nexport const getChatMessages =\r\n  (orderId: number, chatId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(chatsActions.setChatsLoading(true));\r\n      const messages = await chatsApi.getAllChatMessage(orderId, chatId);\r\n\r\n      if (messages) {\r\n        dispatch(chatsActions.setMessages(messages));\r\n      } else {\r\n        dispatch(\r\n          chatsActions.setErrorMessage(\r\n            \"Не удалось загрузить сообщения, попробуйте еще раз\"\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getChatMessages ---- \", error);\r\n      dispatch(chatsActions.setErrorMessage(\"Ошибка сети, попробуйте еще раз\"));\r\n    } finally {\r\n      dispatch(chatsActions.setChatsLoading(false));\r\n    }\r\n  };\r\nexport type ChatsActionTypes = ReturnType<\r\n  ActionsCreatorsTypes<typeof chatsActions>\r\n>;\r\n\r\ntype ThunkAcionType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  ChatsActionTypes\r\n>;\r\n","import { AppStateType } from \"./../store\";\r\n\r\nconst getChatsState = (state: AppStateType) => state.chats;\r\n\r\nexport const getChatErrorMessageState = (state: AppStateType) =>\r\n  getChatsState(state).errorMessage;\r\nexport const getChatLoadinState = (state: AppStateType) =>\r\n  getChatsState(state).chatsLoading;\r\nexport const getChatMessagesState = (state: AppStateType) =>\r\n  getChatsState(state).messages;\r\n","import { Content } from \"antd/lib/layout/layout\";\r\nimport { List, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { AppPreloader } from \"../../components\";\r\nimport { getChatMessages } from \"../../store/actions/chats\";\r\nimport {\r\n  getChatLoadinState,\r\n  getChatMessagesState,\r\n} from \"../../store/selectors/chats\";\r\nimport { formatDateWithTime } from \"../../utils/formatter\";\r\n\r\nconst ChatPage = () => {\r\n  const { orderId, chatId }: { orderId: string; chatId: string } = useParams();\r\n\r\n  const messages = useSelector(getChatMessagesState);\r\n  const messagesLoading = useSelector(getChatLoadinState);\r\n\r\n  const dispatch = useDispatch();\r\n  React.useEffect(() => {\r\n    dispatch(getChatMessages(Number(orderId), Number(chatId)));\r\n  }, [chatId, dispatch, orderId]);\r\n\r\n  if (messagesLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      {messages && (\r\n        <List\r\n          bordered\r\n          dataSource={messages}\r\n          renderItem={(item) => (\r\n            <List.Item>\r\n              <Typography.Text mark>\r\n                {formatDateWithTime(item.timeStamp)}\r\n              </Typography.Text>\r\n              <Typography.Text mark>[{item.senderName}]</Typography.Text>{\" \"}\r\n              {item.text}\r\n            </List.Item>\r\n          )}\r\n        />\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","import React from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { AppHeader, AppSideBar } from \"../components\";\r\nimport {\r\n  CategoriesPage,\r\n  ContractorCreatePage,\r\n  ContractorsPage,\r\n  HomePage,\r\n  OrderCreatePage,\r\n  OrdersPage,\r\n  OrderPage,\r\n  CategoryCreatePage,\r\n  DeletedCategoriesPage,\r\n  ContractorPage,\r\n  OrderChatsPage,\r\n  ChatPage,\r\n} from \"../pages\";\r\n\r\nconst MainLayout = () => {\r\n  return (\r\n    <Layout className=\"wrapper\">\r\n      <AppHeader />\r\n      <Layout>\r\n        <AppSideBar />\r\n        <Layout>\r\n          <Switch>\r\n            <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\r\n            <Route exact path=\"/home\">\r\n              <HomePage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/orders\">\r\n              <OrdersPage />\r\n            </Route>\r\n            <Route exact path=\"/orders/create\">\r\n              <OrderCreatePage />\r\n            </Route>\r\n            <Route exact path=\"/orders/:orderId\">\r\n              <OrderPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/orders/:orderId/chats\">\r\n              <OrderChatsPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/orders/:orderId/chats/:chatId\">\r\n              <ChatPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/contractors\">\r\n              <ContractorsPage />\r\n            </Route>\r\n            <Route exact path=\"/contractors/create\">\r\n              <ContractorCreatePage />\r\n            </Route>\r\n            <Route path=\"/contractors/:contractorId\">\r\n              <ContractorPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/categories\">\r\n              <CategoriesPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/categories/deleted\">\r\n              <DeletedCategoriesPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/categories/create\">\r\n              <CategoryCreatePage />\r\n            </Route>\r\n\r\n            <Route exact path=\"*\" render={() => <Redirect to=\"/home\" />}>\r\n              <HomePage />\r\n            </Route>\r\n          </Switch>\r\n        </Layout>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { MainLayout } from \"./layouts\";\r\nimport { getAllCategories } from \"./store/actions/categories\";\r\n\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getAllCategories());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <MainLayout />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { AuthActionTypes } from \"../actions/auth\";\r\n\r\nconst initialState = {};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst authReducer = (\r\n  state = initialState,\r\n  action: AuthActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n","import { ActionStatusEnum } from \"../../models/types\";\r\nimport { CategoriesActionTypes } from \"../actions/categories\";\r\nimport { CategoryType } from \"../../models/Categories\";\r\n\r\nconst initialState = {\r\n  categories: null as CategoryType[] | null | undefined,\r\n  isLoadingCategories: false,\r\n  errorMessage: null as string | null,\r\n  categoriesActionStatus: ActionStatusEnum.NEVER,\r\n  currentCategory: null as CategoryType | null,\r\n  categoryInProcessEdit: null as number | null,\r\n};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst categoriesReducer = (\r\n  state = initialState,\r\n  action: CategoriesActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"SET_CATEGORIES\":\r\n    case \"SET_IS_LOADING_CATEGORIES\":\r\n    case \"SET_CATEGORIES_ERROR_MESSAGE\":\r\n    case \"SET_CATEGORIES_ACTION_STATUS\":\r\n    case \"SET_CURRENT_CATEGORY\":\r\n    case \"SET_CATEGORY_IN_EDIT_PROCESS\": {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n    case \"REPLACE_CATEGORY\": {\r\n      const newCategoriesList = state.categories?.map((category) => {\r\n        if (category.id === action.payload.category.id) {\r\n          return action.payload.category;\r\n        }\r\n        return category;\r\n      });\r\n      return {\r\n        ...state,\r\n        categories: newCategoriesList,\r\n      };\r\n    }\r\n\r\n    case \"REMOVE_CATEGORY\": {\r\n      const newCategoriesList = state.categories?.filter(\r\n        (category) => category.id !== action.payload.id\r\n      );\r\n      return {\r\n        ...state,\r\n        categories: newCategoriesList,\r\n      };\r\n    }\r\n\r\n    case \"CLEAR_CATEGORIES\": {\r\n      return {\r\n        ...state,\r\n        categories: null,\r\n      } as const;\r\n    }\r\n\r\n    case \"ADD_NEW_CATEGORY\": {\r\n      return {\r\n        ...state,\r\n        categories: state.categories\r\n          ? [...state.categories, action.payload.category]\r\n          : [action.payload.category],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default categoriesReducer;\r\n","import { AttachmentOutType } from \"./../../models/Attachments\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { ContractorsActionTypes } from \"../actions/contractors\";\r\nimport { ContractorType } from \"../../models/Contractors\";\r\n\r\nconst initialState = {\r\n  contractors: null as ContractorType[] | null | undefined,\r\n  currentContractor: null as ContractorType | null,\r\n  contractorsLoading: false,\r\n  contractorsActionStatus: ActionStatusEnum.NEVER,\r\n  errorMessage: null as string | null,\r\n  contractorImages: [] as AttachmentOutType[],\r\n  contractorImageUploading: false,\r\n};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst contractorsReducer = (\r\n  state = initialState,\r\n  action: ContractorsActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"SET_CURRENT_CONTRACTOR\":\r\n    case \"SET_CONTRACTORS_LOADING\":\r\n    case \"SET_CONTRACTORS_ACTION_STATUS\":\r\n    case \"SET_CONTRACTORS_ERROR_MESSAGE\":\r\n    case \"SET_CONTRACTORS\":\r\n    case \"SET_CONTRACTOR_IMAGE_UPLOADING\": {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n\r\n    case \"REMOVE_CONTRACTOR\": {\r\n      return {\r\n        ...state,\r\n        contractors: state.contractors?.filter(\r\n          (contractor) => contractor.id !== action.payload.contractorId\r\n        ),\r\n      };\r\n    }\r\n\r\n    case \"SET_CONTRACTOR_IMAGES\": {\r\n      return {\r\n        ...state,\r\n        contractorImages: action.payload.images,\r\n      };\r\n    }\r\n\r\n    case \"ADD_CONTRACTOR_IMAGE\": {\r\n      return {\r\n        ...state,\r\n        contractorImages: [...state.contractorImages, ...action.payload.images],\r\n      };\r\n    }\r\n\r\n    case \"REMOVE_CONTRACTOR_IMAGE\": {\r\n      return {\r\n        ...state,\r\n        contractorImages: state.contractorImages.filter(\r\n          (image) => image.id !== action.payload.imageId\r\n        ),\r\n      };\r\n    }\r\n\r\n    case \"CLEAR_CONTRACTOR_IMAGES\": {\r\n      return {\r\n        ...state,\r\n        contractorImages: [],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default contractorsReducer;\r\n","import { AttachmentOutType } from \"../../models/Attachments\";\r\nimport { ChatType } from \"../../models/Chats\";\r\nimport { OrderType } from \"../../models/Orders\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { OrdersActionTypes } from \"../actions/orders\";\r\n\r\nconst initialState = {\r\n  orders: null as OrderType[] | null | undefined,\r\n  ordersLoading: false,\r\n  errorMessage: null as string | null,\r\n  orderActionStatus: ActionStatusEnum.NEVER,\r\n  currentOrder: null as OrderType | null,\r\n  orderImages: [] as AttachmentOutType[],\r\n  orderImageUploading: false,\r\n  orderChats: null as ChatType[] | null,\r\n};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst ordersReducer = (\r\n  state = initialState,\r\n  action: OrdersActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"SET_ORDERS\":\r\n    case \"SET_ORDERS_LOADING\":\r\n    case \"SET_ORDERS_ERROR\":\r\n    case \"SET_ORDER_ACTION_STATUS\":\r\n    case \"SET_CURRENT_ORDER\":\r\n    case \"SET_ORDER_IMAGE_UPLOADING\":\r\n    case \"SET_ORDER_CHATS\": {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n\r\n    case \"ADD_NEW_ORDER\": {\r\n      return {\r\n        ...state,\r\n        orders: state.orders\r\n          ? [...state.orders, action.payload.order]\r\n          : [action.payload.order],\r\n      };\r\n    }\r\n    case \"UPDATE_ORDER\": {\r\n      return {\r\n        ...state,\r\n        orders: state.orders?.map((order) => {\r\n          if (order.id === action.payload.order.id) {\r\n            return action.payload.order;\r\n          }\r\n          return order;\r\n        }),\r\n      };\r\n    }\r\n    case \"REMOVE_ORDER\": {\r\n      return {\r\n        ...state,\r\n        orders: state.orders?.filter((order) => order.id !== action.payload.id),\r\n      };\r\n    }\r\n    case \"SET_ORDER_IMAGES\": {\r\n      return {\r\n        ...state,\r\n        orderImages: action.payload.images,\r\n      };\r\n    }\r\n\r\n    case \"ADD_ORDER_IMAGE\": {\r\n      return {\r\n        ...state,\r\n        orderImages: [...state.orderImages, ...action.payload.images],\r\n      };\r\n    }\r\n\r\n    case \"REMOVE_ORDER_IMAGE\": {\r\n      return {\r\n        ...state,\r\n        orderImages: state.orderImages.filter(\r\n          (image) => image.id !== action.payload.imageId\r\n        ),\r\n      };\r\n    }\r\n\r\n    case \"CLEAR_ORDER_IMAGES\": {\r\n      return {\r\n        ...state,\r\n        orderImages: [],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default ordersReducer;\r\n","import { ChatMessageOutType } from \"../../models/Chats\";\r\nimport { ChatsActionTypes } from \"../actions/chats\";\r\n\r\nconst initialState = {\r\n  errorMessage: null as null | string,\r\n  chatsLoading: false,\r\n  messages: [] as ChatMessageOutType[],\r\n};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst chatsReducer = (\r\n  state = initialState,\r\n  action: ChatsActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"SET_CHATS_ERROR_MESSAGE\":\r\n    case \"SET_CHATS_LOADING\": {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n    case \"SET_NEW_MESSAGES\": {\r\n      return {\r\n        ...state,\r\n        messages: action.payload.messages,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default chatsReducer;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  categoriesReducer,\r\n  contractorsReducer,\r\n  authReducer,\r\n  ordersReducer,\r\n  chatsReducer,\r\n} from \"./reducers\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  categories: categoriesReducer,\r\n  contractors: contractorsReducer,\r\n  orders: ordersReducer,\r\n  chats: chatsReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport default createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router, HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"./style.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"./store/store\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}