{"version":3,"sources":["models/types.ts","assets/images/logo.png","components/AppHeader.tsx","components/AppSideBar.tsx","components/AppPreloader.tsx","components/UploadFileForm.tsx","components/AppAlert.tsx","components/SelectParentCategory.tsx","components/AppMap.tsx","api/axios.tsx","models/Contractors.ts","components/ImagesList.tsx","components/AppSearchField.tsx","components/ContactsForm.tsx","store/selectors/categories.ts","models/Orders.ts","store/selectors/contractors.ts","pages/HomePage/components/ContractorsStatistic.tsx","store/selectors/orders.ts","pages/HomePage/components/OrdersStatistic.tsx","pages/HomePage/components/OrdersCounter.tsx","pages/HomePage/components/OrdersByCategories.tsx","pages/HomePage/components/ContractorsByCategories.tsx","pages/HomePage/components/ContractorsCounter.tsx","services/contractorsApi.ts","services/attachmentsApi.ts","store/actions/contractors.ts","services/ordersApi.ts","services/chatsApi.ts","store/actions/orders.ts","pages/HomePage/HomePage.tsx","utils/formatter.ts","models/Chats.ts","pages/OrdersPage/OrdersPage.tsx","utils/limits.ts","utils/validatorsSchemes.ts","services/categoriesApi.ts","store/actions/categories.ts","pages/OrderCreatePage/components/OrderCreateForm.tsx","pages/OrderCreatePage/OrderCreatePage.tsx","pages/OrderPage/components/OrderEditableField.tsx","pages/OrderPage/components/OrderInfoBody.tsx","pages/OrderPage/components/OrderDescription.tsx","pages/OrderPage/OrderPage.tsx","pages/ContractorsPage/ContractorsPage.tsx","pages/ContractorPage/components/ContractorEditableField.tsx","pages/ContractorPage/components/ContractorInfoBody.tsx","pages/ContractorPage/components/ContractorDescription.tsx","pages/ContractorPage/ContractorPage.tsx","pages/ContractorCreatePage/components/ContractorField.tsx","pages/ContractorCreatePage/components/SupplierDescrForm.tsx","pages/ContractorCreatePage/components/SupplierSpecInfo.tsx","pages/ContractorCreatePage/components/CustomerDescrForm.tsx","pages/ContractorCreatePage/ContractorCreatePage.tsx","services/adminsApi.ts","store/actions/admin.ts","store/selectors/admin.ts","pages/AuthPage/components/AuthField.tsx","pages/AuthPage/components/AuthForm.tsx","pages/AuthPage/AuthPage.tsx","pages/CategoriesPage/components/CategoryEditableField.tsx","pages/CategoriesPage/components/MainCategoryActions.tsx","pages/CategoriesPage/CategoriesPage.tsx","pages/CategoryCreatePage/CategoryCreatePage.tsx","pages/DeletedCategoriesPage/DeletedCategoriesPage.tsx","pages/OrderChatsPage/OrderChatsPage.tsx","store/actions/chats.ts","store/selectors/chats.ts","pages/ChatPage/ChatPage.tsx","pages/AdminCreatePage/components/AdminField.tsx","pages/AdminCreatePage/components/AdminForm.tsx","pages/AdminCreatePage/AdminCreatePage.tsx","pages/AdminsPage/AdminsPage.tsx","pages/ChangePasswordPage/components/AdminField.tsx","pages/ChangePasswordPage/components/AdminForm.tsx","pages/ChangePasswordPage/ChangePasswordPage.tsx","layouts/MainLayout.tsx","layouts/AuthLayout.tsx","App.tsx","reportWebVitals.ts","store/reducers/admin.ts","store/reducers/categories.ts","store/reducers/contractors.ts","store/reducers/orders.ts","store/reducers/chats.ts","store/store.ts","index.tsx"],"names":["ActionStatusEnum","Header","Layout","AppHeader","logout","React","useState","currentLocation","setCurrentLocation","location","useLocation","useEffect","pathname","split","offsetTop","className","to","src","logo","size","theme","mode","defaultSelectedKeys","selectedKeys","Item","onClick","window","confirm","SubMenu","Menu","Sider","AppSideBar","search","breakpoint","icon","GroupOutlined","title","UserOutlined","ClusterOutlined","UserSwitchOutlined","memo","AppPreloader","UploadFileForm","onChange","isUploading","buttonText","inputRef","useRef","input","current","addEventListener","removeEventListener","click","PlusOutlined","ref","type","hidden","accept","AppAlert","status","errorMessage","successMessage","onClose","NEVER","message","ERROR","closable","Option","Select","Text","Typography","SelectParentCategory","mainCategories","handleChangeParentId","item","error","classNames","defaultValue","parentId","id","name","map","mainCat","value","AppMap","withScriptjs","withGoogleMap","handleSelectCoords","marker","defaultZoom","coordinatesLatitude","length","isNaN","Number","defaultCenter","lat","lng","coordinatesLongitude","e","latLng","position","baseURL","axios","interceptors","request","use","config","headers","timeout","ContractorTypesEnum","ContractorStatusEnum","ImagesList","images","editMode","removeImage","img","shape","DeleteOutlined","width","attachmentLink","String","AppSearchField","placeholder","Title","ContactsForm","onFinish","initialValues","level","autoComplete","List","fields","add","remove","key","fieldKey","restField","style","display","align","rules","required","max","block","htmlType","OrderStatusEnum","OrderResultEnum","getCategoriesState","state","categories","getAllCategoriesState","getCategoriesErrorMessageState","getCategoriesLoadingState","isLoadingCategories","getMainCategoriesState","createSelector","filter","category","isDeleted","getSubCategoriesState","getDeletedCategoriesState","getCategoryInProcessEditState","categoryInProcessEdit","getCategoriesActionStatusState","categoriesActionStatus","getCategoriesTreeDataState","subCategories","subCats","subCat","children","getContractorsState","contractors","getContractorsListState","getCurrentContractorState","currentContractor","getFilteredContractorsListState","searchText","categoryId","contractor","contractorType","CUSTOMER","SUPPLIER","toLowerCase","includes","Boolean","find","getContractorsLoadingState","contractorsLoading","getContractorsActionStatusState","contractorsActionStatus","getContractorsErrorMessage","getContractorsCountState","getCustomersCountState","getSuppliersCountState","getDeletedContractorCountState","getContractorImagesState","contractorImages","getContractorImageUploadingState","contractorImageUploading","getContractorsByCategoriesState","contractorsByCurrentCategory","contractorCategory","categoryName","contractorsCount","getContractorAvatarUploadingState","contractorAvatarUploading","getContractorAvatarsState","contractorAvatars","getTodayContractorsCountState","startDayTime","moment","startOf","valueOf","endDayTime","endOf","creationDate","renderActiveShape","props","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","fill","payload","percent","sin","cos","sx","sy","mx","my","ex","ey","textAnchor","x","y","dy","Sector","d","stroke","r","toFixed","ContractorsStatistic","activeIndex","setActiveIndex","allContractorsCount","useSelector","customersCount","suppliersCount","deletedContractorsCount","data","useMemo","ResponsiveContainer","PieChart","height","Pie","activeShape","dataKey","onMouseEnter","_","index","getOrdersState","orders","getOrdersListState","getFilteredOrdersListState","contractorId","order","orderStatus","NEW","DELETED","ARCHIVED","customerId","getOrdersLoadingState","ordersLoading","getOrdersErrorMessageState","getOrderActionStatusState","orderActionStatus","getCurrentOrderState","currentOrder","getAllOrdersCountState","getActiveOrdersCountState","getDeletedOrdersCountState","getHistoryOrdersCountState","getTodayOrdersCountState","getTodayArchivedCountState","actualDate","getSuccessResultCount","result","SUCCESS","getFailResultCount","FAIL","getOrdersByCategoriesState","ordersByCurrentCategory","orderCategory","ordersCount","getOrderImagesState","orderImages","getOrderImagesLoadingState","getOrderChatsState","orderChats","OrdersStatistic","allOrdersCount","activeOrdersCount","deletedOrdersCount","historyOrdersCount","OrdersCounter","createdTodayCount","closedTodayCount","successResultCount","failResultCount","xl","useBreakpoint","bodyStyle","padding","prefix","ArrowUpOutlined","valueStyle","color","ArrowDownOutlined","CustomTooltip","active","label","OrdersByCategories","ordersByCategories","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","content","Legend","Bar","barSize","ContractorsByCategories","contractorsByCategories","ContractorsCounter","contractorsApi","getContractors","a","get","createContractor","formData","post","updateContractor","patch","deleteContractor","delete","getContractorById","removeContractorAttachment","attachmentId","attachmentsApi","addAttachment","file","FormData","append","removeAttachment","contractorActions","imageId","showError","text","dispatch","console","log","addContractorImage","image","imageOut","addContractorAvatar","ordersApi","getOrders","createOrder","getOrderById","orderId","deleteOrder","updateOrder","removeOrderAttachment","chatsApi","getOrderChats","getAllChatMessage","chatId","ordersActions","orderImageUploading","addOrderImage","Content","HomePage","useDispatch","locale","ChatMessageEnum","ChatTypesMessageEnum","ChatMessageAttachmentTypesEnum","formatDate","date","format","formatDateWithTime","truncateString","str","n","substr","Column","Table","getNumberSorter","fieldName","compare","b","getStringSorter","localeCompare","getResultText","OrdersPage","setSearchText","query","URLSearchParams","xxl","ordersError","history","useHistory","clearState","useCallback","fetchData","handleViewOrder","push","currentTarget","ReloadOutlined","pagination","showSorterTooltip","dataSource","rowKey","expandable","expandedRowRender","description","danger","dataIndex","render","colors","sorter","defaultSortOrder","NONE","TITLE_LENGTH","TEXT_LENGTH","CONTACT_INFORMATION_LENGTH","phoneCodes","orderSchema","yup","totalSum","test","comment","typeError","supplierSchema","phoneNumber","min","code","slice","address","contactName","webSite","eMail","email","customerSchema","otp","matches","adminSchema","password","oneOf","authSchema","changePasswordSchema","categorySchema","categoriesApi","getAllCategories","deleteAllCategories","addCategory","getCategoryById","deleteCategoryById","updateCategoryById","categoriesActions","OrderCreateForm","control","errors","field","validateStatus","help","TextArea","SHOW_ALL","TreeSelect","OrderCreatePage","useForm","resolver","yupResolver","reset","handleSubmit","formState","selectedCategories","setSelectedCategories","setCustomerId","orderError","orderLoadingState","orderUploading","categoriesTree","categoriesError","clearOrderState","clearCategoriesState","handleUploadImage","target","files","onSubmit","newOrder","attachments","suppliers","treeData","treeCheckable","showCheckedStrategy","marginBottom","maxTagCount","showSearch","optionFilterProp","filterOption","option","indexOf","filterSort","optionA","optionB","loading","removeNewOrderImage","disabled","Object","keys","OrderEditableField","isTextArea","isNumberInput","OrderInfoBody","handleSelectCategories","handleRemoveImage","handleAddImage","imageUploading","OrderDescription","column","labelStyle","fontWeight","OrderPage","setEditMode","useParams","toggleEditMode","prev","updatedOrder","editActionsButtons","actionsButtons","restoredOrder","ghost","onBack","back","extra","removeOrderImage","ContractorsPage","contractorsError","UNKNOWN","replace","ceil","rating","ContractorEditableField","maxLength","href","rel","ContractorInfoBody","handleRemoveAvatar","registeringType","avatars","handleAddAvatar","avatarUploading","otherPhones","setOtherPhone","contacts","phone","ContractorDescription","handleSelectRegType","toggleShowMap","layout","Group","fromNow","ContractorPage","setLatLng","setRegisteringType","showMap","setShowMap","otherPhoneNumbers","setOtherPhoneNumber","contractorActionStatus","contractorError","contractorLoadingState","coordinates","newContractor","handleDeleteContractor","handleCancelEdit","handleUploadAvatar","checkDisabledBtn","actionButtons","containerElement","mapElement","googleMapURL","loadingElement","removeContractorImage","removeContractorAvatar","values","parsedPhones","ContractorField","subtitle","textArea","InputField","Input","SupplierDescrForm","SupplierSpecInfo","setOtherPhoneNumbers","contact","CustomerDescrForm","ContractorCreatePage","contractorLoading","clearContractorsState","avatar","contractorsList","createContractorProfile","removeNewContractorAvatar","removeNewContractorImage","adminsApi","getAllAdmin","createAdmin","checkAdmin","banAdmin","updateAdmin","getAdminById","adminActions","isAuth","authErrorMessage","authLoading","isInit","adminLoading","adminErrorMessage","admins","adminActionStatus","admin","clearAdminState","getAllAdmins","getAdminState","getIsAuthState","getAuthLoadingState","getAuthErrorMessageState","getIsInitState","getAdminLoadingState","getAdminErrorMessageState","getAdminsState","getAdminActionStatusState","getCurrentAdminState","AuthField","Password","AuthForm","AuthPage","authError","localStorage","setItem","auth","CategoryEditableField","currentValue","tooltip","stopPropagation","CategoryActions","disabledBtn","onSave","onEdit","onRemove","Panel","Collapse","CategoriesPage","editableCategory","setEditableCategory","categoriesLoading","categoryInEditProcess","onCategoryNameChange","accordion","header","MainCategoryActions","renderItem","actions","Meta","CategoryCreatePage","createdCategory","createCategory","DeletedCategoriesPage","deletedCategories","updateCategory","onRestore","OrderChatsPage","chatsLoading","chats","Empty","PRESENTED_IMAGE_SIMPLE","chat","Grid","supplierId","supplierName","customerName","chatsActions","messages","getChatsState","getChatLoadinState","getChatMessagesState","ChatMessage","TEXT","timeStamp","mark","senderName","ATTACHMENT","attachmentType","PICTURE","VIDEO","controls","DOCUMENT","attachmentName","ChatPage","messagesLoading","getChatMessages","bordered","AdminField","AdminForm","AdminCreatePage","resp","isBlocked","AdminsPage","adminsLoading","handleChangeBanStatus","administrator","newPassword","prompt","ChangePasswordPage","currentAdmin","MainLayout","removeItem","exact","path","AuthLayout","component","App","adminId","getItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","adminReducer","action","currentCategory","categoriesReducer","newCategoriesList","contractorsReducer","ordersReducer","chatsReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","createStore","applyMiddleware","thunk","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.5fa1ae49.chunk.js","sourcesContent":["import { Control, FieldError } from \"react-hook-form\";\r\n\r\nexport type StateSpecializationType = {\r\n  [key: string]: {\r\n    IDs: string[];\r\n    names: string[] | [];\r\n  };\r\n};\r\n\r\nexport type ActionsCreatorsTypes<T> = T extends { [key: string]: infer U }\r\n  ? U\r\n  : never;\r\n\r\nexport enum ActionStatusEnum {\r\n  SUCCESS = \"SUCCESS\",\r\n  ERROR = \"ERROR\",\r\n  NEVER = \"NEVER\",\r\n}\r\n\r\nexport type OtpFormDataType = {\r\n  phoneNumber: string;\r\n  otp: string;\r\n};\r\n\r\nexport type EditableFieldPropsType<T, F> = {\r\n  editMode: boolean;\r\n  fieldName: F;\r\n  control: Control<T, object>;\r\n  error?: FieldError;\r\n  defaultValue?: string | number;\r\n  isTextArea?: boolean;\r\n  isNumberInput?: boolean;\r\n  placeholder?: string;\r\n  currentValue?: string;\r\n  maxLength?: number;\r\n};\r\n\r\nexport type Result = {\r\n  id: number;\r\n  error: string;\r\n};\r\n\r\nexport type SaveContactsResponse = {\r\n  contacts: { phoneNumber: string }[];\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.4de10a08.png\";","import React from \"react\";\r\nimport { Affix, Layout, Menu, Avatar } from \"antd\";\r\nimport { NavLink, useLocation } from \"react-router-dom\";\r\nimport logo from \"../assets/images/logo.png\";\r\n\r\nconst { Header } = Layout;\r\n\r\ntype AppHeaderPropsType = {\r\n  logout: () => void;\r\n};\r\n\r\nconst AppHeader: React.FC<AppHeaderPropsType> = ({ logout }) => {\r\n  const [currentLocation, setCurrentLocation] = React.useState<string[]>([\"/\"]);\r\n\r\n  const location = useLocation();\r\n\r\n  React.useEffect(() => {\r\n    setCurrentLocation([location.pathname.split(\"/\")[1]]);\r\n  }, [location]);\r\n\r\n  const handleLogout = () => {\r\n    const answer = window.confirm(\"Вы уверены что хотите выйти?\");\r\n    if (answer) {\r\n      logout();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Affix offsetTop={0}>\r\n      <Header className=\"header\">\r\n        <div className=\"header__logo\">\r\n          <NavLink to=\"/\">\r\n            <Avatar src={logo} size=\"large\" />\r\n          </NavLink>\r\n        </div>\r\n        <Menu\r\n          theme=\"dark\"\r\n          mode=\"horizontal\"\r\n          defaultSelectedKeys={[\"/home\"]}\r\n          selectedKeys={currentLocation}\r\n          className=\"header__menu\"\r\n        >\r\n          <Menu.Item key=\"home\">\r\n            <NavLink to=\"/home\">Главная</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"orders\">\r\n            <NavLink to=\"/orders\">Заявки</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"contractors\">\r\n            <NavLink to=\"/contractors\">Контрагенты</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"categories\">\r\n            <NavLink to=\"/categories\">Категории</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"admins\">\r\n            <NavLink to=\"/admins\">Администраторы</NavLink>\r\n          </Menu.Item>\r\n        </Menu>\r\n        <div className=\"header__logout\">\r\n          <NavLink to=\"/suppliers\" onClick={handleLogout}>\r\n            Выйти\r\n          </NavLink>\r\n        </div>\r\n      </Header>\r\n    </Affix>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React from \"react\";\r\n\r\nimport { Layout, Menu, Affix } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  ClusterOutlined,\r\n  GroupOutlined,\r\n  UserSwitchOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { NavLink, useLocation } from \"react-router-dom\";\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Sider } = Layout;\r\n\r\nconst AppSideBar = () => {\r\n  const [currentLocation, setCurrentLocation] = React.useState<string[]>([\"/\"]);\r\n\r\n  const location = useLocation();\r\n\r\n  React.useEffect(() => {\r\n    setCurrentLocation([`${location.pathname}${location.search}`]);\r\n  }, [location]);\r\n\r\n  return (\r\n    <Affix offsetTop={64}>\r\n      <Sider\r\n        // width={200}\r\n        breakpoint=\"xxl\"\r\n        className=\"site-layout-background sidebar\"\r\n      >\r\n        <Menu\r\n          mode=\"inline\"\r\n          className=\"sidebar__menu\"\r\n          selectedKeys={currentLocation}\r\n        >\r\n          <SubMenu key=\"sub1\" icon={<GroupOutlined />} title=\"Заявки\">\r\n            <Menu.Item key=\"/orders\">\r\n              <NavLink to=\"/orders\">Все заявки</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/orders?filter=active\">\r\n              <NavLink to=\"/orders?filter=active\">Активные заявки</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/orders?filter=archived\">\r\n              <NavLink to=\"/orders?filter=archived\">Архивные заявки</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/orders?filter=deleted\">\r\n              <NavLink to=\"/orders?filter=deleted\">Удаленные заявки</NavLink>\r\n            </Menu.Item>\r\n\r\n            <Menu.Item key=\"/orders/create\">\r\n              <NavLink to=\"/orders/create\">Создать заявку</NavLink>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n\r\n          <SubMenu key=\"sub3\" icon={<UserOutlined />} title=\"Контрагенты\">\r\n            <Menu.Item key=\"/customcontractorsers\">\r\n              <NavLink to=\"/contractors\">Все контрагенты</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/contractors?filter=customers\">\r\n              <NavLink to=\"/contractors?filter=customers\">Заказчики</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/contractors?filter=supplier\">\r\n              <NavLink to=\"/contractors?filter=supplier\">Поставщики</NavLink>\r\n            </Menu.Item>\r\n            {/* <Menu.Item key=\"/contractors?filter=deleted\">\r\n              <NavLink to=\"/contractors?filter=deleted\">Удаленные</NavLink>\r\n            </Menu.Item> */}\r\n            <Menu.Item key=\"/contractors/create\">\r\n              <NavLink to=\"/contractors/create\">Создать контрагента</NavLink>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n\r\n          <SubMenu key=\"sub4\" icon={<ClusterOutlined />} title=\"Категории\">\r\n            <Menu.Item key=\"/categories\">\r\n              <NavLink to=\"/categories\">Все категории</NavLink>\r\n            </Menu.Item>\r\n            {/* <Menu.Item key=\"/categories/deleted\">\r\n              <NavLink to=\"/categories/deleted\">Удаленные категории</NavLink>\r\n            </Menu.Item> */}\r\n            <Menu.Item key=\"/categories/create\">\r\n              <NavLink to=\"/categories/create\">Создать категорию</NavLink>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n\r\n          <SubMenu\r\n            key=\"sub5\"\r\n            icon={<UserSwitchOutlined />}\r\n            title=\"Администраторы\"\r\n          >\r\n            <Menu.Item key=\"/admins\">\r\n              <NavLink to=\"/admins\">Все администраторы</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/admins/create\">\r\n              <NavLink to=\"/admins/create\">Создать администратора</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"/admins/password\">\r\n              <NavLink to=\"/admins/password\">Изменить пароль</NavLink>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        </Menu>\r\n      </Sider>\r\n    </Affix>\r\n  );\r\n};\r\n\r\nexport default React.memo(AppSideBar);\r\n","import { Spin } from \"antd\";\r\nimport React from \"react\";\r\n\r\ntype AppPreloaderPropsType = {\r\n  size?: \"small\" | \"large\" | \"default\";\r\n};\r\n\r\nconst AppPreloader: React.FC<AppPreloaderPropsType> = ({\r\n  size = \"default\",\r\n}) => {\r\n  return (\r\n    <div className=\"preloader\">\r\n      <Spin size={size} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppPreloader;\r\n","import React from \"react\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { Spin } from \"antd\";\r\n\r\ntype UploadFileFormPropsType = {\r\n  onChange: (e: Event) => void;\r\n  isUploading: boolean;\r\n  buttonText: string;\r\n};\r\n\r\nconst UploadFileForm: React.FC<UploadFileFormPropsType> = ({\r\n  onChange,\r\n  isUploading,\r\n  buttonText,\r\n}) => {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  const handleClick = () => {\r\n    inputRef.current?.click();\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const input = inputRef.current;\r\n    if (inputRef) {\r\n      input?.addEventListener(\"change\", onChange);\r\n    }\r\n    return () => {\r\n      input?.removeEventListener(\"change\", onChange);\r\n    };\r\n  }, [onChange]);\r\n\r\n  return (\r\n    <div className=\"upload\">\r\n      <div className=\"upload__btn\" onClick={handleClick}>\r\n        <div className=\"upload__btn-body\">\r\n          {isUploading ? (\r\n            <Spin />\r\n          ) : (\r\n            <>\r\n              <PlusOutlined /> <div>{buttonText}</div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <input ref={inputRef} type=\"file\" hidden accept=\"image/*\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadFileForm;\r\n","import { Alert } from \"antd\";\r\nimport React from \"react\";\r\nimport { ActionStatusEnum } from \"../models/types\";\r\n\r\ntype AlertPropsType = {\r\n  status: string;\r\n  errorMessage?: string | null;\r\n  successMessage?: string;\r\n  onClose: () => void;\r\n};\r\n\r\nconst AppAlert: React.FC<AlertPropsType> = ({\r\n  status,\r\n  errorMessage,\r\n  successMessage,\r\n  onClose,\r\n}) => {\r\n  if (status === ActionStatusEnum.NEVER) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Alert\r\n      className=\"error\"\r\n      message={\r\n        status === ActionStatusEnum.ERROR ? errorMessage : successMessage\r\n      }\r\n      type={status === ActionStatusEnum.ERROR ? \"error\" : \"success\"}\r\n      closable\r\n      onClose={onClose}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AppAlert;\r\n","import { Select, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { CategoryType } from \"../models/Categories\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\ntype SelectParentCategoryPropsType = {\r\n  mainCategories: CategoryType[] | null;\r\n  handleChangeParentId: (id: number) => void;\r\n  item?: CategoryType;\r\n  error?: string;\r\n};\r\n\r\nconst SelectParentCategory: React.FC<SelectParentCategoryPropsType> = ({\r\n  mainCategories,\r\n  handleChangeParentId,\r\n  item,\r\n  error,\r\n}) => {\r\n  return (\r\n    <div\r\n      className={classNames(\"categories__select-wrapper\", {\r\n        \"categories__select-error\": error,\r\n      })}\r\n    >\r\n      <Text className=\"subtitle\">Выберите родительскую категорию</Text>\r\n      <Select\r\n        defaultValue={item ? item.parentId : 0}\r\n        onChange={handleChangeParentId}\r\n        className=\"categories__select\"\r\n      >\r\n        {mainCategories &&\r\n          [{ id: 0, name: \"ОСНОВНАЯ КАТЕГОРИЯ\" }, ...mainCategories].map(\r\n            (mainCat) => {\r\n              return (\r\n                <Option value={mainCat.id} key={mainCat.id}>\r\n                  {mainCat.name}\r\n                </Option>\r\n              );\r\n            }\r\n          )}\r\n      </Select>\r\n      <Text className=\"error-text\">{error}</Text>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectParentCategory;\r\n","import React from \"react\";\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n  WithGoogleMapProps,\r\n  WithScriptjsProps,\r\n} from \"react-google-maps\";\r\nimport { CoordinatesType } from \"../models/Contractors\";\r\n\r\ntype AppMapPropsType = {\r\n  handleSelectCoords: (latLng: google.maps.LatLng | null) => void;\r\n  marker: CoordinatesType | null;\r\n};\r\n\r\nconst AppMap: React.ComponentClass<\r\n  WithGoogleMapProps & WithScriptjsProps & AppMapPropsType\r\n> = withScriptjs(\r\n  withGoogleMap(({ handleSelectCoords, marker }) => {\r\n    const onMapClick = (\r\n      e: google.maps.MouseEvent | google.maps.IconMouseEvent\r\n    ) => {\r\n      handleSelectCoords(e.latLng);\r\n    };\r\n\r\n    return (\r\n      <GoogleMap\r\n        defaultZoom={\r\n          marker\r\n            ? marker.coordinatesLatitude.length > 0 &&\r\n              !isNaN(Number(marker.coordinatesLatitude))\r\n              ? 12\r\n              : 7\r\n            : 7\r\n        }\r\n        defaultCenter={\r\n          marker\r\n            ? marker.coordinatesLatitude.length > 0 &&\r\n              !isNaN(Number(marker.coordinatesLatitude))\r\n              ? {\r\n                  lat: Number(marker.coordinatesLatitude),\r\n                  lng: Number(marker.coordinatesLongitude),\r\n                }\r\n              : { lat: 51.2146889644867, lng: 68.80153486533352 }\r\n            : { lat: 51.2146889644867, lng: 68.80153486533352 }\r\n        }\r\n        onClick={onMapClick}\r\n      >\r\n        {marker && (\r\n          <Marker\r\n            position={{\r\n              lat: Number(marker.coordinatesLatitude),\r\n              lng: Number(marker.coordinatesLongitude),\r\n            }}\r\n          />\r\n        )}\r\n      </GoogleMap>\r\n    );\r\n  })\r\n);\r\n\r\nexport default AppMap;\r\n","import axios from \"axios\";\r\n\r\n// export const baseURL = \"https://atm.e-health.kz:8889\";\r\nexport const baseURL = \"https://atm.e-health.kz:9889\";\r\n// export const baseURL = \"http://192.168.10.246:8888\";\r\n\r\naxios.interceptors.request.use((config) => {\r\n  config.headers[\"Content-Security-Policy-Report-Only\"] = \"default-src 'none';\";\r\n  config.headers[\"Authorization\"] = \"Basic YWRtaW46Z2hidnRo\";\r\n  config.baseURL = baseURL;\r\n  config.timeout = 5000;\r\n  return config;\r\n});\r\n\r\nexport { axios };\r\n","import { AttachmentInType, AttachmentOutType } from \"./Attachments\";\r\nimport { CategoryInType, CategoryOutType } from \"./Categories\";\r\nimport { ChatType } from \"./Chats\";\r\n\r\nexport type CoordinatesType = {\r\n  coordinatesLatitude: string;\r\n  coordinatesLongitude: string;\r\n};\r\n\r\nexport type ContactsType = {\r\n  address?: string;\r\n  webSite?: string;\r\n  eMail?: string;\r\n};\r\n\r\nexport enum ContractorTypesEnum {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  SUPPLIER = \"SUPPLIER\",\r\n  CUSTOMER = \"CUSTOMER\",\r\n}\r\n\r\nexport enum ContractorStatusEnum {\r\n  NEW = \"NEW\",\r\n  REGISTERED = \"REGISTERED\",\r\n  BANNED = \"BANNED\",\r\n}\r\n\r\nexport type ContractorType = {\r\n  id: number;\r\n  isDeleted: boolean;\r\n  name: string;\r\n  contactName: string;\r\n  phoneNumber: string;\r\n  description: string;\r\n  location: string;\r\n  coordinates: CoordinatesType;\r\n  contacts: ContactsType;\r\n  contractorType: ContractorTypesEnum;\r\n  categories: CategoryOutType[];\r\n  attachments: AttachmentOutType[];\r\n  avatars: AttachmentOutType[];\r\n  chats: ChatType[];\r\n  otherPhoneNumbers: string[];\r\n  creationDate: number;\r\n  rating: number;\r\n};\r\n\r\nexport type ContractorStringSortFieldsType =\r\n  | \"contractorType\"\r\n  | \"name\"\r\n  | \"location\";\r\n\r\nexport type ContractorNumberSortFieldsType = \"rating\" | \"creationDate\";\r\n\r\nexport type AddContractorFormDataType = {\r\n  name: string;\r\n  contactName: string;\r\n  phoneNumber: string;\r\n  description?: string;\r\n  location: string;\r\n  coordinates: CoordinatesType;\r\n  contacts: ContactsType;\r\n  contractorType: ContractorTypesEnum;\r\n  categories: CategoryInType[];\r\n  attachments: AttachmentInType[];\r\n  avatars: AttachmentInType[];\r\n  otherPhoneNumbers: string[];\r\n};\r\n\r\nexport type SupplierDescrFormDataType = {\r\n  name: string;\r\n  phoneNumber: string;\r\n  contactName: string;\r\n  location: string;\r\n  webSite: string;\r\n  eMail: string;\r\n  address: string;\r\n  description?: string;\r\n};\r\nexport type CustomerDescrFormDataType = {\r\n  name: string;\r\n  phoneNumber: string;\r\n  contactName: string;\r\n  location: string;\r\n};\r\n\r\nexport type SupplierFieldsNameType =\r\n  | \"name\"\r\n  | \"phoneNumber\"\r\n  | \"contactName\"\r\n  | \"location\"\r\n  | \"webSite\"\r\n  | \"eMail\"\r\n  | \"address\"\r\n  | \"description\";\r\nexport type CustomerFieldsNameType =\r\n  | \"name\"\r\n  | \"phoneNumber\"\r\n  | \"contactName\"\r\n  | \"location\";\r\n\r\nexport type ContractorInType = {\r\n  contractorId: number;\r\n};\r\n\r\nexport type ContractorOutType = {\r\n  contractorId: number;\r\n  contractorName: string;\r\n};\r\n\r\nexport type ContractorsQueryFilterType =\r\n  | \"customers\"\r\n  | \"supplier\"\r\n  | \"deleted\"\r\n  | null;\r\n\r\nexport type UserOutType = {\r\n  id: number;\r\n  phoneNumber: string;\r\n  pushToken: string;\r\n  secretToken: string;\r\n  isBlocked: boolean;\r\n};\r\nexport type UserInType = {\r\n  phoneNumber: string;\r\n  password?: string;\r\n  smsCode: string;\r\n  pushToken?: string;\r\n};\r\nexport type UserCheckType = {\r\n  phoneNumber: string;\r\n  secretToken: string;\r\n};\r\nexport type UserCredentialsType = {\r\n  userName: string;\r\n  secretToken: string;\r\n};\r\n","import React from \"react\";\r\nimport { baseURL } from \"../api/axios\";\r\nimport { AttachmentOutType } from \"../models/Attachments\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Button, Image } from \"antd\";\r\n\r\ntype ImagesListPropsType = {\r\n  images: AttachmentOutType[];\r\n  editMode: boolean;\r\n  removeImage: (imageId: number) => void;\r\n};\r\n\r\nconst ImagesList: React.FC<ImagesListPropsType> = ({\r\n  images,\r\n  editMode,\r\n  removeImage,\r\n}) => {\r\n  return (\r\n    <div className=\"order__images-list\">\r\n      {images &&\r\n        images.map((img) => (\r\n          <div key={String(img.id)} className=\"order__image-wrapper\">\r\n            {editMode && (\r\n              <Button\r\n                type=\"default\"\r\n                shape=\"circle\"\r\n                icon={<DeleteOutlined />}\r\n                size=\"middle\"\r\n                className=\"order__image-delete\"\r\n                onClick={() => removeImage(img.id)}\r\n              />\r\n            )}\r\n            <Image\r\n              width={200}\r\n              src={`${baseURL}${img.attachmentLink}`}\r\n              className=\"order__image\"\r\n            />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\nexport default ImagesList;\r\n","import { Input } from \"antd\";\r\nimport React, { ChangeEventHandler } from \"react\";\r\n\r\ntype AppSearchFieldPropsType = {\r\n  value: string;\r\n  onChange: ChangeEventHandler<HTMLInputElement>;\r\n  placeholder: string;\r\n};\r\n\r\nconst AppSearchField: React.FC<AppSearchFieldPropsType> = ({\r\n  value,\r\n  onChange,\r\n  placeholder,\r\n}) => {\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"filter__input\">\r\n        <Input placeholder={placeholder} value={value} onChange={onChange} />\r\n      </div>\r\n      <div className=\"filter__actions\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppSearchField;\r\n","import React from \"react\";\r\nimport MinusCircleOutlined from \"@ant-design/icons/lib/icons/MinusCircleOutlined\";\r\nimport PlusOutlined from \"@ant-design/icons/lib/icons/PlusOutlined\";\r\nimport { Button, Form, Input, Space, Typography } from \"antd\";\r\nimport { Store } from \"antd/lib/form/interface\";\r\nimport { SaveContactsResponse } from \"../models/types\";\r\n\r\nconst { Title } = Typography;\r\n\r\ntype ContactsFormPropsType = {\r\n  onFinish: (values: SaveContactsResponse) => void;\r\n  initialValues?: Store;\r\n};\r\n\r\nconst ContactsForm: React.FC<ContactsFormPropsType> = ({\r\n  onFinish,\r\n  initialValues,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Title level={4} className=\"title\">\r\n        Контакты\r\n      </Title>\r\n      <Form\r\n        name=\"contacts-form\"\r\n        onFinish={onFinish}\r\n        autoComplete=\"off\"\r\n        initialValues={initialValues}\r\n      >\r\n        <Form.List name=\"contacts\">\r\n          {(fields, { add, remove }) => {\r\n            return (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: \"flex\" }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      // initialValue={\r\n                      //   initialValues ? initialValues[fieldKey] : \"+7\"\r\n                      // }\r\n                      name={[name, \"phoneNumber\"]}\r\n                      fieldKey={[fieldKey, \"phoneNumber\"]}\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Значение не может быть пустым\",\r\n                        },\r\n                        {\r\n                          max: 12,\r\n                          message: \"Максимальная длина телефона 12 символов\",\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Input placeholder=\"Номер телефона\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Добавить контакты\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            );\r\n          }}\r\n        </Form.List>\r\n        <Form.Item>\r\n          <Button type=\"dashed\" htmlType=\"submit\">\r\n            Сохранить контакты\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsForm;\r\n","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./../store\";\r\n\r\nconst getCategoriesState = (state: AppStateType) => state.categories;\r\n\r\nconst getAllCategoriesState = (state: AppStateType) =>\r\n  getCategoriesState(state).categories;\r\n\r\nexport const getCategoriesErrorMessageState = (state: AppStateType) =>\r\n  getCategoriesState(state).errorMessage;\r\n\r\nexport const getCategoriesLoadingState = (state: AppStateType) =>\r\n  getCategoriesState(state).isLoadingCategories;\r\n\r\nexport const getMainCategoriesState = createSelector(\r\n  [getAllCategoriesState],\r\n  (categories) => {\r\n    return categories?.filter(\r\n      (category) => category.parentId === 0 && !category.isDeleted\r\n    );\r\n  }\r\n);\r\n\r\nexport const getSubCategoriesState = createSelector(\r\n  [getAllCategoriesState],\r\n  (categories) => {\r\n    return categories?.filter(\r\n      (category) => category.parentId !== 0 && !category.isDeleted\r\n    );\r\n  }\r\n);\r\n\r\nexport const getDeletedCategoriesState = (state: AppStateType) =>\r\n  getAllCategoriesState(state)?.filter((category) => category.isDeleted);\r\n\r\nexport const getCurrentCategoryState = (state: AppStateType) =>\r\n  getCategoriesState(state).currentCategory;\r\n\r\nexport const getCategoryInProcessEditState = (state: AppStateType) =>\r\n  getCategoriesState(state).categoryInProcessEdit;\r\n\r\nexport const getCategoriesActionStatusState = (state: AppStateType) =>\r\n  getCategoriesState(state).categoriesActionStatus;\r\n\r\nexport const getCategoriesTreeDataState = createSelector(\r\n  [getMainCategoriesState, getSubCategoriesState],\r\n  (mainCategories, subCategories) => {\r\n    if (mainCategories && subCategories) {\r\n      const tree = mainCategories.map((mainCat) => {\r\n        const subCats = subCategories\r\n          .filter((subCat) => subCat.parentId === mainCat.id)\r\n          .map((subCat) => {\r\n            return {\r\n              title: subCat.name,\r\n              value: subCat.id,\r\n              key: subCat.id,\r\n            };\r\n          });\r\n        return {\r\n          title: mainCat.name,\r\n          value: mainCat.id,\r\n          key: mainCat.id,\r\n          children: subCats,\r\n        };\r\n      });\r\n      return tree;\r\n    }\r\n\r\n    return [];\r\n  }\r\n);\r\n","import { AttachmentInType, AttachmentOutType } from \"./Attachments\";\r\nimport { CategoryInType, CategoryOutType } from \"./Categories\";\r\nimport { ContractorInType, ContractorOutType } from \"./Contractors\";\r\n\r\nexport type OrderType = {\r\n  id: number;\r\n  creationDate: number;\r\n  actualDate: number;\r\n  comment: string;\r\n  title: string;\r\n  description?: string;\r\n  totalSum: number;\r\n  orderStatus: OrderStatusEnum;\r\n  customerId: number;\r\n  customerPhoneNumber: string;\r\n  categories: CategoryOutType[];\r\n  contractors: ContractorOutType[];\r\n  attachments: AttachmentOutType[];\r\n  result: OrderResultEnum;\r\n  customerName: string;\r\n  customerUnread: number;\r\n  supplierUnread: number;\r\n};\r\n\r\nexport type OrderNumberSortFieldsType =\r\n  | \"actualDate\"\r\n  | \"creationDate\"\r\n  | \"totalSum\";\r\nexport type OrderStringSortFieldsType = \"title\" | \"orderStatus\" | \"result\";\r\n\r\nexport enum OrderStatusEnum {\r\n  NEW = \"NEW\",\r\n  ARCHIVED = \"ARCHIVED\",\r\n  DELETED = \"DELETED\",\r\n}\r\nexport type OrderFieldsNameType =\r\n  | \"title\"\r\n  | \"totalSum\"\r\n  | \"comment\"\r\n  | \"description\";\r\n\r\nexport type AddOrderFormData = {\r\n  title: string;\r\n  comment: string;\r\n  totalSum: number;\r\n  categories: CategoryInType[];\r\n  contractors: ContractorInType[] | [];\r\n  attachments: AttachmentInType[];\r\n  customerId: number;\r\n  description?: string;\r\n  orderStatus?: string;\r\n};\r\nexport type DescriptionOrderFormData = {\r\n  title: string;\r\n  description?: string;\r\n  comment: string;\r\n  totalSum: number;\r\n};\r\n\r\nexport enum OrderResultEnum {\r\n  SUCCESS = \"SUCCESS\",\r\n  FAIL = \"FAIL\",\r\n  NONE = \"NONE\",\r\n}\r\n\r\nexport type OrderResultInType = {\r\n  OrderResult: OrderResultEnum;\r\n};\r\n\r\nexport type OrderResultOutType = {\r\n  OrderResult: OrderResultEnum;\r\n};\r\n\r\nexport type OrdersQueryFilterType = \"active\" | \"deleted\" | \"archived\" | null;\r\nexport type SortByOrdersFieldsType = \"title\" | \"totalSum\" | \"creationDate\";\r\n","import moment from \"moment\";\r\nimport { createSelector } from \"reselect\";\r\nimport {\r\n  ContractorsQueryFilterType,\r\n  ContractorTypesEnum,\r\n} from \"../../models/Contractors\";\r\nimport { AppStateType } from \"./../store\";\r\nimport { getMainCategoriesState } from \"./categories\";\r\n\r\nconst getContractorsState = (state: AppStateType) => state.contractors;\r\n\r\nexport const getContractorsListState = (state: AppStateType) =>\r\n  state.contractors.contractors;\r\n\r\nexport const getCurrentContractorState = (state: AppStateType) =>\r\n  getContractorsState(state).currentContractor;\r\n\r\nexport const getFilteredContractorsListState = (\r\n  searchText: string,\r\n  filter: ContractorsQueryFilterType,\r\n  categoryId: string | null\r\n) =>\r\n  createSelector([getContractorsListState], (contractors) => {\r\n    return contractors\r\n      ?.filter((contractor) => {\r\n        if (filter === \"deleted\") {\r\n          return contractor.isDeleted;\r\n        } else if (filter === \"customers\") {\r\n          return contractor.contractorType === ContractorTypesEnum.CUSTOMER;\r\n        } else if (filter === \"supplier\") {\r\n          return contractor.contractorType === ContractorTypesEnum.SUPPLIER;\r\n        }\r\n        return true;\r\n      })\r\n      ?.filter((contractor) =>\r\n        contractor.name.toLowerCase().includes(searchText.toLowerCase())\r\n      )\r\n      ?.filter((contractor) => {\r\n        if (categoryId) {\r\n          return Boolean(\r\n            contractor.categories.find((category) => {\r\n              return (\r\n                category.categoryId === Number(categoryId) ||\r\n                category.parentId === Number(categoryId)\r\n              );\r\n            })\r\n          );\r\n        }\r\n        return true;\r\n      });\r\n  });\r\n\r\nexport const getContractorsLoadingState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorsLoading;\r\nexport const getContractorsActionStatusState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorsActionStatus;\r\nexport const getContractorsErrorMessage = (state: AppStateType) =>\r\n  getContractorsState(state).errorMessage;\r\n\r\nexport const getContractorsCountState = createSelector(\r\n  [getFilteredContractorsListState(\"\", null, null)],\r\n  (contractors) => contractors?.length\r\n);\r\n\r\nexport const getCustomersCountState = createSelector(\r\n  [getFilteredContractorsListState(\"\", \"customers\", null)],\r\n  (contractors) => contractors?.length\r\n);\r\n\r\nexport const getSuppliersCountState = createSelector(\r\n  [getFilteredContractorsListState(\"\", \"supplier\", null)],\r\n  (contractors) => contractors?.length\r\n);\r\n\r\nexport const getDeletedContractorCountState = createSelector(\r\n  [getFilteredContractorsListState(\"\", \"deleted\", null)],\r\n  (contractors) => contractors?.length\r\n);\r\n\r\nexport const getContractorImagesState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorImages;\r\nexport const getContractorImageUploadingState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorImageUploading;\r\n\r\nexport const getContractorsByCategoriesState = createSelector(\r\n  [getMainCategoriesState, getContractorsListState],\r\n  (mainCategories, contractors) => {\r\n    if (mainCategories && contractors) {\r\n      const contractorsByCategories = mainCategories.map((category) => {\r\n        const contractorsByCurrentCategory = contractors.filter(\r\n          (contractor) => {\r\n            const wantedCategory = contractor.categories.find(\r\n              (contractorCategory) =>\r\n                contractorCategory.categoryId === category.id\r\n            );\r\n\r\n            if (wantedCategory) {\r\n              return true;\r\n            }\r\n            return false;\r\n          }\r\n        );\r\n\r\n        return {\r\n          categoryName: category.name,\r\n          contractorsCount: contractorsByCurrentCategory.length,\r\n        };\r\n      });\r\n      return contractorsByCategories;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n);\r\n\r\nexport const getContractorAvatarUploadingState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorAvatarUploading;\r\n\r\nexport const getContractorAvatarsState = (state: AppStateType) =>\r\n  getContractorsState(state).contractorAvatars;\r\n\r\nexport const getTodayContractorsCountState = createSelector(\r\n  [getContractorsListState],\r\n  (contractors) => {\r\n    if (contractors) {\r\n      const startDayTime = moment().startOf(\"day\").valueOf();\r\n      const endDayTime = moment().endOf(\"day\").valueOf();\r\n      const createdToday = contractors.filter((contractor) => {\r\n        return (\r\n          contractor.creationDate > startDayTime &&\r\n          contractor.creationDate < endDayTime\r\n        );\r\n      });\r\n      return createdToday.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n);\r\n","import React from \"react\";\r\nimport { PieChart, Pie, Sector, ResponsiveContainer } from \"recharts\";\r\nimport { Typography } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getContractorsCountState,\r\n  getCustomersCountState,\r\n  getDeletedContractorCountState,\r\n  getSuppliersCountState,\r\n} from \"../../../store/selectors/contractors\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst renderActiveShape = (props: any) => {\r\n  const RADIAN = Math.PI / 180;\r\n  const {\r\n    cx,\r\n    cy,\r\n    midAngle,\r\n    innerRadius,\r\n    outerRadius,\r\n    startAngle,\r\n    endAngle,\r\n    fill,\r\n    payload,\r\n    percent,\r\n    value,\r\n  } = props;\r\n\r\n  const sin = Math.sin(-RADIAN * midAngle);\r\n  const cos = Math.cos(-RADIAN * midAngle);\r\n  const sx = cx + (outerRadius + 10) * cos;\r\n  const sy = cy + (outerRadius + 10) * sin;\r\n  const mx = cx + (outerRadius + 30) * cos;\r\n  const my = cy + (outerRadius + 30) * sin;\r\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22;\r\n  const ey = my;\r\n  const textAnchor = cos >= 0 ? \"start\" : \"end\";\r\n  return (\r\n    <g>\r\n      <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>\r\n        {payload.name}\r\n      </text>\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        innerRadius={innerRadius}\r\n        outerRadius={outerRadius}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        fill={fill}\r\n      />\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        innerRadius={outerRadius + 6}\r\n        outerRadius={outerRadius + 10}\r\n        fill={fill}\r\n      />\r\n      <path\r\n        d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`}\r\n        stroke={fill}\r\n        fill=\"none\"\r\n      />\r\n      <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\" />\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        textAnchor={textAnchor}\r\n        fill=\"#333\"\r\n      >{`${payload.name} ${value} шт`}</text>\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        dy={18}\r\n        textAnchor={textAnchor}\r\n        fill=\"#999\"\r\n      >\r\n        {`${(percent * 100).toFixed(2)}%`}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst ContractorsStatistic = () => {\r\n  const [activeIndex, setActiveIndex] = React.useState<\r\n    number | number[] | undefined\r\n  >();\r\n\r\n  const onPieEnter = (_: any, index: number) => {\r\n    setActiveIndex(index);\r\n  };\r\n\r\n  const allContractorsCount = useSelector(getContractorsCountState);\r\n  const customersCount = useSelector(getCustomersCountState);\r\n  const suppliersCount = useSelector(getSuppliersCountState);\r\n  const deletedContractorsCount = useSelector(getDeletedContractorCountState);\r\n\r\n  const data = React.useMemo(() => {\r\n    return [\r\n      { name: \"Заказчиков\", value: customersCount ? customersCount : 0 },\r\n      { name: \"Поставщиков\", value: suppliersCount ? suppliersCount : 0 },\r\n      {\r\n        name: \"Удаленных\",\r\n        value: deletedContractorsCount ? deletedContractorsCount : 0,\r\n      },\r\n    ];\r\n  }, [customersCount, deletedContractorsCount, suppliersCount]);\r\n\r\n  return (\r\n    <div className=\"statistic__pie\">\r\n      <Text className=\"statistic__title\">Контрагенты</Text>\r\n      <Text className=\"statistic__pie-subtitle\">\r\n        Всего контрагентов: {allContractorsCount}\r\n      </Text>\r\n      {data && (\r\n        <ResponsiveContainer>\r\n          <PieChart width={400} height={400}>\r\n            <Pie\r\n              activeIndex={activeIndex}\r\n              activeShape={renderActiveShape}\r\n              data={data}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              innerRadius={60}\r\n              outerRadius={80}\r\n              fill=\"#8884d8\"\r\n              dataKey=\"value\"\r\n              onMouseEnter={onPieEnter}\r\n            />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContractorsStatistic;\r\n","import { createSelector } from \"reselect\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n  OrderResultEnum,\r\n  OrdersQueryFilterType,\r\n  OrderStatusEnum,\r\n} from \"../../models/Orders\";\r\n\r\nimport { AppStateType } from \"./../store\";\r\nimport { getMainCategoriesState } from \"./categories\";\r\n\r\nconst getOrdersState = (state: AppStateType) => state.orders;\r\nconst getOrdersListState = (state: AppStateType) => state.orders.orders;\r\n\r\nexport const getFilteredOrdersListState = (\r\n  searchText: string,\r\n  filter: OrdersQueryFilterType,\r\n  categoryId: string | null,\r\n  contractorId: string | null\r\n) =>\r\n  createSelector([getOrdersListState], (orders) => {\r\n    return orders\r\n      ?.filter((order) => {\r\n        if (filter === \"active\") {\r\n          return order.orderStatus === OrderStatusEnum.NEW;\r\n        } else if (filter === \"deleted\") {\r\n          return order.orderStatus === OrderStatusEnum.DELETED;\r\n        } else if (filter === \"archived\") {\r\n          return order.orderStatus === OrderStatusEnum.ARCHIVED;\r\n        }\r\n        return true;\r\n      })\r\n      ?.filter((order) =>\r\n        order.title.toLowerCase().includes(searchText.toLowerCase())\r\n      )\r\n      ?.filter((order) => {\r\n        if (categoryId) {\r\n          return Boolean(\r\n            order.categories.find((category) => {\r\n              return (\r\n                category.categoryId === Number(categoryId) ||\r\n                category.parentId === Number(categoryId)\r\n              );\r\n            })\r\n          );\r\n        }\r\n        return true;\r\n      })\r\n      ?.filter((order) => {\r\n        if (contractorId) {\r\n          return order.customerId === Number(contractorId);\r\n        }\r\n        return true;\r\n      });\r\n  });\r\n\r\nexport const getOrdersLoadingState = (state: AppStateType) =>\r\n  getOrdersState(state).ordersLoading;\r\n\r\nexport const getOrdersErrorMessageState = (state: AppStateType) =>\r\n  getOrdersState(state).errorMessage;\r\n\r\nexport const getOrderActionStatusState = (state: AppStateType) =>\r\n  getOrdersState(state).orderActionStatus;\r\n\r\nexport const getCurrentOrderState = (state: AppStateType) =>\r\n  getOrdersState(state).currentOrder;\r\n\r\nexport const getAllOrdersCountState = createSelector(\r\n  [getFilteredOrdersListState(\"\", null, null, null)],\r\n  (orders) => orders?.length\r\n);\r\n\r\nexport const getActiveOrdersCountState = createSelector(\r\n  [getFilteredOrdersListState(\"\", \"active\", null, null)],\r\n  (orders) => orders?.length\r\n);\r\n\r\nexport const getDeletedOrdersCountState = createSelector(\r\n  [getFilteredOrdersListState(\"\", \"deleted\", null, null)],\r\n  (orders) => orders?.length\r\n);\r\n\r\nexport const getHistoryOrdersCountState = createSelector(\r\n  [getFilteredOrdersListState(\"\", \"archived\", null, null)],\r\n  (orders) => orders?.length\r\n);\r\n\r\nexport const getTodayOrdersCountState = createSelector(\r\n  [getOrdersListState],\r\n  (orders) => {\r\n    if (orders) {\r\n      const startDayTime = moment().startOf(\"day\").valueOf();\r\n      const endDayTime = moment().endOf(\"day\").valueOf();\r\n      const createdToday = orders.filter((order) => {\r\n        return (\r\n          order.creationDate > startDayTime && order.creationDate < endDayTime\r\n        );\r\n      });\r\n      return createdToday.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n);\r\n\r\nexport const getTodayArchivedCountState = createSelector(\r\n  [getOrdersListState],\r\n  (orders) => {\r\n    if (orders) {\r\n      const startDayTime = moment().startOf(\"day\").valueOf();\r\n      const endDayTime = moment().endOf(\"day\").valueOf();\r\n      const archivedToday = orders.filter((order) => {\r\n        return order.actualDate > startDayTime && order.actualDate < endDayTime;\r\n      });\r\n      return archivedToday.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n);\r\n\r\nexport const getSuccessResultCount = createSelector(\r\n  [getFilteredOrdersListState(\"\", \"deleted\", null, null)],\r\n  (orders) => {\r\n    if (orders) {\r\n      const successCompleteOrders = orders.filter(\r\n        (order) => order.result === OrderResultEnum.SUCCESS\r\n      );\r\n      return successCompleteOrders.length;\r\n    }\r\n    return 0;\r\n  }\r\n);\r\n\r\nexport const getFailResultCount = createSelector(\r\n  [getFilteredOrdersListState(\"\", \"deleted\", null, null)],\r\n  (orders) => {\r\n    if (orders) {\r\n      const failCompleteOrders = orders.filter(\r\n        (order) => order.result === OrderResultEnum.FAIL\r\n      );\r\n      return failCompleteOrders.length;\r\n    }\r\n    return 0;\r\n  }\r\n);\r\n\r\nexport const getOrdersByCategoriesState = createSelector(\r\n  [getMainCategoriesState, getOrdersListState],\r\n  (mainCategories, orders) => {\r\n    if (mainCategories && orders) {\r\n      const ordersByCategories = mainCategories.map((category) => {\r\n        const ordersByCurrentCategory = orders.filter((order) => {\r\n          const wantedCategory = order.categories.find(\r\n            (orderCategory) => orderCategory.categoryId === category.id\r\n          );\r\n\r\n          if (wantedCategory) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n\r\n        return {\r\n          categoryName: category.name,\r\n          ordersCount: ordersByCurrentCategory.length,\r\n        };\r\n      });\r\n      return ordersByCategories;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n);\r\n\r\nexport const getOrderImagesState = (state: AppStateType) =>\r\n  getOrdersState(state).orderImages;\r\n\r\nexport const getOrderImagesLoadingState = (state: AppStateType) =>\r\n  getOrdersState(state).ordersLoading;\r\nexport const getOrderChatsState = (state: AppStateType) =>\r\n  getOrdersState(state).orderChats;\r\n","import React from \"react\";\r\nimport { PieChart, Pie, Sector, ResponsiveContainer } from \"recharts\";\r\nimport { Typography } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getActiveOrdersCountState,\r\n  getAllOrdersCountState,\r\n  getDeletedOrdersCountState,\r\n  getHistoryOrdersCountState,\r\n} from \"../../../store/selectors/orders\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst renderActiveShape = (props: any) => {\r\n  const RADIAN = Math.PI / 180;\r\n  const {\r\n    cx,\r\n    cy,\r\n    midAngle,\r\n    innerRadius,\r\n    outerRadius,\r\n    startAngle,\r\n    endAngle,\r\n    fill,\r\n    payload,\r\n    percent,\r\n    value,\r\n  } = props;\r\n\r\n  const sin = Math.sin(-RADIAN * midAngle);\r\n  const cos = Math.cos(-RADIAN * midAngle);\r\n  const sx = cx + (outerRadius + 10) * cos;\r\n  const sy = cy + (outerRadius + 10) * sin;\r\n  const mx = cx + (outerRadius + 30) * cos;\r\n  const my = cy + (outerRadius + 30) * sin;\r\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22;\r\n  const ey = my;\r\n  const textAnchor = cos >= 0 ? \"start\" : \"end\";\r\n  return (\r\n    <g>\r\n      <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>\r\n        {payload.name}\r\n      </text>\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        innerRadius={innerRadius}\r\n        outerRadius={outerRadius}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        fill={fill}\r\n      />\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        innerRadius={outerRadius + 6}\r\n        outerRadius={outerRadius + 10}\r\n        fill={fill}\r\n      />\r\n      <path\r\n        d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`}\r\n        stroke={fill}\r\n        fill=\"none\"\r\n      />\r\n      <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\" />\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        textAnchor={textAnchor}\r\n        fill=\"#333\"\r\n      >{`${payload.name} ${value} шт`}</text>\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        dy={18}\r\n        textAnchor={textAnchor}\r\n        fill=\"#999\"\r\n      >\r\n        {`${(percent * 100).toFixed(2)}%`}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst OrdersStatistic = () => {\r\n  const [activeIndex, setActiveIndex] = React.useState<\r\n    number | number[] | undefined\r\n  >();\r\n\r\n  const onPieEnter = (_: any, index: number) => {\r\n    setActiveIndex(index);\r\n  };\r\n\r\n  const allOrdersCount = useSelector(getAllOrdersCountState);\r\n  const activeOrdersCount = useSelector(getActiveOrdersCountState);\r\n  const deletedOrdersCount = useSelector(getDeletedOrdersCountState);\r\n  const historyOrdersCount = useSelector(getHistoryOrdersCountState);\r\n\r\n  const data = React.useMemo(() => {\r\n    return [\r\n      { name: \"Активных\", value: activeOrdersCount ? activeOrdersCount : 0 },\r\n      { name: \"Архивных\", value: historyOrdersCount ? historyOrdersCount : 0 },\r\n      {\r\n        name: \"Удаленных\",\r\n        value: deletedOrdersCount ? deletedOrdersCount : 0,\r\n      },\r\n    ];\r\n  }, [activeOrdersCount, deletedOrdersCount, historyOrdersCount]);\r\n\r\n  return (\r\n    <div className=\"statistic__pie\">\r\n      <Text className=\"statistic__title\">Заявки</Text>\r\n      <Text className=\"statistic__pie-subtitle\">\r\n        Всего заявок: {allOrdersCount}\r\n      </Text>\r\n      {data && (\r\n        <ResponsiveContainer>\r\n          <PieChart width={400} height={400}>\r\n            <Pie\r\n              activeIndex={activeIndex}\r\n              activeShape={renderActiveShape}\r\n              data={data}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              innerRadius={60}\r\n              outerRadius={80}\r\n              fill=\"#8884d8\"\r\n              dataKey=\"value\"\r\n              onMouseEnter={onPieEnter}\r\n            />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersStatistic;\r\n","import React from \"react\";\r\nimport { Card, Statistic } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from \"@ant-design/icons\";\r\n\r\nimport {\r\n  getFailResultCount,\r\n  getSuccessResultCount,\r\n  getTodayArchivedCountState,\r\n  getTodayOrdersCountState,\r\n} from \"../../../store/selectors/orders\";\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\";\r\n\r\nconst OrdersCounter = () => {\r\n  const createdTodayCount = useSelector(getTodayOrdersCountState);\r\n  const closedTodayCount = useSelector(getTodayArchivedCountState);\r\n  const successResultCount = useSelector(getSuccessResultCount);\r\n  const failResultCount = useSelector(getFailResultCount);\r\n\r\n  const { xl } = useBreakpoint();\r\n\r\n  return (\r\n    <div className=\"statistic__counters\">\r\n      <div className=\"counters\">\r\n        <Card className=\"counters__item\" bodyStyle={{ padding: xl ? 20 : 10 }}>\r\n          <Statistic\r\n            title=\"Заявок сегодня\"\r\n            value={createdTodayCount}\r\n            prefix={<ArrowUpOutlined />}\r\n            valueStyle={{ color: \"#3f8600\" }}\r\n          />\r\n        </Card>\r\n        <Card className=\"counters__item\" bodyStyle={{ padding: xl ? 20 : 10 }}>\r\n          <Statistic\r\n            title=\"Сегодня закроются\"\r\n            value={closedTodayCount}\r\n            prefix={<ArrowDownOutlined />}\r\n            valueStyle={{ color: \"#cf1322\" }}\r\n          />\r\n        </Card>\r\n        <Card className=\"counters__item\" bodyStyle={{ padding: xl ? 20 : 10 }}>\r\n          <Statistic\r\n            title=\"Удалось выполнить\"\r\n            value={successResultCount}\r\n            prefix={<ArrowUpOutlined />}\r\n            valueStyle={{ color: \"#3f8600\" }}\r\n          />\r\n        </Card>\r\n        <Card className=\"counters__item\" bodyStyle={{ padding: xl ? 20 : 10 }}>\r\n          <Statistic\r\n            title=\"Не удалось выполнить\"\r\n            value={failResultCount}\r\n            prefix={<ArrowDownOutlined />}\r\n            valueStyle={{ color: \"#cf1322\" }}\r\n          />\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersCounter;\r\n","import { Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  TooltipProps,\r\n} from \"recharts\";\r\nimport {\r\n  NameType,\r\n  ValueType,\r\n} from \"recharts/types/component/DefaultTooltipContent\";\r\nimport { getOrdersByCategoriesState } from \"../../../store/selectors/orders\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst CustomTooltip = ({\r\n  active,\r\n  payload,\r\n  label,\r\n}: TooltipProps<ValueType, NameType>) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"chart-categories__tooltip\">\r\n        <p className=\"chart-categories__tooltip-label\">{`${label} : ${payload[0].value} шт`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst OrdersByCategories = () => {\r\n  const ordersByCategories = useSelector(getOrdersByCategoriesState);\r\n\r\n  return (\r\n    <div className=\"statistic__chart-categories chart-categories\">\r\n      <Text className=\"statistic__title\">Заявки по категориям</Text>\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <BarChart\r\n          width={500}\r\n          height={300}\r\n          data={ordersByCategories}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"categoryName\" />\r\n          <YAxis />\r\n          <Tooltip content={<CustomTooltip />} />\r\n          <Legend />\r\n          <Bar\r\n            dataKey=\"ordersCount\"\r\n            name=\"Категории\"\r\n            barSize={20}\r\n            fill=\"#8884d8\"\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersByCategories;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Typography } from \"antd\";\r\n\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  TooltipProps,\r\n} from \"recharts\";\r\nimport {\r\n  NameType,\r\n  ValueType,\r\n} from \"recharts/types/component/DefaultTooltipContent\";\r\nimport { getContractorsByCategoriesState } from \"../../../store/selectors/contractors\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst CustomTooltip = ({\r\n  active,\r\n  payload,\r\n  label,\r\n}: TooltipProps<ValueType, NameType>) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"chart-categories__tooltip\">\r\n        <p className=\"chart-categories__tooltip-label\">{`${label} : ${payload[0].value} шт`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst ContractorsByCategories = () => {\r\n  const contractorsByCategories = useSelector(getContractorsByCategoriesState);\r\n\r\n  return (\r\n    <div className=\"statistic__chart-categories\">\r\n      <Text className=\"statistic__title\">Контрагенты по категориям</Text>\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <BarChart\r\n          width={500}\r\n          height={300}\r\n          data={contractorsByCategories}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"categoryName\" />\r\n          <YAxis />\r\n          <Tooltip content={<CustomTooltip />} />\r\n          <Legend />\r\n          <Bar\r\n            dataKey=\"contractorsCount\"\r\n            name=\"Категории\"\r\n            barSize={20}\r\n            fill=\"#8884d8\"\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContractorsByCategories;\r\n","import React from \"react\";\r\nimport { Card, Statistic } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ArrowUpOutlined } from \"@ant-design/icons\";\r\n\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\";\r\nimport { getTodayContractorsCountState } from \"../../../store/selectors/contractors\";\r\n\r\nconst ContractorsCounter = () => {\r\n  const createdTodayCount = useSelector(getTodayContractorsCountState);\r\n\r\n  const { xl } = useBreakpoint();\r\n\r\n  return (\r\n    <div className=\"statistic__counters\">\r\n      <div className=\"counters\">\r\n        <Card className=\"counters__item\" bodyStyle={{ padding: xl ? 20 : 10 }}>\r\n          <Statistic\r\n            title=\"Зарегистрировались сегодня\"\r\n            value={createdTodayCount}\r\n            prefix={<ArrowUpOutlined />}\r\n            valueStyle={{ color: \"#3f8600\" }}\r\n          />\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContractorsCounter;\r\n","import { axios } from \"../api/axios\";\r\nimport {\r\n  AddContractorFormDataType,\r\n  ContractorType,\r\n} from \"../models/Contractors\";\r\n\r\nexport const contractorsApi = {\r\n  // contractors\r\n  getContractors: async (): Promise<ContractorType[]> => {\r\n    const { data } = await axios.get<ContractorType[]>(\"contractors\");\r\n    return data;\r\n  },\r\n  createContractor: async (\r\n    formData: AddContractorFormDataType\r\n  ): Promise<ContractorType[]> => {\r\n    const { data } = await axios.post<ContractorType[]>(\r\n      \"/admins/contractors\",\r\n      formData\r\n    );\r\n    return data;\r\n  },\r\n\r\n  // contractors/${id}\r\n\r\n  updateContractor: async (\r\n    formData: AddContractorFormDataType,\r\n    id: number\r\n  ): Promise<ContractorType[]> => {\r\n    const { data } = await axios.patch(`/contractors/${id}`, formData);\r\n    return data;\r\n  },\r\n  deleteContractor: async (contractorId: number): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(\r\n      `/contractors/${contractorId}`\r\n    );\r\n    return data;\r\n  },\r\n\r\n  // contractors/${id}\r\n\r\n  getContractorById: async (\r\n    contractorId: number\r\n  ): Promise<ContractorType[]> => {\r\n    const { data } = await axios.get<ContractorType[]>(\r\n      `/contractors/${contractorId}`\r\n    );\r\n    return data;\r\n  },\r\n\r\n  // contractors/{orderId}/attachments/{attachmentId}\r\n\r\n  removeContractorAttachment: async (\r\n    contractorId: number,\r\n    attachmentId: number\r\n  ): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(\r\n      `/contractors/${contractorId}/attachments/${attachmentId}`\r\n    );\r\n    return data;\r\n  },\r\n};\r\n","import { axios } from \"../api/axios\";\r\nimport { AttachmentOutType } from \"../models/Attachments\";\r\n\r\nexport const attachmentsApi = {\r\n  addAttachment: async (file: File): Promise<AttachmentOutType[]> => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    const { data } = await axios.post<AttachmentOutType[]>(\r\n      \"attachments\",\r\n      formData\r\n    );\r\n    return data;\r\n  },\r\n  removeAttachment: async (id: number): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(`attachments/${id}`);\r\n    return data;\r\n  },\r\n};\r\n","import { AttachmentOutType } from \"./../../models/Attachments\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { ActionsCreatorsTypes } from \"../../models/types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppStateType } from \"../store\";\r\nimport { Dispatch } from \"redux\";\r\nimport { contractorsApi } from \"../../services/contractorsApi\";\r\nimport { AttachmentType } from \"../../models/Attachments\";\r\nimport { attachmentsApi } from \"../../services/attachmentsApi\";\r\nimport {\r\n  AddContractorFormDataType,\r\n  ContractorType,\r\n} from \"../../models/Contractors\";\r\n\r\nexport const contractorActions = {\r\n  setCurrentContractor: (currentContractor: ContractorType | null) => {\r\n    return {\r\n      type: \"SET_CURRENT_CONTRACTOR\",\r\n      payload: { currentContractor },\r\n    } as const;\r\n  },\r\n  setContractorsLoading: (contractorsLoading: boolean) => {\r\n    return {\r\n      type: \"SET_CONTRACTORS_LOADING\",\r\n      payload: { contractorsLoading },\r\n    } as const;\r\n  },\r\n  setContractorsActionstatus: (contractorsActionStatus: ActionStatusEnum) => {\r\n    return {\r\n      type: \"SET_CONTRACTORS_ACTION_STATUS\",\r\n      payload: { contractorsActionStatus },\r\n    } as const;\r\n  },\r\n  setContractorsErrorMessage: (errorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_CONTRACTORS_ERROR_MESSAGE\",\r\n      payload: { errorMessage },\r\n    } as const;\r\n  },\r\n  setContractors: (contractors: ContractorType[]) => {\r\n    return {\r\n      type: \"SET_CONTRACTORS\",\r\n      payload: { contractors },\r\n    } as const;\r\n  },\r\n  removeContractor: (contractorId: number) => {\r\n    return {\r\n      type: \"REMOVE_CONTRACTOR\",\r\n      payload: { contractorId },\r\n    } as const;\r\n  },\r\n  setContractorImageUploading: (contractorImageUploading: boolean) => {\r\n    return {\r\n      type: \"SET_CONTRACTOR_IMAGE_UPLOADING\",\r\n      payload: { contractorImageUploading },\r\n    } as const;\r\n  },\r\n  setContractorAvatarUploading: (contractorAvatarUploading: boolean) => {\r\n    return {\r\n      type: \"SET_CONTRACTOR_AVATAR_UPLOADING\",\r\n      payload: { contractorAvatarUploading },\r\n    } as const;\r\n  },\r\n  setContractorImages: (images: AttachmentOutType[]) => {\r\n    return {\r\n      type: \"SET_CONTRACTOR_IMAGES\",\r\n      payload: { images },\r\n    } as const;\r\n  },\r\n  addContractorImage: (images: AttachmentOutType[]) => {\r\n    return {\r\n      type: \"ADD_CONTRACTOR_IMAGE\",\r\n      payload: { images },\r\n    } as const;\r\n  },\r\n  addContractorAvatar: (images: AttachmentOutType[]) => {\r\n    return {\r\n      type: \"ADD_CONTRACTOR_AVATARS\",\r\n      payload: { images },\r\n    } as const;\r\n  },\r\n  removeContractorImage: (imageId: number) => {\r\n    return {\r\n      type: \"REMOVE_CONTRACTOR_IMAGE\",\r\n      payload: { imageId },\r\n    } as const;\r\n  },\r\n  removeContractorAvatar: (imageId: number) => {\r\n    return {\r\n      type: \"REMOVE_CONTRACTOR_AVATAR\",\r\n      payload: { imageId },\r\n    } as const;\r\n  },\r\n  clearContractorImages: () => {\r\n    return {\r\n      type: \"CLEAR_CONTRACTOR_IMAGES\",\r\n    } as const;\r\n  },\r\n};\r\n\r\nconst showError = (text: string, dispatch: Dispatch) => {\r\n  dispatch(\r\n    contractorActions.setContractorsActionstatus(ActionStatusEnum.ERROR)\r\n  );\r\n  dispatch(contractorActions.setContractorsErrorMessage(text));\r\n};\r\n\r\nexport const createContractorProfile =\r\n  (formData: AddContractorFormDataType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorsLoading(true));\r\n      const contractorsList = await contractorsApi.createContractor(formData);\r\n\r\n      if (contractorsList.length > 0) {\r\n        dispatch(\r\n          contractorActions.setContractorsActionstatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(contractorActions.setCurrentContractor(contractorsList[0]));\r\n      } else {\r\n        showError(\"Не удалось создать профиль, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"createContractorProfile ERROR ===>\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorsLoading(false));\r\n    }\r\n  };\r\n\r\nexport const getContractors = (): ThunkAcionType => async (dispatch) => {\r\n  try {\r\n    dispatch(contractorActions.setContractorsLoading(true));\r\n    const contractors = await contractorsApi.getContractors();\r\n    dispatch(contractorActions.setContractors(contractors));\r\n  } catch (error) {\r\n    console.log(\"getContracors ===> \", error);\r\n    showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n  } finally {\r\n    dispatch(contractorActions.setContractorsLoading(false));\r\n  }\r\n};\r\n\r\nexport const deleteContractor =\r\n  (contractorId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorsLoading(true));\r\n      const response = await contractorsApi.deleteContractor(contractorId);\r\n      if (response) {\r\n        dispatch(\r\n          contractorActions.setContractorsActionstatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(contractorActions.removeContractor(contractorId));\r\n        dispatch(contractorActions.setCurrentContractor(null));\r\n      } else {\r\n        showError(\r\n          \"Не удалось удалить контрагента, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"deleteContractor ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorsLoading(false));\r\n    }\r\n  };\r\n\r\nexport const updateContractor =\r\n  (contractor: AddContractorFormDataType, id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorsLoading(true));\r\n      const contractors = await contractorsApi.updateContractor(contractor, id);\r\n      if (contractors.length > 0) {\r\n        dispatch(\r\n          contractorActions.setContractorsActionstatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(contractorActions.clearContractorImages());\r\n        dispatch(contractorActions.setCurrentContractor(contractors[0]));\r\n      } else {\r\n        showError(\r\n          \"Не удалось сохранить изменения, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getContracors ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorsLoading(false));\r\n    }\r\n  };\r\n\r\nexport const getContractorById =\r\n  (contractorId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorsLoading(true));\r\n      const contractors = await contractorsApi.getContractorById(contractorId);\r\n      if (contractors.length === 0) {\r\n        showError(\"Контрагент не найден\", dispatch);\r\n      } else {\r\n        dispatch(contractorActions.setCurrentContractor(contractors[0]));\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getFullContractorInfo ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorsLoading(false));\r\n    }\r\n  };\r\n\r\nexport const addContractorImage =\r\n  (image: File): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorImageUploading(true));\r\n      const imageOut = await attachmentsApi.addAttachment(image);\r\n\r\n      if (imageOut.length > 0) {\r\n        dispatch(contractorActions.addContractorImage(imageOut));\r\n      } else {\r\n        showError(\r\n          \"Не удалось загрузить вложение, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"addContractorImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const addContractorAvatar =\r\n  (image: File): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorAvatarUploading(true));\r\n      const imageOut = await attachmentsApi.addAttachment(image);\r\n\r\n      if (imageOut.length > 0) {\r\n        dispatch(contractorActions.addContractorAvatar(imageOut));\r\n      } else {\r\n        showError(\r\n          \"Не удалось загрузить вложение, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"addContractorImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorAvatarUploading(false));\r\n    }\r\n  };\r\n\r\nexport const removeContractorImage =\r\n  (contractorId: number, imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorImageUploading(true));\r\n\r\n      const response = await contractorsApi.removeContractorAttachment(\r\n        contractorId,\r\n        imageId\r\n      );\r\n\r\n      if (response) {\r\n        dispatch(contractorActions.removeContractorImage(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"removeContractorImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const removeContractorAvatar =\r\n  (contractorId: number, imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorAvatarUploading(true));\r\n\r\n      const response = await contractorsApi.removeContractorAttachment(\r\n        contractorId,\r\n        imageId\r\n      );\r\n\r\n      if (response) {\r\n        dispatch(contractorActions.removeContractorAvatar(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"removeContractorImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorAvatarUploading(false));\r\n    }\r\n  };\r\n\r\nexport const removeNewContractorImage =\r\n  (imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorImageUploading(true));\r\n\r\n      const response = await attachmentsApi.removeAttachment(imageId);\r\n\r\n      if (response) {\r\n        dispatch(contractorActions.removeContractorImage(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"removeNewContractorImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorImageUploading(false));\r\n    }\r\n  };\r\nexport const removeNewContractorAvatar =\r\n  (imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(contractorActions.setContractorAvatarUploading(true));\r\n\r\n      const response = await attachmentsApi.removeAttachment(imageId);\r\n\r\n      if (response) {\r\n        dispatch(contractorActions.removeContractorAvatar(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"removeNewContractorImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(contractorActions.setContractorAvatarUploading(false));\r\n    }\r\n  };\r\nexport type ContractorsActionTypes = ReturnType<\r\n  ActionsCreatorsTypes<typeof contractorActions>\r\n>;\r\n\r\ntype ThunkAcionType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  ContractorsActionTypes\r\n>;\r\n","import { axios } from \"../api/axios\";\r\nimport { AddOrderFormData, OrderType } from \"../models/Orders\";\r\n\r\nexport const ordersApi = {\r\n  // orders\r\n\r\n  getOrders: async (): Promise<OrderType[]> => {\r\n    const { data } = await axios.get<OrderType[]>(\"orders\");\r\n    return data;\r\n  },\r\n  createOrder: async (formData: AddOrderFormData): Promise<OrderType[]> => {\r\n    const { data } = await axios.post<OrderType[]>(\"orders\", formData);\r\n    return data;\r\n  },\r\n\r\n  // orders/${id}\r\n\r\n  getOrderById: async (orderId: number): Promise<OrderType[]> => {\r\n    const { data } = await axios.get<OrderType[]>(`/orders/${orderId}`);\r\n    return data;\r\n  },\r\n  deleteOrder: async (orderId: number): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(`/orders/${orderId}`);\r\n    return data;\r\n  },\r\n  updateOrder: async (\r\n    order: AddOrderFormData,\r\n    id: number\r\n  ): Promise<OrderType[]> => {\r\n    const { data } = await axios.patch<OrderType[]>(`/orders/${id}`, order);\r\n    return data;\r\n  },\r\n\r\n  // orders/{orderId}/attachments/{attachmentId}\r\n\r\n  removeOrderAttachment: async (\r\n    orderId: number,\r\n    attachmentId: number\r\n  ): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(\r\n      `/orders/${orderId}/attachments/${attachmentId}`\r\n    );\r\n    return data;\r\n  },\r\n};\r\n","import { axios } from \"../api/axios\";\r\nimport { ChatMessageOutType, ChatType } from \"../models/Chats\";\r\n\r\nexport const chatsApi = {\r\n  // chats/{orderId}\r\n\r\n  getOrderChats: async (orderId: number): Promise<ChatType[]> => {\r\n    const { data } = await axios.get<ChatType[]>(`/chats/${orderId}`);\r\n    return data;\r\n  },\r\n\r\n  // chats/{orderId}/{chatId}\r\n\r\n  getAllChatMessage: async (\r\n    orderId: number,\r\n    chatId: number\r\n  ): Promise<ChatMessageOutType[]> => {\r\n    const { data } = await axios.get<ChatMessageOutType[]>(\r\n      `chats/${orderId}/${chatId}`\r\n    );\r\n    return data;\r\n  },\r\n};\r\n","import { ActionStatusEnum } from \"../../models/types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { ActionsCreatorsTypes } from \"../../models/types\";\r\nimport { AppStateType } from \"../store\";\r\nimport { ordersApi } from \"../../services/ordersApi\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AttachmentOutType, AttachmentType } from \"../../models/Attachments\";\r\nimport { attachmentsApi } from \"../../services/attachmentsApi\";\r\nimport { AddOrderFormData, OrderType } from \"../../models/Orders\";\r\nimport { ChatType } from \"../../models/Chats\";\r\nimport { chatsApi } from \"../../services/chatsApi\";\r\n\r\nexport const ordersActions = {\r\n  setOrders: (orders: OrderType[]) => {\r\n    return {\r\n      type: \"SET_ORDERS\",\r\n      payload: { orders },\r\n    } as const;\r\n  },\r\n  setOrdersLoading: (ordersLoading: boolean) => {\r\n    return {\r\n      type: \"SET_ORDERS_LOADING\",\r\n      payload: { ordersLoading },\r\n    } as const;\r\n  },\r\n  setOrdersErrorMessage: (errorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_ORDERS_ERROR\",\r\n      payload: { errorMessage },\r\n    } as const;\r\n  },\r\n  setOrderActionStatus: (orderActionStatus: ActionStatusEnum) => {\r\n    return {\r\n      type: \"SET_ORDER_ACTION_STATUS\",\r\n      payload: { orderActionStatus },\r\n    } as const;\r\n  },\r\n  setCurrentOrder: (currentOrder: OrderType | null) => {\r\n    return {\r\n      type: \"SET_CURRENT_ORDER\",\r\n      payload: { currentOrder },\r\n    } as const;\r\n  },\r\n  replaceOrder: (order: OrderType) => {\r\n    return {\r\n      type: \"REPLACE_ORDER\",\r\n      payload: { order },\r\n    } as const;\r\n  },\r\n  removeOrder: (id: number) => {\r\n    return {\r\n      type: \"REMOVE_ORDER\",\r\n      payload: { id },\r\n    } as const;\r\n  },\r\n  addNewOrder: (order: OrderType) => {\r\n    return {\r\n      type: \"ADD_NEW_ORDER\",\r\n      payload: { order },\r\n    } as const;\r\n  },\r\n  updateOrder: (order: OrderType) => {\r\n    return {\r\n      type: \"UPDATE_ORDER\",\r\n      payload: { order },\r\n    } as const;\r\n  },\r\n  setOrderImageUploading: (orderImageUploading: boolean) => {\r\n    return {\r\n      type: \"SET_ORDER_IMAGE_UPLOADING\",\r\n      payload: { orderImageUploading },\r\n    } as const;\r\n  },\r\n  addOrderImage: (images: AttachmentOutType[]) => {\r\n    return {\r\n      type: \"ADD_ORDER_IMAGE\",\r\n      payload: { images },\r\n    } as const;\r\n  },\r\n  setOrderImages: (images: AttachmentOutType[]) => {\r\n    return {\r\n      type: \"SET_ORDER_IMAGES\",\r\n      payload: { images },\r\n    } as const;\r\n  },\r\n  removeOrderImage: (imageId: number) => {\r\n    return {\r\n      type: \"REMOVE_ORDER_IMAGE\",\r\n      payload: { imageId },\r\n    } as const;\r\n  },\r\n  clearOrderImages: () => {\r\n    return {\r\n      type: \"CLEAR_ORDER_IMAGES\",\r\n    } as const;\r\n  },\r\n  setOrderChats: (orderChats: ChatType[] | null) => {\r\n    return {\r\n      type: \"SET_ORDER_CHATS\",\r\n      payload: { orderChats },\r\n    } as const;\r\n  },\r\n};\r\n\r\nconst showError = (text: string, dispatch: Dispatch) => {\r\n  dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.ERROR));\r\n  dispatch(ordersActions.setOrdersErrorMessage(text));\r\n};\r\n\r\nexport const getOrders = (): ThunkAcionType => async (dispatch) => {\r\n  try {\r\n    dispatch(ordersActions.setOrdersLoading(true));\r\n    const orders = await ordersApi.getOrders();\r\n    dispatch(ordersActions.setOrders(orders));\r\n  } catch (error) {\r\n    console.log(\"getOrders ===> \", error);\r\n    showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n  } finally {\r\n    dispatch(ordersActions.setOrdersLoading(false));\r\n  }\r\n};\r\n\r\nexport const createOrder =\r\n  (formData: AddOrderFormData): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      const orders = await ordersApi.createOrder(formData);\r\n      if (orders.length > 0) {\r\n        dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.SUCCESS));\r\n        dispatch(ordersActions.setCurrentOrder(orders[0]));\r\n        dispatch(ordersActions.addNewOrder(orders[0]));\r\n      } else {\r\n        showError(\"Не удалось создать заявку, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"createOrder ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    }\r\n  };\r\n\r\nexport const updateOrder =\r\n  (order: AddOrderFormData, id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrdersLoading(true));\r\n      const orders = await ordersApi.updateOrder(order, id);\r\n      if (orders.length > 0) {\r\n        dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.SUCCESS));\r\n        dispatch(ordersActions.clearOrderImages());\r\n        dispatch(ordersActions.setCurrentOrder(orders[0]));\r\n      } else {\r\n        showError(\r\n          \"Не удалось сохранить изменения, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"updateOrder ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrdersLoading(false));\r\n    }\r\n  };\r\n\r\nexport const deleteOrder =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrdersLoading(true));\r\n      const response = await ordersApi.deleteOrder(id);\r\n      if (response) {\r\n        dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.SUCCESS));\r\n        dispatch(ordersActions.removeOrder(id));\r\n        dispatch(ordersActions.setCurrentOrder(null));\r\n      } else {\r\n        showError(\"Не удалось удалить заявку, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"deleteOrder ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrdersLoading(false));\r\n    }\r\n  };\r\n\r\nexport const getOrderById =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrdersLoading(true));\r\n      const orders = await ordersApi.getOrderById(id);\r\n      if (orders.length === 0) {\r\n        showError(\"Заявка не найдена\", dispatch);\r\n      } else {\r\n        dispatch(ordersActions.setCurrentOrder(orders[0]));\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getFullOrderInfo ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrdersLoading(false));\r\n    }\r\n  };\r\n\r\nexport const addOrderImage =\r\n  (image: File): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrderImageUploading(true));\r\n      const imageOut = await attachmentsApi.addAttachment(image);\r\n\r\n      if (imageOut.length > 0) {\r\n        dispatch(ordersActions.addOrderImage(imageOut));\r\n      } else {\r\n        showError(\r\n          \"Не удалось загрузить вложение, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"addOrderImage ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrderImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const removeOrderImage =\r\n  (orderId: number, imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrderImageUploading(true));\r\n\r\n      const response = await ordersApi.removeOrderAttachment(orderId, imageId);\r\n\r\n      if (response) {\r\n        dispatch(ordersActions.removeOrderImage(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getFullOrderInfo ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrderImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const removeNewOrderImage =\r\n  (imageId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrderImageUploading(true));\r\n\r\n      const response = await attachmentsApi.removeAttachment(imageId);\r\n\r\n      if (response) {\r\n        dispatch(ordersActions.removeOrderImage(imageId));\r\n      } else {\r\n        showError(\"Не удалось удалить вложение, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getFullOrderInfo ===> \", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrderImageUploading(false));\r\n    }\r\n  };\r\n\r\nexport const getOrderChats =\r\n  (orderId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(ordersActions.setOrdersLoading(true));\r\n\r\n      const chats = await chatsApi.getOrderChats(orderId);\r\n\r\n      if (chats) {\r\n        dispatch(ordersActions.setOrderChats(chats));\r\n      } else {\r\n        showError(\"Ошибка, попробуйте еще раз\", dispatch);\r\n      }\r\n    } catch (error) {\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(ordersActions.setOrdersLoading(false));\r\n    }\r\n  };\r\n\r\nexport type OrdersActionTypes = ReturnType<\r\n  ActionsCreatorsTypes<typeof ordersActions>\r\n>;\r\n\r\ntype ThunkAcionType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  OrdersActionTypes\r\n>;\r\n","import React from \"react\";\r\nimport { Card, Layout, Typography } from \"antd\";\r\nimport {\r\n  ContractorsByCategories,\r\n  ContractorsCounter,\r\n  ContractorsStatistic,\r\n  OrdersByCategories,\r\n  OrdersCounter,\r\n  OrdersStatistic,\r\n} from \"./components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppPreloader } from \"../../components\";\r\nimport { getContractorsLoadingState } from \"../../store/selectors/contractors\";\r\nimport { getContractors } from \"../../store/actions/contractors\";\r\nimport { getOrders } from \"../../store/actions/orders\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst { Content } = Layout;\r\n\r\nconst HomePage = () => {\r\n  const contractorsLoading = useSelector(getContractorsLoadingState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getContractors());\r\n    dispatch(getOrders());\r\n  }, [dispatch]);\r\n\r\n  if (contractorsLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <Card>\r\n        <Title className=\"title\">Статистика</Title>\r\n        <div className=\"statistic\">\r\n          <div className=\"statistic__left-side\">\r\n            <OrdersStatistic />\r\n            <OrdersByCategories />\r\n            <OrdersCounter />\r\n          </div>\r\n          <div className=\"statistic__right-side\">\r\n            <ContractorsStatistic />\r\n            <ContractorsByCategories />\r\n            <ContractorsCounter />\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { message } from \"antd\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/ru\";\r\nimport { AttachmentType } from \"../models/Attachments\";\r\nimport getBase64 from \"./getBase64\";\r\nmoment.locale(\"ru\");\r\n\r\nexport const formatDate = (date: number) => {\r\n  return moment(date).format(\"DD.MM.YYYY\");\r\n};\r\n\r\nexport const formatDateWithTime = (date: number) => {\r\n  return moment(date).format(\"DD.MM.YYYY hh:mm\");\r\n};\r\n\r\nexport const truncateString = (str: string, n: number) => {\r\n  return str.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n};\r\nexport const getDateFromNow = (date: number) => {\r\n  return moment(date).fromNow();\r\n};\r\n\r\nexport const convertingImage = async (e: Event) => {\r\n  const target = e.currentTarget as HTMLInputElement;\r\n  const file = target.files?.[0];\r\n\r\n  if (file) {\r\n    if (\r\n      file.type !== \"image/png\" &&\r\n      file.type !== \"image/jpeg\" &&\r\n      file.type !== \"image/jpg\"\r\n    ) {\r\n      return message.error(`${file.name} не является картинкой`);\r\n    } else {\r\n      const base64 = await getBase64(file);\r\n      const ext = file.name.split(\".\").pop();\r\n      const name = file.name;\r\n\r\n      if (base64 && ext && name) {\r\n        const image: AttachmentType = {\r\n          name: name,\r\n          ext: ext,\r\n          content: base64.split(\",\")[1],\r\n        };\r\n        return image;\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { AttachmentOutType } from \"./Attachments\";\r\nimport { OrderStatusEnum } from \"./Orders\";\r\n\r\nexport type ChatType = {\r\n  id: number;\r\n  orderId: number;\r\n  supplierId: number;\r\n  customerId: number;\r\n  supplierName: string;\r\n  customerName: string;\r\n  orderTitle: string;\r\n  lastMessage: string;\r\n  orderStatus: OrderStatusEnum;\r\n  customerAvatar: AttachmentOutType;\r\n  supplierAvatar: AttachmentOutType;\r\n  supplierUnread: number;\r\n  customerUnread: number;\r\n  lastMessageDate: number;\r\n  isDeletedBySupplier: boolean;\r\n  deletedBySupplierAt: number;\r\n  isDeletedByCustomer: boolean;\r\n  deletedByCustomerAt: number;\r\n};\r\nexport type ChatInType = {\r\n  supplierId: number;\r\n  customerId: number;\r\n};\r\n\r\nexport enum ChatMessageEnum {\r\n  TEXT = \"TEXT\",\r\n  ATTACHMENT = \"ATTACHMENT\",\r\n  SYSTEM = \"SYSTEM\",\r\n}\r\n\r\nexport enum ChatTypesMessageEnum {\r\n  TEXT = \"TEXT\",\r\n  ATTACHMENT = \"ATTACHMENT\",\r\n  SYSTEM = \"SYSTEM\",\r\n  ADD_CHAT = \"ADD_CHAT\",\r\n}\r\n\r\nexport enum ChatMessageAttachmentTypesEnum {\r\n  DOCUMENT = \"DOCUMENT\",\r\n  PICTURE = \"PICTURE\",\r\n  VIDEO = \"VIDEO\",\r\n  NONE = \"NONE\",\r\n}\r\n\r\nexport type ChatMessageInType = {\r\n  chatId: number;\r\n  text: string;\r\n  type?: ChatTypesMessageEnum;\r\n  attachmentType: ChatMessageAttachmentTypesEnum;\r\n};\r\n\r\nexport type ChatMessageOutType = {\r\n  id: number;\r\n  chatId: number;\r\n  senderId: number;\r\n  recipientId: number;\r\n  type: ChatTypesMessageEnum;\r\n  timeStamp: number;\r\n  text: string;\r\n  senderName: string;\r\n  recipientName: string;\r\n  isDelivered: boolean;\r\n  isRead: boolean;\r\n  attachmentType: ChatMessageAttachmentTypesEnum;\r\n  attachmentName: string;\r\n  isDeleted: boolean;\r\n};\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { Layout, Table, Tag, Button, Space, BackTop } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ReloadOutlined } from \"@ant-design/icons\";\r\n\r\nimport {\r\n  getOrderActionStatusState,\r\n  getOrdersErrorMessageState,\r\n  getFilteredOrdersListState,\r\n  getOrdersLoadingState,\r\n} from \"../../store/selectors/orders\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport {\r\n  deleteOrder,\r\n  getOrders,\r\n  ordersActions,\r\n} from \"../../store/actions/orders\";\r\nimport { AppAlert, AppPreloader, AppSearchField } from \"../../components\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  OrderNumberSortFieldsType,\r\n  OrderResultEnum,\r\n  OrdersQueryFilterType,\r\n  OrderStatusEnum,\r\n  OrderStringSortFieldsType,\r\n  OrderType,\r\n} from \"../../models/Orders\";\r\nimport { formatDate, truncateString } from \"../../utils/formatter\";\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\";\r\n\r\nconst { Content } = Layout;\r\nconst { Column } = Table;\r\n\r\nconst getNumberSorter = (fieldName: OrderNumberSortFieldsType) => ({\r\n  compare: (a: OrderType, b: OrderType) => a[fieldName] - b[fieldName],\r\n});\r\n\r\nconst getStringSorter = (fieldName: OrderStringSortFieldsType) => ({\r\n  compare: (a: OrderType, b: OrderType) =>\r\n    a[fieldName].localeCompare(b[fieldName]),\r\n});\r\n\r\nconst getResultText = (result: OrderResultEnum) => {\r\n  switch (result) {\r\n    case OrderResultEnum.FAIL: {\r\n      return \"Не удалось выполнить\";\r\n    }\r\n\r\n    case OrderResultEnum.SUCCESS: {\r\n      return \"Удалось выполнить\";\r\n    }\r\n\r\n    default: {\r\n      return \"Не выбрано\";\r\n    }\r\n  }\r\n};\r\n\r\nconst OrdersPage = () => {\r\n  const [searchText, setSearchText] = React.useState<string>(\"\");\r\n\r\n  const useQuery = () => {\r\n    return new URLSearchParams(useLocation().search);\r\n  };\r\n  const query = useQuery();\r\n  const { xxl } = useBreakpoint();\r\n\r\n  const orders = useSelector(\r\n    getFilteredOrdersListState(\r\n      searchText,\r\n      query.get(\"filter\") as OrdersQueryFilterType,\r\n      query.get(\"category\"),\r\n      query.get(\"contractor\")\r\n    )\r\n  );\r\n  const ordersLoading = useSelector(getOrdersLoadingState);\r\n  const ordersError = useSelector(getOrdersErrorMessageState);\r\n  const orderActionStatus = useSelector(getOrderActionStatusState);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER));\r\n    dispatch(ordersActions.setOrdersErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  const fetchData = React.useCallback(() => {\r\n    dispatch(getOrders());\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getOrders());\r\n    return () => {\r\n      clearState();\r\n    };\r\n  }, [dispatch, clearState]);\r\n\r\n  const handleDeleteOrder = (id: number) => {\r\n    const answer = window.confirm(\"Вы уверены что хотите удалить заявку?\");\r\n    if (answer) {\r\n      dispatch(deleteOrder(id));\r\n    }\r\n  };\r\n\r\n  const handleViewOrder = (order: OrderType) => {\r\n    history.push(`/orders/${order.id}`);\r\n  };\r\n\r\n  const addFilterByCategory = (categoryId: number) => {\r\n    history.push({\r\n      pathname: \"/orders\",\r\n      search: `?category=${categoryId}`,\r\n    });\r\n  };\r\n\r\n  const handleChangeSearchText = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.currentTarget.value);\r\n  };\r\n\r\n  if (ordersLoading) {\r\n    return <AppPreloader size=\"large\" />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={ordersError}\r\n        successMessage=\"Заявка успешно удалена\"\r\n        status={orderActionStatus}\r\n      />\r\n      <div className=\"orders__header\">\r\n        <AppSearchField\r\n          value={searchText}\r\n          onChange={handleChangeSearchText}\r\n          placeholder=\"Найти по заголовку\"\r\n        />\r\n\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<ReloadOutlined />}\r\n          size=\"large\"\r\n          onClick={fetchData}\r\n        />\r\n      </div>\r\n      <Table\r\n        pagination={{ position: [\"topRight\", \"bottomRight\"] }}\r\n        showSorterTooltip={false}\r\n        dataSource={orders}\r\n        rowKey={\"id\"}\r\n        size={xxl ? \"middle\" : \"small\"}\r\n        expandable={{\r\n          expandedRowRender: (order) => (\r\n            <div className=\"order__expanded\">\r\n              <p className=\"order__tab-descr table-value\">\r\n                {order.description}\r\n              </p>\r\n              <div className=\"order__expanded-action\">\r\n                <Button\r\n                  className=\"order__expanded-btn table-value\"\r\n                  onClick={() => handleViewOrder(order)}\r\n                >\r\n                  Посмотреть\r\n                </Button>\r\n                <Button\r\n                  className=\"order__expanded-btn table-value\"\r\n                  onClick={() => handleDeleteOrder(order.id)}\r\n                  danger\r\n                >\r\n                  Удалить\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n      >\r\n        <Column<OrderType>\r\n          title=\"Статус\"\r\n          dataIndex=\"orderStatus\"\r\n          key=\"age\"\r\n          render={(status: OrderStatusEnum) => {\r\n            const colors = {\r\n              [OrderStatusEnum.NEW]: \"green\",\r\n              [OrderStatusEnum.ARCHIVED]: \"geekblue\",\r\n              [OrderStatusEnum.DELETED]: \"volcano\",\r\n            };\r\n\r\n            return (\r\n              <Tag color={colors[status]} key={status} className=\"table-tag\">\r\n                {status}\r\n              </Tag>\r\n            );\r\n          }}\r\n          sorter={getStringSorter(\"orderStatus\")}\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Заголовок\"\r\n          key=\"title\"\r\n          render={(_, order) => (\r\n            <Space size=\"middle\">\r\n              <Button\r\n                onClick={() => handleViewOrder(order)}\r\n                type=\"link\"\r\n                key=\"title\"\r\n                className=\"table-value\"\r\n              >\r\n                {truncateString(order.title, 40)}\r\n              </Button>\r\n            </Space>\r\n          )}\r\n          sorter={getStringSorter(\"title\")}\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Дата создания\"\r\n          dataIndex=\"creationDate\"\r\n          key=\"creationDate\"\r\n          render={(_, data) => formatDate(data.creationDate)}\r\n          defaultSortOrder=\"descend\"\r\n          sorter={getNumberSorter(\"creationDate\")}\r\n          className=\"table-value\"\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Дата закрытия\"\r\n          dataIndex=\"actualDate\"\r\n          key=\"actualDate\"\r\n          render={(_, data) => formatDate(data.actualDate)}\r\n          sorter={getNumberSorter(\"actualDate\")}\r\n          className=\"table-value\"\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Категории\"\r\n          dataIndex=\"categories\"\r\n          key=\"categories\"\r\n          render={(_, data) => {\r\n            return (\r\n              <>\r\n                {data.categories\r\n                  .filter((category) => category.parentId === 0)\r\n                  .map((category) => (\r\n                    <Button\r\n                      onClick={() => addFilterByCategory(category.categoryId)}\r\n                      type=\"link\"\r\n                      key={category.categoryId}\r\n                    >\r\n                      <Tag color=\"blue\" className=\"order__tag table-tag\">\r\n                        {category.categoryName}\r\n                      </Tag>\r\n                    </Button>\r\n                  ))}\r\n              </>\r\n            );\r\n          }}\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Цена (тг)\"\r\n          dataIndex=\"totalSum\"\r\n          key=\"totalSum\"\r\n          sorter={getNumberSorter(\"totalSum\")}\r\n          className=\"table-value\"\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Сроки\"\r\n          dataIndex=\"comment\"\r\n          key=\"comment\"\r\n          className=\"table-value\"\r\n        />\r\n        <Column<OrderType>\r\n          title=\"Результат\"\r\n          dataIndex=\"results\"\r\n          key=\"results\"\r\n          sorter={getStringSorter(\"result\")}\r\n          render={(_, data) => {\r\n            const colors = {\r\n              [OrderResultEnum.NONE]: \"geekblue\",\r\n              [OrderResultEnum.SUCCESS]: \"green\",\r\n              [OrderResultEnum.FAIL]: \"volcano\",\r\n            };\r\n\r\n            return (\r\n              <Tag color={colors[data.result]} className=\"order__tag table-tag\">\r\n                {getResultText(data.result)}\r\n              </Tag>\r\n            );\r\n          }}\r\n        />\r\n      </Table>\r\n      <BackTop />\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default OrdersPage;\r\n","export const COORDINATES_LENGTH = 20; // Длина полей широта и долгота в Coordinates\r\nexport const PHONE_NUMBER_LENGTH = 11; // Длина номера телефона 7xxxNNNNNNN\r\nexport const TITLE_LENGTH = 150; // Длина заголовка заявки, названия вложения\r\nexport const TEXT_LENGTH = 5000; // Длина текстовых полей\r\nexport const CONTACT_INFORMATION_LENGTH = 50; // Длина полей в Contacts\r\nexport const ADDRESS_LENGTH = 250; // Длина поля адрес в Contractor\r\nexport const CHAT_MESSAGE_LENGTH = 10000; // Длина текста в сообщении чата\r\nexport const SMS_CODE_LENGTH = 4; // Длина кода регистрации\r\nexport const EXTENSION_LENGTH = 5; // Длина расширения файла\r\nexport const MONTH_OF_RELEVANCE = 1; // Количество месяцев актуальности заявки\r\nexport const SMS_RESEND_PERIOD = 5; // Время повторной отправки смс, в минутах\r\n","import * as yup from \"yup\";\r\nimport {\r\n  ADDRESS_LENGTH,\r\n  CONTACT_INFORMATION_LENGTH,\r\n  PHONE_NUMBER_LENGTH,\r\n  TEXT_LENGTH,\r\n  TITLE_LENGTH,\r\n} from \"./limits\";\r\n\r\nconst phoneCodes = [\r\n  \"700\",\r\n  \"701\",\r\n  \"702\",\r\n  \"703\",\r\n  \"704\",\r\n  \"705\",\r\n  \"706\",\r\n  \"707\",\r\n  \"708\",\r\n  \"709\",\r\n  \"747\",\r\n  \"750\",\r\n  \"751\",\r\n  \"760\",\r\n  \"761\",\r\n  \"762\",\r\n  \"763\",\r\n  \"764\",\r\n  \"771\",\r\n  \"775\",\r\n  \"776\",\r\n  \"777\",\r\n  \"778\",\r\n];\r\n\r\nexport const orderSchema = yup.object().shape({\r\n  title: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  totalSum: yup.mixed().test(\"Ok\", \"Введите корректную цену\", (value) => {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n    if (isNaN(value)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }),\r\n  comment: yup.string(),\r\n  description: yup\r\n    .string()\r\n    .typeError(\"Значением может быть только текст\")\r\n    .max(TEXT_LENGTH),\r\n});\r\n\r\nexport const supplierSchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  location: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    )\r\n    .required(\"Обязательное поле\"),\r\n  phoneNumber: yup\r\n    .number()\r\n    .typeError(\"Введите корректный номер телефона\")\r\n    .min(PHONE_NUMBER_LENGTH, \"Введите корректный номер телефона\")\r\n    .required(\"Обязательное поле\")\r\n    .test(\r\n      \"Ok\",\r\n      \"Введенный номер не является телефоном сотовых операторов РК!\",\r\n      (value) => {\r\n        const code = String(value).slice(-10).slice(0, 3);\r\n\r\n        if (!phoneCodes.includes(code)) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    ),\r\n  description: yup\r\n    .string()\r\n    .typeError(\"Значением может быть только текст\")\r\n    .max(TEXT_LENGTH, `Максимальная длина ${TEXT_LENGTH} символов`),\r\n  address: yup\r\n    .string()\r\n    .max(ADDRESS_LENGTH, `Максимальная длина ${ADDRESS_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  contactName: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  webSite: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    ),\r\n  eMail: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    )\r\n    .email(\"Введите корректный e-mail\"),\r\n});\r\n\r\nexport const otpSchema = yup.object().shape({\r\n  phoneNumber: yup\r\n    .number()\r\n    .typeError(\"Введите корректный номер телефона\")\r\n    .min(11, \"Введите корректный номер телефона\")\r\n    .required(\"Обязательное поле\"),\r\n  otp: yup\r\n    .string()\r\n    .required(\"Обязательное поле\")\r\n    .matches(/^[0-9]+$/, \"Введите корректный СМС-код\")\r\n    .min(4, \"Введите корректный СМС-код\")\r\n    .max(4, \"Введите корректный СМС-код\"),\r\n});\r\n\r\nexport const customerSchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  location: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    )\r\n    .required(\"Обязательное поле\"),\r\n  contactName: yup\r\n    .string()\r\n    .max(\r\n      CONTACT_INFORMATION_LENGTH,\r\n      `Максимальная длина ${CONTACT_INFORMATION_LENGTH} символов`\r\n    )\r\n    .required(\"Обязательное поле\"),\r\n  phoneNumber: yup\r\n    .number()\r\n    .typeError(\"Введите корректный номер телефона\")\r\n    .min(PHONE_NUMBER_LENGTH, \"Введите корректный номер телефона\")\r\n    .required(\"Обязательное поле\")\r\n    .test(\r\n      \"Ok\",\r\n      \"Введенный номер не является телефоном сотовых операторов РК!\",\r\n      (value) => {\r\n        const code = String(value).slice(-10).slice(0, 3);\r\n\r\n        if (!phoneCodes.includes(code)) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    ),\r\n});\r\nexport const adminSchema = yup.object().shape({\r\n  phoneNumber: yup\r\n    .number()\r\n    .typeError(\"Введите корректный номер телефона\")\r\n    .min(PHONE_NUMBER_LENGTH, \"Введите корректный номер телефона\")\r\n    .required(\"Обязательное поле\")\r\n    .test(\r\n      \"Ok\",\r\n      \"Введенный номер не является телефоном сотовых операторов РК!\",\r\n      (value) => {\r\n        const code = String(value).slice(-10).slice(0, 3);\r\n\r\n        if (!phoneCodes.includes(code)) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    ),\r\n  password: yup\r\n    .string()\r\n    .min(5, `Минимальная длина 5 символов`)\r\n    .required(\"Обязательное поле\"),\r\n  confirm: yup\r\n    .string()\r\n    .oneOf([yup.ref(\"password\")], \"Пароли не совпадают\")\r\n    .required(\"Обязательное поле\"),\r\n});\r\n\r\nexport const authSchema = yup.object().shape({\r\n  phoneNumber: yup\r\n    .number()\r\n    .typeError(\"Введите корректный номер телефона\")\r\n    .min(PHONE_NUMBER_LENGTH, \"Введите корректный номер телефона\")\r\n    .required(\"Обязательное поле\"),\r\n  password: yup.string().required(\"Обязательное поле\"),\r\n});\r\n\r\nexport const changePasswordSchema = yup.object().shape({\r\n  password: yup\r\n    .string()\r\n    .min(5, `Минимальная длина 5 символов`)\r\n    .required(\"Обязательное поле\"),\r\n  confirm: yup\r\n    .string()\r\n    .oneOf([yup.ref(\"password\")], \"Пароли не совпадают\")\r\n    .required(\"Обязательное поле\"),\r\n});\r\n\r\nexport const categorySchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .max(TITLE_LENGTH, `Максимальная длина ${TITLE_LENGTH} символов`)\r\n    .required(\"Обязательное поле\"),\r\n  parentId: yup\r\n    .number()\r\n    .typeError(\"Введите корректный идентификатор\")\r\n    .required(\"Обязательное поле\"),\r\n});\r\n","import { axios } from \"../api/axios\";\r\nimport { AddCategoryFormData, CategoryType } from \"../models/Categories\";\r\n\r\nexport const categoriesApi = {\r\n  //categories\r\n  getAllCategories: async (): Promise<CategoryType[]> => {\r\n    const { data } = await axios.get<CategoryType[]>(\"categories\");\r\n    return data;\r\n  },\r\n  deleteAllCategories: async (): Promise<Boolean> => {\r\n    const { data } = await axios.delete<Boolean>(\"categories\");\r\n    return data;\r\n  },\r\n  addCategory: async (\r\n    formData: AddCategoryFormData\r\n  ): Promise<CategoryType[]> => {\r\n    const { data } = await axios.post<CategoryType[]>(\"categories\", formData);\r\n    return data;\r\n  },\r\n\r\n  //categories/${id}\r\n\r\n  getCategoryById: async (id: number): Promise<CategoryType[]> => {\r\n    const { data } = await axios.get<CategoryType[]>(`categories/${id}`);\r\n    return data;\r\n  },\r\n  deleteCategoryById: async (id: number): Promise<Boolean> => {\r\n    const { data } = await axios.delete<Boolean>(`categories/${id}`);\r\n    return data;\r\n  },\r\n  updateCategoryById: async (category: CategoryType): Promise<Boolean> => {\r\n    const { data } = await axios.patch<Boolean>(\r\n      `categories/${category.id}`,\r\n      category\r\n    );\r\n    return data;\r\n  },\r\n};\r\n","import { ActionStatusEnum } from \"../../models/types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { ActionsCreatorsTypes } from \"../../models/types\";\r\nimport { AppStateType } from \"../store\";\r\nimport { categoriesApi } from \"../../services/categoriesApi\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AddCategoryFormData, CategoryType } from \"../../models/Categories\";\r\n\r\nexport const categoriesActions = {\r\n  setAllCategories: (categories: CategoryType[]) => {\r\n    return {\r\n      type: \"SET_CATEGORIES\",\r\n      payload: { categories },\r\n    } as const;\r\n  },\r\n  setIsLoadingCategories: (isLoadingCategories: boolean) => {\r\n    return {\r\n      type: \"SET_IS_LOADING_CATEGORIES\",\r\n      payload: {\r\n        isLoadingCategories,\r\n      },\r\n    } as const;\r\n  },\r\n  setCategoriesErrorMessage: (errorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_CATEGORIES_ERROR_MESSAGE\",\r\n      payload: { errorMessage },\r\n    } as const;\r\n  },\r\n  setCategoriesActionStatus: (categoriesActionStatus: ActionStatusEnum) => {\r\n    return {\r\n      type: \"SET_CATEGORIES_ACTION_STATUS\",\r\n      payload: { categoriesActionStatus },\r\n    } as const;\r\n  },\r\n  setCurrentCategory: (currentCategory: CategoryType) => {\r\n    return {\r\n      type: \"SET_CURRENT_CATEGORY\",\r\n      payload: { currentCategory },\r\n    } as const;\r\n  },\r\n  setCategoryInEditProcess: (categoryInProcessEdit: number | null) => {\r\n    return {\r\n      type: \"SET_CATEGORY_IN_EDIT_PROCESS\",\r\n      payload: { categoryInProcessEdit },\r\n    } as const;\r\n  },\r\n  replaceCategory: (category: CategoryType) => {\r\n    return {\r\n      type: \"REPLACE_CATEGORY\",\r\n      payload: { category },\r\n    } as const;\r\n  },\r\n  removeCategory: (id: number) => {\r\n    return {\r\n      type: \"REMOVE_CATEGORY\",\r\n      payload: { id },\r\n    } as const;\r\n  },\r\n  clearCategories: () => {\r\n    return {\r\n      type: \"CLEAR_CATEGORIES\",\r\n    } as const;\r\n  },\r\n  addNewCategory: (category: CategoryType) => {\r\n    return {\r\n      type: \"ADD_NEW_CATEGORY\",\r\n      payload: { category },\r\n    } as const;\r\n  },\r\n};\r\n\r\nexport type CategoriesActionTypes = ReturnType<\r\n  ActionsCreatorsTypes<typeof categoriesActions>\r\n>;\r\n\r\nconst showError = (text: string, dispatch: Dispatch) => {\r\n  dispatch(categoriesActions.setCategoriesActionStatus(ActionStatusEnum.ERROR));\r\n  dispatch(categoriesActions.setCategoriesErrorMessage(text));\r\n};\r\n\r\nexport const getAllCategories = (): ThunkAcionType => async (dispatch) => {\r\n  try {\r\n    dispatch(categoriesActions.setIsLoadingCategories(true));\r\n    const categories = await categoriesApi.getAllCategories();\r\n    dispatch(categoriesActions.setAllCategories(categories));\r\n  } catch (error) {\r\n    console.log(\"getAllCategories...\", error);\r\n    showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n  } finally {\r\n    dispatch(categoriesActions.setIsLoadingCategories(false));\r\n  }\r\n};\r\n\r\n// export const deleteAllCategories = (): ThunkAcionType => async (dispatch) => {\r\n//   try {\r\n//     dispatch(categoriesActions.setIsLoadingCategories(true));\r\n//     const response = await categoriesApi.deleteAllCategories();\r\n//     if (response) {\r\n//       dispatch(\r\n//         categoriesActions.setCategoriesActionStatus(ActionStatusEnum.SUCCESS)\r\n//       );\r\n//       dispatch(categoriesActions.clearCategories());\r\n//     } else {\r\n//       showError(\r\n//         \"Не удалось удалить все категории, попробуйте еще раз\",\r\n//         dispatch\r\n//       );\r\n//     }\r\n//   } catch (error) {\r\n//     console.log(\"deleteAllCategories...\", error);\r\n//     showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n//   } finally {\r\n//     dispatch(categoriesActions.setIsLoadingCategories(false));\r\n//   }\r\n// };\r\n\r\nexport const createCategory =\r\n  (formData: AddCategoryFormData): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(categoriesActions.setIsLoadingCategories(true));\r\n      const createdCategory = await categoriesApi.addCategory({\r\n        name: formData.name,\r\n        parentId: Number(formData.parentId),\r\n        isDeleted: false,\r\n      });\r\n\r\n      if (createdCategory.length > 0) {\r\n        dispatch(\r\n          categoriesActions.setCategoriesActionStatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(categoriesActions.addNewCategory(createdCategory[0]));\r\n      } else {\r\n        showError(\r\n          \"Не получилось добавить категорию, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"addCategory...\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(categoriesActions.setIsLoadingCategories(false));\r\n    }\r\n  };\r\n\r\nexport const getCategoryById =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(categoriesActions.setIsLoadingCategories(true));\r\n      const categoryList = await categoriesApi.getCategoryById(id);\r\n\r\n      if (categoryList.length === 0) {\r\n        showError(\"Категория не найдена\", dispatch);\r\n      } else {\r\n        dispatch(categoriesActions.setCurrentCategory(categoryList[0]));\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getCategoryById...\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(categoriesActions.setIsLoadingCategories(false));\r\n    }\r\n  };\r\n\r\nexport const deleteCategoryById =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(categoriesActions.setIsLoadingCategories(true));\r\n      const response = await categoriesApi.deleteCategoryById(id);\r\n      if (response) {\r\n        dispatch(\r\n          categoriesActions.setCategoriesActionStatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(categoriesActions.removeCategory(id));\r\n      } else {\r\n        showError(\r\n          \"Не получилось удалить категорию, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"deleteCategoryById...\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(categoriesActions.setIsLoadingCategories(false));\r\n    }\r\n  };\r\n\r\nexport const updateCategoryById =\r\n  (category: CategoryType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(categoriesActions.setCategoryInEditProcess(category.id));\r\n      const response = await categoriesApi.updateCategoryById(category);\r\n      if (response) {\r\n        dispatch(\r\n          categoriesActions.setCategoriesActionStatus(ActionStatusEnum.SUCCESS)\r\n        );\r\n        dispatch(categoriesActions.replaceCategory(category));\r\n      } else {\r\n        showError(\r\n          \"Не получилось обновить категорию, попробуйте еще раз\",\r\n          dispatch\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"updateCategoryById...\", error);\r\n      showError(\"Ошибка сети, попробуйте еще раз\", dispatch);\r\n    } finally {\r\n      dispatch(categoriesActions.setCategoryInEditProcess(null));\r\n    }\r\n  };\r\n\r\ntype ThunkAcionType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  CategoriesActionTypes\r\n>;\r\n","import { Form, Input, InputNumber, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, Controller, FieldError } from \"react-hook-form\";\r\nimport { DescriptionOrderFormData } from \"../../../models/Orders\";\r\n\r\nconst { Text } = Typography;\r\n\r\ntype OrderCreateFormPropsType = {\r\n  control: Control<DescriptionOrderFormData, object>;\r\n  errors: {\r\n    title?: FieldError;\r\n    description?: FieldError;\r\n    comment?: FieldError;\r\n    totalSum?: FieldError;\r\n  };\r\n};\r\n\r\nconst OrderCreateForm: React.FC<OrderCreateFormPropsType> = ({\r\n  control,\r\n  errors,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, value } }) => (\r\n          <Form.Item\r\n            validateStatus={errors.title ? \"error\" : \"success\"}\r\n            help={errors.title?.message}\r\n            className=\"input order__title-input\"\r\n            required\r\n          >\r\n            <Text className=\"subtitle\">Заголовок</Text>\r\n            <Input\r\n              placeholder=\"Заголовок заявки\"\r\n              value={value}\r\n              onChange={onChange}\r\n            />\r\n          </Form.Item>\r\n        )}\r\n        name=\"title\"\r\n        defaultValue=\"\"\r\n      />\r\n      <div className=\"order__numeric-fields\">\r\n        <Controller\r\n          control={control}\r\n          rules={{\r\n            required: true,\r\n          }}\r\n          render={({ field: { onChange, value } }) => (\r\n            <Form.Item\r\n              validateStatus={errors.comment ? \"error\" : \"success\"}\r\n              help={errors.comment?.message}\r\n              className=\"order__comment-input input\"\r\n              required\r\n            >\r\n              <Text className=\"subtitle\">Сроки</Text>\r\n              <Input\r\n                placeholder=\"Желаемые сроки\"\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            </Form.Item>\r\n          )}\r\n          name=\"comment\"\r\n          defaultValue=\"\"\r\n        />\r\n\r\n        <Controller\r\n          control={control}\r\n          rules={{\r\n            required: true,\r\n          }}\r\n          render={({ field: { onChange, value } }) => (\r\n            <Form.Item\r\n              validateStatus={errors.totalSum ? \"error\" : \"success\"}\r\n              help={errors.totalSum?.message}\r\n              className=\"input order__totalsum-input\"\r\n              required\r\n            >\r\n              <div className=\"order__totalsum-field\">\r\n                <Text className=\"subtitle\">Цена (тг)</Text>\r\n                <InputNumber value={value} onChange={onChange} />\r\n              </div>\r\n            </Form.Item>\r\n          )}\r\n          name=\"totalSum\"\r\n          defaultValue={0}\r\n        />\r\n      </div>\r\n\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: false,\r\n        }}\r\n        render={({ field: { onChange, value } }) => (\r\n          <Form.Item\r\n            validateStatus={errors.description ? \"error\" : \"success\"}\r\n            help={errors.description?.message}\r\n            className=\"input order__descr-input\"\r\n            required\r\n          >\r\n            <Text className=\"subtitle\">Описание</Text>\r\n            <Input.TextArea\r\n              placeholder=\"Описание\"\r\n              value={value}\r\n              onChange={onChange}\r\n            />\r\n          </Form.Item>\r\n        )}\r\n        name=\"description\"\r\n        defaultValue=\"\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(OrderCreateForm);\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Layout,\r\n  Typography,\r\n  TreeSelect,\r\n  message,\r\n  Select,\r\n} from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {\r\n  AppAlert,\r\n  AppPreloader,\r\n  ImagesList,\r\n  UploadFileForm,\r\n} from \"../../components\";\r\nimport {\r\n  addOrderImage,\r\n  createOrder,\r\n  ordersActions,\r\n  removeNewOrderImage,\r\n} from \"../../store/actions/orders\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport {\r\n  getCurrentOrderState,\r\n  getOrderActionStatusState,\r\n  getOrderImagesLoadingState,\r\n  getOrderImagesState,\r\n  getOrdersErrorMessageState,\r\n  getOrdersLoadingState,\r\n} from \"../../store/selectors/orders\";\r\nimport { orderSchema } from \"../../utils/validatorsSchemes\";\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoriesTreeDataState,\r\n} from \"../../store/selectors/categories\";\r\nimport { categoriesActions } from \"../../store/actions/categories\";\r\nimport { OrderCreateForm } from \"./components\";\r\nimport {\r\n  AddOrderFormData,\r\n  DescriptionOrderFormData,\r\n} from \"../../models/Orders\";\r\nimport {\r\n  getContractorsListState,\r\n  getContractorsLoadingState,\r\n} from \"../../store/selectors/contractors\";\r\nimport { ContractorTypesEnum } from \"../../models/Contractors\";\r\nimport { getContractors } from \"../../store/actions/contractors\";\r\n\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\nconst { SHOW_ALL } = TreeSelect;\r\nconst { Option } = Select;\r\n\r\nconst OrderCreatePage = () => {\r\n  const {\r\n    control,\r\n    reset,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<DescriptionOrderFormData>({\r\n    resolver: yupResolver(orderSchema),\r\n  });\r\n\r\n  const [selectedCategories, setSelectedCategories] = React.useState<number[]>(\r\n    []\r\n  );\r\n\r\n  const [customerId, setCustomerId] = React.useState<number | null>(null);\r\n\r\n  const orderActionStatus = useSelector(getOrderActionStatusState);\r\n  const orderError = useSelector(getOrdersErrorMessageState);\r\n  const orderLoadingState = useSelector(getOrdersLoadingState);\r\n  const currentOrder = useSelector(getCurrentOrderState);\r\n  const orderImages = useSelector(getOrderImagesState);\r\n  const orderUploading = useSelector(getOrderImagesLoadingState);\r\n\r\n  const categoriesTree = useSelector(getCategoriesTreeDataState);\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n\r\n  const contractors = useSelector(getContractorsListState);\r\n  const contractorsLoading = useSelector(getContractorsLoadingState);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const clearOrderState = React.useCallback(() => {\r\n    dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER));\r\n    dispatch(ordersActions.setOrdersErrorMessage(null));\r\n    dispatch(ordersActions.clearOrderImages());\r\n  }, [dispatch]);\r\n\r\n  const clearCategoriesState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      clearOrderState();\r\n      clearCategoriesState();\r\n    };\r\n  }, [clearCategoriesState, clearOrderState]);\r\n\r\n  React.useEffect(() => {\r\n    if (!contractors) {\r\n      dispatch(getContractors());\r\n    }\r\n  }, [contractors, dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    if (currentOrder && orderActionStatus === ActionStatusEnum.SUCCESS) {\r\n      history.push(`/orders/${currentOrder.id}`);\r\n    }\r\n  }, [currentOrder, history, orderActionStatus]);\r\n\r\n  const handleChangeCategories = (value: number[]) => {\r\n    setSelectedCategories(value);\r\n  };\r\n\r\n  const handleRemoveImage = (imageId: number) => {\r\n    dispatch(removeNewOrderImage(imageId));\r\n  };\r\n\r\n  const handleSelectCustomerId = (value: string) =>\r\n    setCustomerId(Number(value));\r\n\r\n  const handleUploadImage = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n\r\n    if (file) {\r\n      if (\r\n        file.type !== \"image/png\" &&\r\n        file.type !== \"image/jpeg\" &&\r\n        file.type !== \"image/jpg\"\r\n      ) {\r\n        return message.error(`${file.name} не является картинкой`);\r\n      } else {\r\n        dispatch(addOrderImage(file));\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    const categories = selectedCategories.map((categoryId) => ({\r\n      categoryId,\r\n    }));\r\n\r\n    if (customerId) {\r\n      const newOrder: AddOrderFormData = {\r\n        title: formData.title,\r\n        description: formData.description,\r\n        comment: formData.comment,\r\n        totalSum: formData.totalSum,\r\n        contractors: [],\r\n        attachments: orderImages.map((image) => ({\r\n          attachmentId: image.id,\r\n        })),\r\n        customerId,\r\n        categories,\r\n      };\r\n\r\n      dispatch(createOrder(newOrder));\r\n      reset();\r\n    }\r\n  });\r\n\r\n  const suppliers = React.useMemo(() => {\r\n    return contractors?.filter(\r\n      (contractor) => contractor.contractorType === ContractorTypesEnum.SUPPLIER\r\n    );\r\n  }, [contractors]);\r\n\r\n  if (orderLoadingState) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearOrderState}\r\n        errorMessage={orderError}\r\n        successMessage={\"Заявка сохранена\"}\r\n        status={orderActionStatus}\r\n      />\r\n      <AppAlert\r\n        onClose={clearCategoriesState}\r\n        errorMessage={categoriesError}\r\n        status={categoriesActionStatus}\r\n      />\r\n      <Card className=\"form\">\r\n        <Title level={3} className=\"title\">\r\n          Создание заявки\r\n        </Title>\r\n\r\n        <OrderCreateForm control={control} errors={errors} />\r\n        <TreeSelect\r\n          treeData={categoriesTree}\r\n          value={selectedCategories}\r\n          onChange={handleChangeCategories}\r\n          treeCheckable={true}\r\n          showCheckedStrategy={SHOW_ALL}\r\n          placeholder={\"Выберите категории заявки\"}\r\n          style={{ width: \"100%\", marginBottom: 10 }}\r\n          maxTagCount={5}\r\n        />\r\n        <Select\r\n          showSearch\r\n          style={{ width: \"100%\", marginBottom: 10 }}\r\n          placeholder=\"Выберите автора заявки\"\r\n          optionFilterProp=\"children\"\r\n          filterOption={(input, option) =>\r\n            option?.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n          filterSort={(optionA, optionB) =>\r\n            optionA.children\r\n              .toLowerCase()\r\n              .localeCompare(optionB.children.toLowerCase())\r\n          }\r\n          onChange={handleSelectCustomerId}\r\n          loading={contractorsLoading}\r\n        >\r\n          {suppliers &&\r\n            suppliers.map((contractor) => {\r\n              return (\r\n                <Option value={contractor.id} key={contractor.id}>\r\n                  {contractor.name}\r\n                </Option>\r\n              );\r\n            })}\r\n        </Select>\r\n        <ImagesList\r\n          removeImage={handleRemoveImage}\r\n          images={orderImages}\r\n          editMode={true}\r\n        />\r\n        <UploadFileForm\r\n          onChange={handleUploadImage}\r\n          isUploading={orderUploading}\r\n          buttonText=\"Фото\"\r\n        />\r\n        <Button\r\n          className=\"order__save-btn\"\r\n          onClick={onSubmit}\r\n          disabled={\r\n            Object.keys(errors).length > 0 ||\r\n            selectedCategories.length === 0 ||\r\n            !customerId\r\n          }\r\n        >\r\n          Сохранить\r\n        </Button>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default OrderCreatePage;\r\n","import { Form, Input, InputNumber, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport {\r\n  DescriptionOrderFormData,\r\n  OrderFieldsNameType,\r\n} from \"../../../models/Orders\";\r\nimport { EditableFieldPropsType } from \"../../../models/types\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst OrderEditableField: React.FC<\r\n  EditableFieldPropsType<DescriptionOrderFormData, OrderFieldsNameType>\r\n> = ({\r\n  placeholder,\r\n  editMode,\r\n  fieldName,\r\n  control,\r\n  error,\r\n  defaultValue,\r\n  isTextArea = false,\r\n  isNumberInput = false,\r\n}) => {\r\n  if (editMode) {\r\n    return (\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, value } }) => (\r\n          <Form.Item\r\n            validateStatus={error ? \"error\" : \"success\"}\r\n            help={error?.message}\r\n            className=\"input\"\r\n          >\r\n            {isTextArea ? (\r\n              <Input.TextArea\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            ) : isNumberInput ? (\r\n              <InputNumber\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            ) : (\r\n              <Input\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            )}\r\n          </Form.Item>\r\n        )}\r\n        name={fieldName}\r\n        defaultValue={defaultValue}\r\n      />\r\n    );\r\n  }\r\n  return <Text>{defaultValue}</Text>;\r\n};\r\n\r\nexport default OrderEditableField;\r\n","import { Card, Divider, TreeSelect } from \"antd\";\r\nimport { DataNode } from \"antd/lib/tree\";\r\nimport React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\n\r\nimport { ImagesList, UploadFileForm } from \"../../../components\";\r\nimport { AttachmentOutType } from \"../../../models/Attachments\";\r\nimport { DescriptionOrderFormData } from \"../../../models/Orders\";\r\nimport OrderEditableField from \"./OrderEditableField\";\r\n\r\nconst { SHOW_ALL } = TreeSelect;\r\n\r\ntype OrderInfoBodyPropsType = {\r\n  handleRemoveImage: (imageId: number) => void;\r\n  handleSelectCategories: (value: number[]) => void;\r\n  handleAddImage: (e: Event) => void;\r\n  selectedCategories: number[];\r\n  editMode: boolean;\r\n  imageUploading: boolean;\r\n  images: AttachmentOutType[];\r\n  control: Control<DescriptionOrderFormData, object>;\r\n  categoriesTree?: DataNode[];\r\n  defaultValue?: string;\r\n  error?: FieldError;\r\n};\r\n\r\nconst OrderInfoBody: React.FC<OrderInfoBodyPropsType> = ({\r\n  categoriesTree,\r\n  selectedCategories,\r\n  handleSelectCategories,\r\n  handleRemoveImage,\r\n  handleAddImage,\r\n  editMode,\r\n  defaultValue,\r\n  error,\r\n  images,\r\n  control,\r\n  imageUploading,\r\n}) => {\r\n  return (\r\n    <div className=\"order__body\">\r\n      <Card>\r\n        <Divider>Описание</Divider>\r\n        <OrderEditableField\r\n          defaultValue={defaultValue}\r\n          editMode={editMode}\r\n          control={control}\r\n          error={error}\r\n          fieldName=\"description\"\r\n          placeholder=\"Описание\"\r\n          isTextArea\r\n        />\r\n        <Divider>Категории</Divider>\r\n        {categoriesTree && (\r\n          <TreeSelect\r\n            treeData={categoriesTree}\r\n            value={selectedCategories}\r\n            onChange={handleSelectCategories}\r\n            treeCheckable={true}\r\n            showCheckedStrategy={SHOW_ALL}\r\n            placeholder={editMode ? \"Выберите категории заявки\" : \"Категории\"}\r\n            style={{ width: \"100%\", marginBottom: 10 }}\r\n            disabled={!editMode}\r\n          />\r\n        )}\r\n        <Divider>Фото</Divider>\r\n        <div className=\"order__images\">\r\n          <ImagesList\r\n            removeImage={handleRemoveImage}\r\n            images={images}\r\n            editMode={editMode}\r\n          />\r\n          {editMode && (\r\n            <UploadFileForm\r\n              onChange={handleAddImage}\r\n              isUploading={imageUploading}\r\n              buttonText=\"Фото\"\r\n            />\r\n          )}\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(OrderInfoBody);\r\n","import { Descriptions } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DescriptionOrderFormData, OrderType } from \"../../../models/Orders\";\r\nimport { formatDate } from \"../../../utils/formatter\";\r\nimport OrderEditableField from \"./OrderEditableField\";\r\n\r\ntype OrderDescriptionPropsType = {\r\n  order: OrderType;\r\n  editMode: boolean;\r\n  errors: {\r\n    title?: FieldError;\r\n    totalSum?: FieldError;\r\n  };\r\n  control: Control<DescriptionOrderFormData, object>;\r\n};\r\n\r\nconst OrderDescription: React.FC<OrderDescriptionPropsType> = ({\r\n  order,\r\n  editMode,\r\n  errors,\r\n  control,\r\n}) => {\r\n  return (\r\n    <Descriptions size=\"small\" column={3} labelStyle={{ fontWeight: \"bold\" }}>\r\n      <Descriptions.Item label=\"Дата создания\">\r\n        {formatDate(order.creationDate)}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Автор\">\r\n        <NavLink to={`/contractors/${order.customerId}`}>Заказчик</NavLink>\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Сроки\">\r\n        <OrderEditableField\r\n          defaultValue={order.comment}\r\n          editMode={editMode}\r\n          control={control}\r\n          error={errors.title}\r\n          fieldName=\"comment\"\r\n          placeholder=\"Сроки\"\r\n        />\r\n      </Descriptions.Item>\r\n\r\n      <Descriptions.Item label=\"Дата закрытия\">\r\n        {formatDate(order.actualDate)}\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Чаты\">\r\n        <NavLink to={`/orders/${order.id}/chats`}>Чаты</NavLink>\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Цена (тг)\">\r\n        <OrderEditableField\r\n          isNumberInput\r\n          defaultValue={order.totalSum}\r\n          editMode={editMode}\r\n          control={control}\r\n          error={errors.totalSum}\r\n          fieldName=\"totalSum\"\r\n          placeholder=\"Цена\"\r\n        />\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"Номер заявки\">{order.id}</Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n\r\nexport default OrderDescription;\r\n","import React from \"react\";\r\nimport { Layout, PageHeader, Button, message } from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport { orderSchema } from \"../../utils/validatorsSchemes\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport {\r\n  getCurrentOrderState,\r\n  getOrderActionStatusState,\r\n  getOrderImagesLoadingState,\r\n  getOrderImagesState,\r\n  getOrdersErrorMessageState,\r\n  getOrdersLoadingState,\r\n} from \"../../store/selectors/orders\";\r\nimport {\r\n  addOrderImage,\r\n  createOrder,\r\n  deleteOrder,\r\n  getOrderById,\r\n  ordersActions,\r\n  removeOrderImage,\r\n  updateOrder,\r\n} from \"../../store/actions/orders\";\r\nimport { AppAlert, AppPreloader } from \"../../components\";\r\n\r\nimport {\r\n  OrderDescription,\r\n  OrderEditableField,\r\n  OrderInfoBody,\r\n} from \"./components\";\r\nimport { getCategoriesTreeDataState } from \"../../store/selectors/categories\";\r\n\r\nimport {\r\n  AddOrderFormData,\r\n  DescriptionOrderFormData,\r\n  OrderStatusEnum,\r\n} from \"../../models/Orders\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst OrderPage = () => {\r\n  const [editMode, setEditMode] = React.useState(false);\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm<DescriptionOrderFormData>({\r\n    resolver: yupResolver(orderSchema),\r\n  });\r\n\r\n  const [selectedCategories, setSelectedCategories] = React.useState<number[]>(\r\n    []\r\n  );\r\n\r\n  const order = useSelector(getCurrentOrderState);\r\n  const orderActionStatus = useSelector(getOrderActionStatusState);\r\n  const orderError = useSelector(getOrdersErrorMessageState);\r\n  const orderLoadingState = useSelector(getOrdersLoadingState);\r\n\r\n  const orderImages = useSelector(getOrderImagesState);\r\n  const orderImageUploading = useSelector(getOrderImagesLoadingState);\r\n\r\n  const categoriesTree = useSelector(getCategoriesTreeDataState);\r\n\r\n  const { orderId }: { orderId?: string } = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER));\r\n    dispatch(ordersActions.setCurrentOrder(null));\r\n    dispatch(ordersActions.clearOrderImages());\r\n  }, [dispatch]);\r\n\r\n  const toggleEditMode = () => {\r\n    setEditMode((prev) => {\r\n      dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER));\r\n      return !prev;\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getOrderById(Number(orderId)));\r\n    return () => {\r\n      clearState();\r\n    };\r\n  }, [clearState, dispatch, orderId]);\r\n\r\n  React.useEffect(() => {\r\n    if (order) {\r\n      setSelectedCategories(\r\n        order.categories?.map((category) => category.categoryId)\r\n      );\r\n      dispatch(ordersActions.setOrderImages(order.attachments));\r\n    }\r\n  }, [order, dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    // ВО ВРЕМЯ УДАЛЕНИЯ\r\n    if (!order && orderActionStatus === ActionStatusEnum.SUCCESS) {\r\n      history.push(\"/orders\");\r\n    }\r\n  }, [history, order, orderActionStatus]);\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    if (order) {\r\n      const categories = selectedCategories.map((categoryId) => ({\r\n        categoryId,\r\n      }));\r\n      const updatedOrder: AddOrderFormData = {\r\n        ...order,\r\n        title: formData.title,\r\n        description: formData.description,\r\n        totalSum: formData.totalSum,\r\n        comment: formData.comment,\r\n        contractors: order.contractors,\r\n        attachments: orderImages.map((image) => ({ attachmentId: image.id })),\r\n        customerId: 1,\r\n        categories,\r\n      };\r\n      setEditMode(false);\r\n      dispatch(updateOrder(updatedOrder, order.id));\r\n    }\r\n  });\r\n\r\n  const goBack = () => window.history.back();\r\n\r\n  const handleSelectCategories = React.useCallback((value: number[]) => {\r\n    setSelectedCategories(value);\r\n  }, []);\r\n\r\n  const handleDeleteOrder = () => {\r\n    const answer = window.confirm(\"Вы уверены что хотите удалить заявку?\");\r\n    if (answer && order) {\r\n      dispatch(deleteOrder(order.id));\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    toggleEditMode();\r\n    if (order) {\r\n      setSelectedCategories(\r\n        order.categories?.map((category) => category.categoryId)\r\n      );\r\n      dispatch(ordersActions.clearOrderImages());\r\n      dispatch(ordersActions.setOrderImages(order.attachments));\r\n      reset({\r\n        title: order.title,\r\n        description: order.description,\r\n        comment: order.comment,\r\n        totalSum: order.totalSum,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleUploadImage = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n\r\n    if (file) {\r\n      if (\r\n        file.type !== \"image/png\" &&\r\n        file.type !== \"image/jpeg\" &&\r\n        file.type !== \"image/jpg\"\r\n      ) {\r\n        return message.error(`${file.name} не является картинкой`);\r\n      } else {\r\n        dispatch(addOrderImage(file));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRemoveImage = (imageId: number) => {\r\n    if (order) {\r\n      dispatch(removeOrderImage(order.id, imageId));\r\n    }\r\n  };\r\n\r\n  const restoreOrder = () => {\r\n    const answer = window.confirm(\"Вы уверены что хотите повторить заявку?\");\r\n    if (answer && order) {\r\n      const restoredOrder: AddOrderFormData = {\r\n        title: order.title,\r\n        comment: order.comment,\r\n        totalSum: order.totalSum,\r\n        contractors: [],\r\n        customerId: order.customerId,\r\n        description: order.description,\r\n        attachments: order.attachments.map((image) => ({\r\n          attachmentId: image.id,\r\n        })),\r\n        categories: order.categories.map((category) => ({\r\n          categoryId: Number(category.categoryId),\r\n        })),\r\n        orderStatus: OrderStatusEnum.NEW,\r\n      };\r\n      dispatch(createOrder(restoredOrder));\r\n    }\r\n  };\r\n\r\n  const editActionsButtons = [\r\n    <Button\r\n      key=\"1\"\r\n      onClick={onSubmit}\r\n      disabled={\r\n        Object.keys(errors).length !== 0 || selectedCategories.length === 0\r\n      }\r\n    >\r\n      Сохранить\r\n    </Button>,\r\n    <Button key=\"2\" onClick={handleCancelEdit} danger>\r\n      Отменить\r\n    </Button>,\r\n  ];\r\n\r\n  const actionsButtons = [\r\n    order?.orderStatus === OrderStatusEnum.NEW && (\r\n      <Button key=\"3\" onClick={toggleEditMode}>\r\n        Редактировать\r\n      </Button>\r\n    ),\r\n\r\n    (order?.orderStatus === \"ARCHIVED\" || order?.orderStatus === \"DELETED\") && (\r\n      <Button key=\"4\" onClick={restoreOrder}>\r\n        Повторить\r\n      </Button>\r\n    ),\r\n    <Button key=\"5\" onClick={handleDeleteOrder} danger>\r\n      Удалить\r\n    </Button>,\r\n  ];\r\n\r\n  if (orderLoadingState) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={() =>\r\n          dispatch(ordersActions.setOrderActionStatus(ActionStatusEnum.NEVER))\r\n        }\r\n        errorMessage={orderError}\r\n        status={orderActionStatus}\r\n        successMessage=\"Изменения успешно сохранены\"\r\n      />\r\n      {order && (\r\n        <>\r\n          <div className=\"page-header\">\r\n            <PageHeader\r\n              ghost={false}\r\n              onBack={goBack}\r\n              title={\r\n                <OrderEditableField\r\n                  defaultValue={order.title}\r\n                  editMode={editMode}\r\n                  control={control}\r\n                  error={errors.title}\r\n                  fieldName=\"title\"\r\n                  placeholder=\"Заголовок\"\r\n                />\r\n              }\r\n              extra={editMode ? editActionsButtons : actionsButtons}\r\n            >\r\n              <OrderDescription\r\n                order={order}\r\n                editMode={editMode}\r\n                errors={errors}\r\n                control={control}\r\n              />\r\n            </PageHeader>\r\n          </div>\r\n          <OrderInfoBody\r\n            categoriesTree={categoriesTree}\r\n            selectedCategories={selectedCategories}\r\n            handleSelectCategories={handleSelectCategories}\r\n            handleRemoveImage={handleRemoveImage}\r\n            handleAddImage={handleUploadImage}\r\n            editMode={editMode}\r\n            defaultValue={order.description}\r\n            error={errors.description}\r\n            images={orderImages}\r\n            control={control}\r\n            imageUploading={orderImageUploading}\r\n          />\r\n        </>\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default OrderPage;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { ReloadOutlined } from \"@ant-design/icons\";\r\n\r\nimport { Layout, Table, Tag, Button, Space, Typography } from \"antd\";\r\nimport { AppAlert, AppPreloader, AppSearchField } from \"../../components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getContractorsActionStatusState,\r\n  getContractorsErrorMessage,\r\n  getFilteredContractorsListState,\r\n  getContractorsLoadingState,\r\n} from \"../../store/selectors/contractors\";\r\nimport { NavLink, useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  contractorActions,\r\n  deleteContractor,\r\n  getContractors,\r\n} from \"../../store/actions/contractors\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport {\r\n  ContractorNumberSortFieldsType,\r\n  ContractorsQueryFilterType,\r\n  ContractorStringSortFieldsType,\r\n  ContractorType,\r\n  ContractorTypesEnum,\r\n} from \"../../models/Contractors\";\r\nimport { formatDate, truncateString } from \"../../utils/formatter\";\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\";\r\n\r\nconst { Content } = Layout;\r\nconst { Column } = Table;\r\nconst { Text } = Typography;\r\n\r\nconst getNumberSorter = (fieldName: ContractorNumberSortFieldsType) => ({\r\n  compare: (a: ContractorType, b: ContractorType) =>\r\n    a[fieldName] - b[fieldName],\r\n});\r\n\r\nconst getStringSorter = (fieldName: ContractorStringSortFieldsType) => ({\r\n  compare: (a: ContractorType, b: ContractorType) =>\r\n    a[fieldName].localeCompare(b[fieldName]),\r\n});\r\n\r\nconst ContractorsPage = () => {\r\n  const [searchText, setSearchText] = React.useState<string>(\"\");\r\n\r\n  const useQuery = () => {\r\n    return new URLSearchParams(useLocation().search);\r\n  };\r\n  const query = useQuery();\r\n\r\n  const contractorsError = useSelector(getContractorsErrorMessage);\r\n  const contractorsActionStatus = useSelector(getContractorsActionStatusState);\r\n  const contractorsLoading = useSelector(getContractorsLoadingState);\r\n  const contractors = useSelector(\r\n    getFilteredContractorsListState(\r\n      searchText,\r\n      query.get(\"filter\") as ContractorsQueryFilterType,\r\n      query.get(\"category\")\r\n    )\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { xxl } = useBreakpoint();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(contractorActions.setContractorsErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  const handleDeleteContractor = (id: number) => {\r\n    const answer = window.confirm(\"Вы уверены что хотите удалить контрагента?\");\r\n    if (answer) {\r\n      dispatch(deleteContractor(id));\r\n    }\r\n  };\r\n\r\n  const handleViewContractor = (contractor: ContractorType) => {\r\n    history.push(`contractors/${contractor.id}`);\r\n  };\r\n\r\n  const handleChangeSearchText = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.currentTarget.value);\r\n  };\r\n\r\n  const fetchData = React.useCallback(() => {\r\n    dispatch(getContractors());\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getContractors());\r\n    return () => {\r\n      clearState();\r\n    };\r\n  }, [dispatch, clearState]);\r\n\r\n  const addCategory = (categoryId: number) => {\r\n    history.replace(`?category=${categoryId}`);\r\n  };\r\n\r\n  if (contractorsLoading) {\r\n    return <AppPreloader size=\"large\" />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={contractorsError}\r\n        successMessage=\"Контрагент успешно удален\"\r\n        status={contractorsActionStatus}\r\n      />\r\n      <div className=\"contractors__header\">\r\n        <AppSearchField\r\n          value={searchText}\r\n          onChange={handleChangeSearchText}\r\n          placeholder=\"Найти по названию организации\"\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<ReloadOutlined />}\r\n          size=\"large\"\r\n          onClick={fetchData}\r\n        />\r\n      </div>\r\n      <Table\r\n        pagination={{ position: [\"topRight\"] }}\r\n        showSorterTooltip={false}\r\n        dataSource={contractors}\r\n        rowKey={\"id\"}\r\n        size={xxl ? \"middle\" : \"small\"}\r\n        expandable={{\r\n          expandedRowRender: (order) => (\r\n            <div className=\"contractor__expanded\">\r\n              <p className=\"contractor__tab-descr table-value\">\r\n                {order.description}\r\n              </p>\r\n              <div className=\"contractor__expanded-action\">\r\n                <Button\r\n                  className=\"contractor__expanded-btn table-value\"\r\n                  onClick={() => handleViewContractor(order)}\r\n                >\r\n                  Посмотреть\r\n                </Button>\r\n                <Button\r\n                  className=\"contractor__expanded-btn table-value\"\r\n                  onClick={() => handleDeleteContractor(order.id)}\r\n                  danger\r\n                >\r\n                  Удалить\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n      >\r\n        <Column<ContractorType>\r\n          title=\"Тип контрагента\"\r\n          dataIndex=\"contractorType\"\r\n          key=\"contractorType\"\r\n          render={(_, contractor) => {\r\n            const colors = {\r\n              [ContractorTypesEnum.CUSTOMER]: \"green\",\r\n              [ContractorTypesEnum.SUPPLIER]: \"geekblue\",\r\n              [ContractorTypesEnum.UNKNOWN]: \"gray\",\r\n            };\r\n\r\n            return (\r\n              <Tag\r\n                color={colors[contractor.contractorType]}\r\n                key={contractor.contractorType}\r\n                className=\"table-tag\"\r\n              >\r\n                {contractor.contractorType === ContractorTypesEnum.CUSTOMER\r\n                  ? \"Заказчик\"\r\n                  : \"Поставщик\"}\r\n              </Tag>\r\n            );\r\n          }}\r\n          sorter={getStringSorter(\"contractorType\")}\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Название организации\"\r\n          key=\"name\"\r\n          render={(_, contractor) => (\r\n            <Space size=\"middle\">\r\n              <NavLink\r\n                to={`contractors/${contractor.id}`}\r\n                className=\"table-value\"\r\n              >\r\n                {truncateString(contractor.name, 50)}\r\n              </NavLink>\r\n            </Space>\r\n          )}\r\n          sorter={getStringSorter(\"name\")}\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Номер телефона\"\r\n          dataIndex=\"phoneNumber\"\r\n          key=\"phoneNumber\"\r\n          className=\"table-value\"\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Город\"\r\n          dataIndex=\"location\"\r\n          key=\"location\"\r\n          sorter={getStringSorter(\"location\")}\r\n          className=\"table-value\"\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Категории\"\r\n          dataIndex=\"categories\"\r\n          key=\"categories\"\r\n          render={(_, data) => {\r\n            return (\r\n              <>\r\n                {data.categories\r\n                  .filter((category) => category.parentId === 0)\r\n                  .map((category) => (\r\n                    <Button\r\n                      onClick={() => addCategory(category.categoryId)}\r\n                      type=\"link\"\r\n                      key={category.categoryId}\r\n                    >\r\n                      <Tag color=\"blue\" className=\"order__tag table-tag\">\r\n                        {category.categoryName}\r\n                      </Tag>\r\n                    </Button>\r\n                  ))}\r\n              </>\r\n            );\r\n          }}\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Контактное лицо\"\r\n          dataIndex=\"contactName\"\r\n          key=\"contactName\"\r\n          className=\"table-value\"\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Дата регистрации\"\r\n          dataIndex=\"creationDate\"\r\n          key=\"creationDate\"\r\n          render={(_, data) => formatDate(data.creationDate)}\r\n          defaultSortOrder=\"descend\"\r\n          sorter={getNumberSorter(\"creationDate\")}\r\n          className=\"table-value\"\r\n        />\r\n        <Column<ContractorType>\r\n          title=\"Рейтинг\"\r\n          dataIndex=\"rating\"\r\n          key=\"rating\"\r\n          render={(_, data) => {\r\n            return (\r\n              <Text className=\"table-value\">\r\n                {Math.ceil(data.rating * 100) / 100}\r\n              </Text>\r\n            );\r\n          }}\r\n          sorter={getNumberSorter(\"rating\")}\r\n        />\r\n      </Table>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ContractorsPage;\r\n","import { Form, Input, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport {\r\n  CustomerDescrFormDataType,\r\n  CustomerFieldsNameType,\r\n  SupplierDescrFormDataType,\r\n  SupplierFieldsNameType,\r\n} from \"../../../models/Contractors\";\r\nimport { EditableFieldPropsType } from \"../../../models/types\";\r\nimport { truncateString } from \"../../../utils/formatter\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst ContractorEditableField: React.FC<\r\n  EditableFieldPropsType<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    SupplierFieldsNameType | CustomerFieldsNameType\r\n  >\r\n> = ({\r\n  placeholder,\r\n  editMode,\r\n  fieldName,\r\n  control,\r\n  error,\r\n  defaultValue,\r\n  isTextArea = false,\r\n  maxLength,\r\n}) => {\r\n  if (editMode) {\r\n    return (\r\n      <Controller\r\n        control={control}\r\n        rules={{\r\n          required: true,\r\n        }}\r\n        render={({ field: { onChange, value } }) => (\r\n          <Form.Item\r\n            validateStatus={error ? \"error\" : \"success\"}\r\n            help={error?.message}\r\n            className=\"input\"\r\n          >\r\n            {isTextArea ? (\r\n              <Input.TextArea\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            ) : (\r\n              <Input\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                maxLength={maxLength}\r\n                disabled={fieldName === \"phoneNumber\"}\r\n              />\r\n            )}\r\n          </Form.Item>\r\n        )}\r\n        name={fieldName}\r\n        defaultValue={defaultValue as string}\r\n      />\r\n    );\r\n  }\r\n  if (fieldName === \"eMail\") {\r\n    return <a href={`mailto:${defaultValue}`}>{defaultValue}</a>;\r\n  }\r\n  if (fieldName === \"webSite\" && defaultValue) {\r\n    return (\r\n      <a href={defaultValue as string} target=\"_blank\" rel=\"noreferrer\">\r\n        {truncateString(defaultValue as string, 25)}\r\n      </a>\r\n    );\r\n  }\r\n  return <Text>{defaultValue}</Text>;\r\n};\r\n\r\nexport default React.memo(ContractorEditableField);\r\n","import { Card, Divider, TreeSelect, Typography } from \"antd\";\r\nimport { DataNode } from \"antd/lib/tree\";\r\nimport React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport { ContactsForm, ImagesList, UploadFileForm } from \"../../../components\";\r\nimport { AttachmentOutType } from \"../../../models/Attachments\";\r\nimport {\r\n  ContractorTypesEnum,\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n} from \"../../../models/Contractors\";\r\nimport { SaveContactsResponse } from \"../../../models/types\";\r\n\r\nimport ContractorEditableField from \"./ContractorEditableField\";\r\n\r\nconst { Text } = Typography;\r\n\r\ntype ContractorInfoBodyPropsType = {\r\n  defaultValue: string;\r\n  editMode: boolean;\r\n  control: Control<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    object\r\n  >;\r\n  error?: FieldError;\r\n  categoriesTree: DataNode[];\r\n  selectedCategories: number[];\r\n  handleSelectCategories: (value: number[]) => void;\r\n  handleRemoveImage: (imageId: number) => void;\r\n  handleRemoveAvatar: (imageId: number) => void;\r\n  handleAddImage: (e: Event) => void;\r\n  handleAddAvatar: (e: Event) => void;\r\n  imageUploading: boolean;\r\n  images: AttachmentOutType[];\r\n  registeringType: ContractorTypesEnum;\r\n  avatars?: AttachmentOutType[];\r\n  otherPhones: string[];\r\n  avatarUploading: boolean;\r\n  setOtherPhone: (values: SaveContactsResponse) => void;\r\n};\r\n\r\nconst { SHOW_ALL } = TreeSelect;\r\n\r\nconst ContractorInfoBody: React.FC<ContractorInfoBodyPropsType> = ({\r\n  defaultValue,\r\n  editMode,\r\n  control,\r\n  error,\r\n  categoriesTree,\r\n  selectedCategories,\r\n  handleSelectCategories,\r\n  handleRemoveImage,\r\n  handleAddImage,\r\n  handleRemoveAvatar,\r\n  imageUploading,\r\n  images,\r\n  registeringType,\r\n  avatars,\r\n  handleAddAvatar,\r\n  avatarUploading,\r\n  otherPhones,\r\n  setOtherPhone,\r\n}) => {\r\n  return (\r\n    <div className=\"contractor__body\">\r\n      <Card>\r\n        {registeringType === ContractorTypesEnum.SUPPLIER && (\r\n          <>\r\n            <Divider>Описание</Divider>\r\n            <ContractorEditableField\r\n              defaultValue={defaultValue}\r\n              editMode={editMode}\r\n              control={control}\r\n              error={error}\r\n              fieldName=\"description\"\r\n              placeholder=\"Описание\"\r\n              isTextArea\r\n            />\r\n            <Divider>Категории</Divider>\r\n            {categoriesTree && (\r\n              <TreeSelect\r\n                treeData={categoriesTree}\r\n                value={selectedCategories}\r\n                onChange={handleSelectCategories}\r\n                treeCheckable={true}\r\n                showCheckedStrategy={SHOW_ALL}\r\n                placeholder={\r\n                  editMode ? \"Выберите категории контрагента\" : \"Категории\"\r\n                }\r\n                style={{ width: \"100%\", marginBottom: 10 }}\r\n                // maxTagCount={5}\r\n                disabled={!editMode}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n        {avatars && (\r\n          <>\r\n            <Divider>Аватар</Divider>\r\n            <div className=\"contractor__images\">\r\n              <ImagesList\r\n                removeImage={handleRemoveAvatar}\r\n                images={avatars}\r\n                editMode={editMode}\r\n              />\r\n              {editMode && (\r\n                <UploadFileForm\r\n                  onChange={handleAddAvatar}\r\n                  isUploading={avatarUploading}\r\n                  buttonText=\"Аватар\"\r\n                />\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n        <Divider>Фото</Divider>\r\n        <div className=\"contractor__images\">\r\n          <ImagesList\r\n            removeImage={handleRemoveImage}\r\n            images={images}\r\n            editMode={editMode}\r\n          />\r\n          {editMode && (\r\n            <UploadFileForm\r\n              onChange={handleAddImage}\r\n              isUploading={imageUploading}\r\n              buttonText=\"Фото\"\r\n            />\r\n          )}\r\n        </div>\r\n        <Divider>Контактные номера</Divider>\r\n        {editMode ? (\r\n          <ContactsForm\r\n            onFinish={setOtherPhone}\r\n            initialValues={{\r\n              contacts: otherPhones.map((phone) => ({ phoneNumber: phone })),\r\n            }}\r\n          />\r\n        ) : (\r\n          otherPhones.map((phone, index) => (\r\n            <div key={`${phone}_${index}`}>\r\n              <Text>{phone}</Text>\r\n            </div>\r\n          ))\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContractorInfoBody);\r\n","import { Button, Descriptions, Radio, RadioChangeEvent } from \"antd\";\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\";\r\nimport React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n  ContractorType,\r\n  ContractorTypesEnum,\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n} from \"../../../models/Contractors\";\r\nimport { getDateFromNow } from \"../../../utils/formatter\";\r\nimport ContractorEditableField from \"./ContractorEditableField\";\r\n\r\ntype ContractorDescriptionPropsType = {\r\n  editMode: boolean;\r\n  handleSelectRegType: (e: RadioChangeEvent) => void;\r\n  toggleShowMap: () => void;\r\n  registeringType: ContractorTypesEnum;\r\n  contractor: ContractorType;\r\n  control: Control<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    object\r\n  >;\r\n  errors:\r\n    | {\r\n        name?: FieldError;\r\n        phoneNumber?: FieldError;\r\n        contactName?: FieldError;\r\n        location?: FieldError;\r\n        webSite?: FieldError;\r\n        eMail?: FieldError;\r\n        address?: FieldError;\r\n        description?: FieldError;\r\n      }\r\n    | {\r\n        name?: FieldError;\r\n        phoneNumber?: FieldError;\r\n        contactName?: FieldError;\r\n        location?: FieldError;\r\n      };\r\n};\r\n\r\nconst ContractorDescription: React.FC<ContractorDescriptionPropsType> = ({\r\n  editMode,\r\n  handleSelectRegType,\r\n  registeringType,\r\n  contractor,\r\n  control,\r\n  errors,\r\n  toggleShowMap,\r\n}) => {\r\n  const { xxl } = useBreakpoint();\r\n\r\n  return (\r\n    <>\r\n      <Descriptions\r\n        size=\"small\"\r\n        column={xxl ? 4 : 3}\r\n        // layout={xl ? \"horizontal\" : \"vertical\"}\r\n        layout={\"vertical\"}\r\n        labelStyle={{ fontWeight: \"bold\" }}\r\n      >\r\n        <Descriptions.Item label=\"Тип контрагента\">\r\n          {editMode ? (\r\n            <Radio.Group onChange={handleSelectRegType} value={registeringType}>\r\n              <Radio value={ContractorTypesEnum.SUPPLIER}>Поставщик</Radio>\r\n              <Radio value={ContractorTypesEnum.CUSTOMER}>Заказчик</Radio>\r\n            </Radio.Group>\r\n          ) : contractor.contractorType === ContractorTypesEnum.CUSTOMER ? (\r\n            \"Заказчик\"\r\n          ) : (\r\n            \"Поставщик\"\r\n          )}\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Заявки контрагента\">\r\n          <NavLink to={`/orders/?contractor=${contractor.id}`}>\r\n            Посмотреть\r\n          </NavLink>\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Контактное лицо\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.contactName}\r\n            editMode={editMode}\r\n            control={control}\r\n            error={errors.contactName}\r\n            fieldName=\"contactName\"\r\n            placeholder=\"Контактное лицо\"\r\n          />\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item label=\"Город\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.location}\r\n            editMode={editMode}\r\n            control={control}\r\n            error={errors.location}\r\n            fieldName=\"location\"\r\n            placeholder=\"Город\"\r\n          />\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Координаты\">\r\n          <Button size=\"small\" type=\"link\" onClick={toggleShowMap}>\r\n            Посмотреть на карте\r\n          </Button>\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item label=\"Сайт\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.contacts.webSite}\r\n            editMode={editMode}\r\n            control={control}\r\n            //@ts-ignore\r\n            error={errors.webSite}\r\n            fieldName=\"webSite\"\r\n            placeholder=\"Сайт\"\r\n          />\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Почта\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.contacts.eMail}\r\n            editMode={editMode}\r\n            control={control}\r\n            //@ts-ignore\r\n            error={errors.eMail}\r\n            fieldName=\"eMail\"\r\n            placeholder=\"Почта\"\r\n          />\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Адрес\">\r\n          <ContractorEditableField\r\n            defaultValue={contractor.contacts.address}\r\n            editMode={editMode}\r\n            control={control}\r\n            //@ts-ignore\r\n            error={errors.address}\r\n            fieldName=\"address\"\r\n            placeholder=\"Адрес\"\r\n          />\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item label=\"Телефон\">\r\n          <ContractorEditableField\r\n            defaultValue={`+${contractor.phoneNumber}`}\r\n            editMode={editMode}\r\n            control={control}\r\n            error={errors.phoneNumber}\r\n            fieldName=\"phoneNumber\"\r\n            placeholder=\"Телефон\"\r\n            maxLength={12}\r\n          />\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Идентификатор контрагента\">\r\n          {contractor.id}\r\n        </Descriptions.Item>\r\n        <Descriptions.Item label=\"Зарегистрировался\">\r\n          {getDateFromNow(contractor.creationDate)}\r\n        </Descriptions.Item>\r\n      </Descriptions>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContractorDescription);\r\n","import React from \"react\";\r\nimport { Layout, PageHeader, Button, Card, RadioChangeEvent, Rate } from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { ActionStatusEnum, SaveContactsResponse } from \"../../models/types\";\r\nimport { customerSchema, supplierSchema } from \"../../utils/validatorsSchemes\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { AppAlert, AppMap, AppPreloader } from \"../../components\";\r\n\r\nimport { getCategoriesTreeDataState } from \"../../store/selectors/categories\";\r\nimport {\r\n  getContractorAvatarsState,\r\n  getContractorAvatarUploadingState,\r\n  getContractorImagesState,\r\n  getContractorImageUploadingState,\r\n  getContractorsActionStatusState,\r\n  getContractorsErrorMessage,\r\n  getContractorsLoadingState,\r\n  getCurrentContractorState,\r\n} from \"../../store/selectors/contractors\";\r\nimport {\r\n  addContractorAvatar,\r\n  addContractorImage,\r\n  contractorActions,\r\n  deleteContractor,\r\n  getContractorById,\r\n  removeContractorAvatar,\r\n  removeContractorImage,\r\n  updateContractor,\r\n} from \"../../store/actions/contractors\";\r\nimport {\r\n  ContractorDescription,\r\n  ContractorEditableField,\r\n  ContractorInfoBody,\r\n} from \"./components\";\r\nimport {\r\n  AddContractorFormDataType,\r\n  ContractorTypesEnum,\r\n  CoordinatesType,\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n} from \"../../models/Contractors\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst ContractorPage = () => {\r\n  const [editMode, setEditMode] = React.useState(false);\r\n  const [selectedCategories, setSelectedCategories] = React.useState<number[]>(\r\n    []\r\n  );\r\n  const [latLng, setLatLng] = React.useState<CoordinatesType | null>(null);\r\n  const [registeringType, setRegisteringType] =\r\n    React.useState<ContractorTypesEnum>(ContractorTypesEnum.SUPPLIER);\r\n  const [showMap, setShowMap] = React.useState(false);\r\n\r\n  const [otherPhoneNumbers, setOtherPhoneNumber] = React.useState<string[]>([]);\r\n\r\n  const contractor = useSelector(getCurrentContractorState);\r\n  const contractorActionStatus = useSelector(getContractorsActionStatusState);\r\n  const contractorError = useSelector(getContractorsErrorMessage);\r\n  const contractorLoadingState = useSelector(getContractorsLoadingState);\r\n\r\n  const contractorAvatars = useSelector(getContractorAvatarsState);\r\n  const avatarUploading = useSelector(getContractorAvatarUploadingState);\r\n\r\n  const contractorImages = useSelector(getContractorImagesState);\r\n  const contractorImageUploading = useSelector(\r\n    getContractorImageUploadingState\r\n  );\r\n\r\n  const categoriesTree = useSelector(getCategoriesTreeDataState);\r\n\r\n  const { contractorId }: { contractorId?: string } = useParams();\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm<SupplierDescrFormDataType | CustomerDescrFormDataType>({\r\n    resolver: yupResolver(\r\n      registeringType === ContractorTypesEnum.SUPPLIER\r\n        ? supplierSchema\r\n        : customerSchema\r\n    ),\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // console.log(\"error ---> \", errors.phoneNumber);\r\n  // console.log(\"watch ---> \", watch(\"phoneNumber\"));\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(contractorActions.setCurrentContractor(null));\r\n    dispatch(contractorActions.clearContractorImages());\r\n  }, [dispatch]);\r\n\r\n  const toggleEditMode = React.useCallback(() => {\r\n    setEditMode((prev) => {\r\n      dispatch(\r\n        contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n      );\r\n      return !prev;\r\n    });\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getContractorById(Number(contractorId)));\r\n    return () => {\r\n      clearState();\r\n    };\r\n  }, [clearState, dispatch, contractorId]);\r\n\r\n  React.useEffect(() => {\r\n    if (contractor) {\r\n      setSelectedCategories(\r\n        contractor.categories?.map((category) => category.categoryId)\r\n      );\r\n      setRegisteringType(contractor.contractorType);\r\n      setLatLng({\r\n        coordinatesLatitude: contractor.coordinates.coordinatesLatitude,\r\n        coordinatesLongitude: contractor.coordinates.coordinatesLongitude,\r\n      });\r\n      dispatch(contractorActions.setContractorImages(contractor.attachments));\r\n      dispatch(contractorActions.addContractorAvatar(contractor.avatars));\r\n      setOtherPhoneNumber(contractor.otherPhoneNumbers);\r\n    }\r\n  }, [contractor, dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    // ВО ВРЕМЯ УДАЛЕНИЯ\r\n    if (!contractor && contractorActionStatus === ActionStatusEnum.SUCCESS) {\r\n      history.push(\"/contractors\");\r\n    }\r\n  }, [history, contractor, contractorActionStatus]);\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    if (contractor) {\r\n      const categories = selectedCategories.map((categoryId) => ({\r\n        categoryId,\r\n      }));\r\n\r\n      const newContractor: AddContractorFormDataType = {\r\n        name: formData.name,\r\n        contactName: formData.contactName,\r\n        // phoneNumber: `7${String(formData.phoneNumber).slice(-10)}`,\r\n        phoneNumber: contractor.phoneNumber,\r\n        //@ts-ignore\r\n        description: formData.description ? formData.description : \"\",\r\n        location: formData.location,\r\n        coordinates: latLng\r\n          ? latLng\r\n          : {\r\n              coordinatesLatitude: \"\",\r\n              coordinatesLongitude: \"\",\r\n            },\r\n        contacts: {\r\n          //@ts-ignore\r\n          address: formData.address ? formData.address : \"\",\r\n          //@ts-ignore\r\n          webSite: formData.webSite ? formData.webSite : \"\",\r\n          //@ts-ignore\r\n          eMail: formData.eMail ? formData.eMail : \"\",\r\n        },\r\n        contractorType: registeringType,\r\n        categories,\r\n        attachments: contractorImages.map((image) => ({\r\n          attachmentId: image.id,\r\n        })),\r\n        avatars: contractorAvatars.map((image) => ({\r\n          attachmentId: image.id,\r\n        })),\r\n        otherPhoneNumbers,\r\n      };\r\n      setEditMode(false);\r\n      dispatch(updateContractor(newContractor, contractor.id));\r\n    }\r\n  });\r\n\r\n  const goBack = () => window.history.back();\r\n\r\n  const handleSelectCategories = React.useCallback((value: number[]) => {\r\n    setSelectedCategories(value);\r\n  }, []);\r\n\r\n  const handleDeleteContractor = React.useCallback(() => {\r\n    const answer = window.confirm(\"Вы уверены что хотите удалить контрагента?\");\r\n    if (answer && contractor) {\r\n      dispatch(deleteContractor(contractor.id));\r\n    }\r\n  }, [contractor, dispatch]);\r\n\r\n  const handleSelectRegType = React.useCallback((e: RadioChangeEvent) => {\r\n    setRegisteringType(e.target.value);\r\n  }, []);\r\n\r\n  const handleCancelEdit = React.useCallback(() => {\r\n    toggleEditMode();\r\n    if (contractor) {\r\n      setSelectedCategories(\r\n        contractor.categories?.map((category) => category.categoryId)\r\n      );\r\n      setLatLng({\r\n        coordinatesLatitude: contractor.coordinates.coordinatesLatitude,\r\n        coordinatesLongitude: contractor.coordinates.coordinatesLongitude,\r\n      });\r\n      dispatch(contractorActions.clearContractorImages());\r\n      dispatch(contractorActions.setContractorImages(contractor.attachments));\r\n      dispatch(contractorActions.addContractorAvatar(contractor.avatars));\r\n      setOtherPhoneNumber(contractor.otherPhoneNumbers);\r\n      reset({\r\n        name: contractor.name,\r\n        phoneNumber: contractor.phoneNumber,\r\n        contactName: contractor.contactName,\r\n        location: contractor.location,\r\n        webSite: contractor.contacts.webSite,\r\n        eMail: contractor.contacts.eMail,\r\n        address: contractor.contacts.address,\r\n        description: contractor.description,\r\n      });\r\n    }\r\n  }, [contractor, dispatch, reset, toggleEditMode]);\r\n\r\n  const toggleShowMap = React.useCallback(() => {\r\n    setShowMap(!showMap);\r\n  }, [showMap]);\r\n\r\n  const handleSelectCoords = React.useCallback(\r\n    (latLng: google.maps.LatLng | null) => {\r\n      if (editMode) {\r\n        setLatLng({\r\n          coordinatesLatitude: String(latLng?.lat()),\r\n          coordinatesLongitude: String(latLng?.lng()),\r\n        });\r\n      }\r\n    },\r\n    [editMode]\r\n  );\r\n\r\n  const handleUploadImage = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n    if (file) {\r\n      dispatch(addContractorImage(file));\r\n    }\r\n  };\r\n\r\n  const handleUploadAvatar = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n    if (file) {\r\n      dispatch(addContractorAvatar(file));\r\n    }\r\n  };\r\n\r\n  const handleRemoveImage = (imageId: number) => {\r\n    if (contractor) {\r\n      dispatch(removeContractorImage(contractor.id, imageId));\r\n    }\r\n  };\r\n\r\n  const handleRemoveAvatar = (imageId: number) => {\r\n    if (contractor) {\r\n      dispatch(removeContractorAvatar(contractor.id, imageId));\r\n    }\r\n  };\r\n\r\n  const checkDisabledBtn = React.useCallback(() => {\r\n    if (registeringType === ContractorTypesEnum.SUPPLIER) {\r\n      return (\r\n        Object.keys(errors).length !== 0 || selectedCategories.length === 0\r\n      );\r\n    }\r\n    return Object.keys(errors).length !== 0;\r\n  }, [errors, registeringType, selectedCategories.length]);\r\n\r\n  const handleSaveOtherPhones = (values: SaveContactsResponse) => {\r\n    const parsedPhones = values.contacts.map((phone) => phone.phoneNumber);\r\n    setOtherPhoneNumber(parsedPhones);\r\n  };\r\n\r\n  const getEditActionsButtons = () => {\r\n    return [\r\n      <Button key=\"1\" onClick={onSubmit} disabled={checkDisabledBtn()}>\r\n        Сохранить\r\n      </Button>,\r\n      <Button key=\"2\" onClick={handleCancelEdit} danger>\r\n        Отменить\r\n      </Button>,\r\n    ];\r\n  };\r\n\r\n  const getActionsButtons = () => {\r\n    return [\r\n      <Rate\r\n        defaultValue={contractor?.rating ? contractor.rating : 0}\r\n        disabled\r\n        key={\"3\"}\r\n      />,\r\n\r\n      <Button key=\"4\" onClick={toggleEditMode}>\r\n        Редактировать\r\n      </Button>,\r\n      <Button key=\"5\" onClick={handleDeleteContractor} danger>\r\n        Удалить\r\n      </Button>,\r\n    ];\r\n  };\r\n\r\n  const editActionsButtons = React.useMemo(getEditActionsButtons, [\r\n    checkDisabledBtn,\r\n    handleCancelEdit,\r\n    onSubmit,\r\n  ]);\r\n  const actionButtons = React.useMemo(getActionsButtons, [\r\n    contractor?.rating,\r\n    handleDeleteContractor,\r\n    toggleEditMode,\r\n  ]);\r\n\r\n  if (showMap) {\r\n    return (\r\n      <Content className=\"content\">\r\n        <div className=\"map__header\">\r\n          <Button className=\"map-btn\" type=\"default\" onClick={toggleShowMap}>\r\n            Назад\r\n          </Button>\r\n          {latLng && editMode && (\r\n            <Button onClick={toggleShowMap}>Сохранить</Button>\r\n          )}\r\n        </div>\r\n\r\n        <AppMap\r\n          containerElement={<Card className=\"map\" />}\r\n          mapElement={<div className=\"map-element\" />}\r\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAsGwKuUn_xR3sDbzuebV85dIrgJMi5OpA&v=3.exp&libraries=geometry,drawing,places\"\r\n          loadingElement={<AppPreloader />}\r\n          handleSelectCoords={handleSelectCoords}\r\n          marker={latLng}\r\n        />\r\n      </Content>\r\n    );\r\n  }\r\n\r\n  if (contractorLoadingState) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={() =>\r\n          dispatch(\r\n            contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n          )\r\n        }\r\n        errorMessage={contractorError}\r\n        status={contractorActionStatus}\r\n        successMessage=\"Изменения успешно сохранены\"\r\n      />\r\n      {contractor && (\r\n        <>\r\n          <div className=\"page-header\">\r\n            <PageHeader\r\n              ghost={false}\r\n              onBack={goBack}\r\n              title={\r\n                <ContractorEditableField\r\n                  defaultValue={contractor.name}\r\n                  editMode={editMode}\r\n                  control={control}\r\n                  error={errors.name}\r\n                  fieldName=\"name\"\r\n                  placeholder=\"Название\"\r\n                />\r\n              }\r\n              extra={editMode ? editActionsButtons : actionButtons}\r\n            >\r\n              <ContractorDescription\r\n                editMode={editMode}\r\n                handleSelectRegType={handleSelectRegType}\r\n                registeringType={registeringType}\r\n                contractor={contractor}\r\n                control={control}\r\n                errors={errors}\r\n                toggleShowMap={toggleShowMap}\r\n              />\r\n            </PageHeader>\r\n          </div>\r\n          <ContractorInfoBody\r\n            defaultValue={contractor.description}\r\n            editMode={editMode}\r\n            control={control}\r\n            //@ts-ignore\r\n            error={errors.description}\r\n            categoriesTree={categoriesTree}\r\n            selectedCategories={selectedCategories}\r\n            handleSelectCategories={handleSelectCategories}\r\n            images={contractorImages}\r\n            registeringType={registeringType}\r\n            handleRemoveImage={handleRemoveImage}\r\n            handleAddImage={handleUploadImage}\r\n            imageUploading={contractorImageUploading}\r\n            avatars={contractorAvatars}\r\n            otherPhones={contractor.otherPhoneNumbers}\r\n            handleRemoveAvatar={handleRemoveAvatar}\r\n            avatarUploading={avatarUploading}\r\n            handleAddAvatar={handleUploadAvatar}\r\n            setOtherPhone={handleSaveOtherPhones}\r\n          />\r\n        </>\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ContractorPage;\r\n","import { Form, Typography, Input } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, Controller, FieldError } from \"react-hook-form\";\r\nimport {\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n  SupplierFieldsNameType,\r\n} from \"../../../models/Contractors\";\r\n\r\ntype ContractorFieldPropsType = {\r\n  subtitle: string;\r\n  fieldName: SupplierFieldsNameType;\r\n  required: boolean;\r\n  maxLength?: number;\r\n  control?: Control<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    object\r\n  >;\r\n  error?: FieldError;\r\n  textArea?: boolean;\r\n  defaultValue?: string;\r\n};\r\n\r\nconst { Text } = Typography;\r\n\r\nconst ContractorField: React.FC<ContractorFieldPropsType> = ({\r\n  control,\r\n  error,\r\n  subtitle,\r\n  fieldName,\r\n  required = true,\r\n  maxLength,\r\n  textArea,\r\n  defaultValue,\r\n}) => {\r\n  const InputField = textArea ? Input.TextArea : Input;\r\n\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      rules={{ required }}\r\n      render={({ field: { onChange, value } }) => (\r\n        <Form.Item\r\n          validateStatus={error ? \"error\" : \"success\"}\r\n          help={error?.message}\r\n          className=\"input form__input\"\r\n          required={required}\r\n        >\r\n          <Text className=\"subtitle\">{subtitle}</Text>\r\n          <InputField\r\n            placeholder={subtitle}\r\n            value={value}\r\n            onChange={onChange}\r\n            maxLength={maxLength}\r\n          />\r\n        </Form.Item>\r\n      )}\r\n      name={fieldName}\r\n      defaultValue={defaultValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContractorField;\r\n","import React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport {\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n  SupplierFieldsNameType,\r\n} from \"../../../models/Contractors\";\r\nimport ContractorField from \"./ContractorField\";\r\n\r\nconst fields = [\r\n  {\r\n    id: \"1\",\r\n    fieldName: \"name\",\r\n    subtitle: \"Название организации\",\r\n    required: true,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    fieldName: \"contactName\",\r\n    subtitle: \"Контактное лицо\",\r\n    required: true,\r\n  },\r\n  { id: \"3\", fieldName: \"location\", subtitle: \"Город\", required: true },\r\n  { id: \"4\", fieldName: \"address\", subtitle: \"Адрес\", required: true },\r\n  { id: \"5\", fieldName: \"eMail\", subtitle: \"Почта\", required: false },\r\n  { id: \"6\", fieldName: \"webSite\", subtitle: \"Сайт компании\", required: false },\r\n  {\r\n    id: \"7\",\r\n    fieldName: \"phoneNumber\",\r\n    subtitle: \"Номер телефона для авторизации\",\r\n    maxLength: 12,\r\n    required: true,\r\n    defaultValue: \"+7\",\r\n  },\r\n  {\r\n    id: \"8\",\r\n    fieldName: \"description\",\r\n    subtitle: \"Описание\",\r\n    required: false,\r\n    textArea: true,\r\n  },\r\n];\r\n\r\ntype SupplierDescrFormPropsType = {\r\n  control?: Control<\r\n    SupplierDescrFormDataType | CustomerDescrFormDataType,\r\n    object\r\n  >;\r\n  errors: {\r\n    name?: FieldError;\r\n    phoneNumber?: FieldError;\r\n    contactName?: FieldError;\r\n    location?: FieldError;\r\n    webSite?: FieldError;\r\n    eMail?: FieldError;\r\n    address?: FieldError;\r\n    description?: FieldError;\r\n  };\r\n};\r\n\r\nconst SupplierDescrForm: React.FC<SupplierDescrFormPropsType> = ({\r\n  control,\r\n  errors,\r\n}) => {\r\n  return (\r\n    <>\r\n      {fields.map((field) => {\r\n        return (\r\n          <ContractorField\r\n            key={field.id}\r\n            control={control}\r\n            error={errors[field.fieldName as SupplierFieldsNameType]}\r\n            subtitle={field.subtitle}\r\n            fieldName={field.fieldName as SupplierFieldsNameType}\r\n            required={field.required}\r\n            maxLength={field.maxLength}\r\n            textArea={field.textArea}\r\n            defaultValue={field.defaultValue}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SupplierDescrForm;\r\n","import { Button, TreeSelect } from \"antd\";\r\nimport { DataNode } from \"antd/lib/tree\";\r\nimport React from \"react\";\r\nimport { ContactsForm, UploadFileForm } from \"../../../components\";\r\nimport { CoordinatesType } from \"../../../models/Contractors\";\r\nimport { SaveContactsResponse } from \"../../../models/types\";\r\n\r\nconst { SHOW_ALL } = TreeSelect;\r\n\r\ntype SupplierSpecInfoPropsType = {\r\n  categoriesTree: DataNode[];\r\n  selectedCategories: number[];\r\n  handleSelectCategories: (value: number[]) => void;\r\n  toggleShowMap: () => void;\r\n  latLng: CoordinatesType | null;\r\n  handleUploadImage: (e: Event) => Promise<void>;\r\n  contractorImageUploading: boolean;\r\n  setOtherPhoneNumbers: React.Dispatch<React.SetStateAction<string[]>>;\r\n};\r\n\r\nconst SupplierSpecInfo: React.FC<SupplierSpecInfoPropsType> = ({\r\n  categoriesTree,\r\n  selectedCategories,\r\n  handleSelectCategories,\r\n  toggleShowMap,\r\n  latLng,\r\n  handleUploadImage,\r\n  contractorImageUploading,\r\n  setOtherPhoneNumbers,\r\n}) => {\r\n  const onFinish = (values: SaveContactsResponse) => {\r\n    const parsedPhones: string[] = values.contacts.map(\r\n      (contact) => contact.phoneNumber\r\n    );\r\n\r\n    setOtherPhoneNumbers(parsedPhones);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TreeSelect\r\n        treeData={categoriesTree}\r\n        value={selectedCategories}\r\n        onChange={handleSelectCategories}\r\n        treeCheckable={true}\r\n        showCheckedStrategy={SHOW_ALL}\r\n        placeholder={\"Выберите категории контрагента\"}\r\n        style={{ width: \"100%\", marginBottom: 10 }}\r\n        maxTagCount={5}\r\n      />\r\n      <Button className=\"map-btn\" type=\"default\" onClick={toggleShowMap} block>\r\n        {latLng ? \"Изменить координаты\" : \"Отметить на карте\"}\r\n      </Button>\r\n      <UploadFileForm\r\n        onChange={handleUploadImage}\r\n        isUploading={contractorImageUploading}\r\n        buttonText=\"Фото\"\r\n      />\r\n      <ContactsForm onFinish={onFinish} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SupplierSpecInfo;\r\n","import React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport {\r\n  CustomerDescrFormDataType,\r\n  CustomerFieldsNameType,\r\n} from \"../../../models/Contractors\";\r\nimport ContractorField from \"./ContractorField\";\r\n\r\nconst fields = [\r\n  {\r\n    id: \"1\",\r\n    fieldName: \"name\",\r\n    subtitle: \"Название организации\",\r\n    required: true,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    fieldName: \"contactName\",\r\n    subtitle: \"Контактное лицо\",\r\n    required: true,\r\n  },\r\n  { id: \"3\", fieldName: \"location\", subtitle: \"Город\", required: true },\r\n  {\r\n    id: \"7\",\r\n    fieldName: \"phoneNumber\",\r\n    subtitle: \"Номер телефона для авторизации\",\r\n    maxLength: 12,\r\n    required: true,\r\n    defaultValue: \"+7\",\r\n  },\r\n];\r\n\r\ntype CustomerDescrFormPropsType = {\r\n  control?: Control<CustomerDescrFormDataType, object>;\r\n  errors: {\r\n    name?: FieldError;\r\n    phoneNumber?: FieldError;\r\n    contactName?: FieldError;\r\n    location?: FieldError;\r\n  };\r\n};\r\n\r\nconst CustomerDescrForm: React.FC<CustomerDescrFormPropsType> = ({\r\n  control,\r\n  errors,\r\n}) => {\r\n  return (\r\n    <>\r\n      {fields.map((field) => {\r\n        return (\r\n          <ContractorField\r\n            key={field.id}\r\n            control={control}\r\n            error={errors[field.fieldName as CustomerFieldsNameType]}\r\n            subtitle={field.subtitle}\r\n            fieldName={field.fieldName as CustomerFieldsNameType}\r\n            required={field.required}\r\n            maxLength={field.maxLength}\r\n            defaultValue={field.defaultValue}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomerDescrForm;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Radio,\r\n  Layout,\r\n  Typography,\r\n  RadioChangeEvent,\r\n} from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  AppAlert,\r\n  AppMap,\r\n  AppPreloader,\r\n  ImagesList,\r\n  UploadFileForm,\r\n} from \"../../components\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { customerSchema, supplierSchema } from \"../../utils/validatorsSchemes\";\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoriesTreeDataState,\r\n} from \"../../store/selectors/categories\";\r\nimport { categoriesActions } from \"../../store/actions/categories\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  addContractorAvatar,\r\n  addContractorImage,\r\n  contractorActions,\r\n  createContractorProfile,\r\n  removeNewContractorAvatar,\r\n  removeNewContractorImage,\r\n} from \"../../store/actions/contractors\";\r\nimport {\r\n  getContractorAvatarsState,\r\n  getContractorAvatarUploadingState,\r\n  getContractorImagesState,\r\n  getContractorImageUploadingState,\r\n  getContractorsActionStatusState,\r\n  getContractorsErrorMessage,\r\n  getContractorsLoadingState,\r\n  getCurrentContractorState,\r\n} from \"../../store/selectors/contractors\";\r\nimport { SupplierDescrForm, SupplierSpecInfo } from \"./components\";\r\nimport CustomerDescrForm from \"./components/CustomerDescrForm\";\r\nimport {\r\n  AddContractorFormDataType,\r\n  ContractorTypesEnum,\r\n  CoordinatesType,\r\n  CustomerDescrFormDataType,\r\n  SupplierDescrFormDataType,\r\n} from \"../../models/Contractors\";\r\n\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\n\r\nconst ContractorCreatePage = () => {\r\n  const [selectedCategories, setSelectedCategories] = React.useState<number[]>(\r\n    []\r\n  );\r\n  const [registeringType, setRegisteringType] =\r\n    React.useState<ContractorTypesEnum>(ContractorTypesEnum.SUPPLIER);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm<SupplierDescrFormDataType | CustomerDescrFormDataType>({\r\n    resolver: yupResolver(\r\n      registeringType === ContractorTypesEnum.SUPPLIER\r\n        ? supplierSchema\r\n        : customerSchema\r\n    ),\r\n  });\r\n\r\n  const [showMap, setShowMap] = React.useState(false);\r\n  const [latLng, setLatLng] = React.useState<CoordinatesType | null>(null);\r\n  const [otherPhoneNumbers, setOtherPhoneNumbers] = React.useState<string[]>(\r\n    []\r\n  );\r\n\r\n  const contractorActionStatus = useSelector(getContractorsActionStatusState);\r\n  const contractorError = useSelector(getContractorsErrorMessage);\r\n  const contractorLoading = useSelector(getContractorsLoadingState);\r\n  const currentContractor = useSelector(getCurrentContractorState);\r\n\r\n  const contractorImages = useSelector(getContractorImagesState);\r\n  const contractorImageUploading = useSelector(\r\n    getContractorImageUploadingState\r\n  );\r\n\r\n  const contractorAvatars = useSelector(getContractorAvatarsState);\r\n  const avatarUploading = useSelector(getContractorAvatarUploadingState);\r\n\r\n  const categoriesTree = useSelector(getCategoriesTreeDataState);\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const clearContractorsState = React.useCallback(() => {\r\n    dispatch(\r\n      contractorActions.setContractorsActionstatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(contractorActions.setContractorsErrorMessage(null));\r\n    dispatch(contractorActions.clearContractorImages());\r\n  }, [dispatch]);\r\n\r\n  const clearCategoriesState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      clearContractorsState();\r\n      clearCategoriesState();\r\n    };\r\n  }, [clearCategoriesState, clearContractorsState]);\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      currentContractor &&\r\n      contractorActionStatus === ActionStatusEnum.SUCCESS\r\n    ) {\r\n      history.push(`/contractors/${currentContractor.id}`);\r\n    }\r\n  }, [currentContractor, history, contractorActionStatus]);\r\n\r\n  const handleSelectCategories = (value: number[]) => {\r\n    setSelectedCategories(value);\r\n  };\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    const categories = selectedCategories.map((categoryId) => ({\r\n      categoryId,\r\n    }));\r\n\r\n    const newContractor: AddContractorFormDataType = {\r\n      name: formData.name,\r\n      contactName: formData.contactName,\r\n      phoneNumber: `7${String(formData.phoneNumber).slice(-10)}`,\r\n      //@ts-ignore\r\n      description: formData.description ? formData.description : \"\",\r\n      location: formData.location,\r\n      coordinates: latLng\r\n        ? latLng\r\n        : {\r\n            coordinatesLatitude: \"\",\r\n            coordinatesLongitude: \"\",\r\n          },\r\n      contacts: {\r\n        //@ts-ignore\r\n        address: formData.address ? formData.address : \"\",\r\n        //@ts-ignore\r\n        webSite: formData.webSite ? formData.webSite : \"\",\r\n        //@ts-ignore\r\n        eMail: formData.eMail ? formData.eMail : \"\",\r\n      },\r\n      contractorType: registeringType,\r\n      categories,\r\n      attachments: contractorImages.map((image) => ({\r\n        attachmentId: image.id,\r\n      })),\r\n      avatars: contractorAvatars.map((avatar) => ({\r\n        attachmentId: avatar.id,\r\n      })),\r\n      otherPhoneNumbers,\r\n    };\r\n    dispatch(createContractorProfile(newContractor));\r\n  });\r\n\r\n  const handleSelectRegType = (e: RadioChangeEvent) => {\r\n    reset();\r\n    setRegisteringType(e.target.value);\r\n  };\r\n\r\n  const toggleShowMap = () => {\r\n    setShowMap(!showMap);\r\n  };\r\n\r\n  const handleSelectCoords = (latLng: google.maps.LatLng | null) => {\r\n    setLatLng({\r\n      coordinatesLatitude: String(latLng?.lat()),\r\n      coordinatesLongitude: String(latLng?.lng()),\r\n    });\r\n  };\r\n\r\n  const handleRemoveImage = (imageId: number) => {\r\n    dispatch(removeNewContractorImage(imageId));\r\n  };\r\n\r\n  const handleRemoveAvatar = (imageId: number) => {\r\n    dispatch(removeNewContractorAvatar(imageId));\r\n  };\r\n\r\n  const handleUploadImage = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n    if (file) {\r\n      dispatch(addContractorImage(file));\r\n    }\r\n  };\r\n\r\n  const handleUploadAvatar = async (e: Event) => {\r\n    const target = e.currentTarget as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n    if (file) {\r\n      dispatch(addContractorAvatar(file));\r\n    }\r\n  };\r\n\r\n  if (contractorLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  if (showMap) {\r\n    return (\r\n      <Content className=\"content\">\r\n        <div className=\"map__header\">\r\n          <Button className=\"map-btn\" type=\"default\" onClick={toggleShowMap}>\r\n            Назад\r\n          </Button>\r\n          {latLng && <Button onClick={toggleShowMap}>Сохранить</Button>}\r\n        </div>\r\n\r\n        <AppMap\r\n          containerElement={<Card className=\"map\" />}\r\n          mapElement={<div className=\"map-element\" />}\r\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAsGwKuUn_xR3sDbzuebV85dIrgJMi5OpA&v=3.exp&libraries=geometry,drawing,places\"\r\n          loadingElement={<AppPreloader />}\r\n          handleSelectCoords={handleSelectCoords}\r\n          marker={latLng}\r\n        />\r\n      </Content>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearContractorsState}\r\n        errorMessage={contractorError}\r\n        successMessage={\"Контрагент сохранен\"}\r\n        status={contractorActionStatus}\r\n      />\r\n      <AppAlert\r\n        onClose={clearCategoriesState}\r\n        errorMessage={categoriesError}\r\n        status={categoriesActionStatus}\r\n      />\r\n      <Card className=\"form\">\r\n        <Title level={3} className=\"title\">\r\n          Создание контрагента\r\n        </Title>\r\n        <Radio.Group\r\n          onChange={handleSelectRegType}\r\n          value={registeringType}\r\n          className=\"radio-group\"\r\n        >\r\n          <Radio value={ContractorTypesEnum.SUPPLIER}>Поставщик</Radio>\r\n          <Radio value={ContractorTypesEnum.CUSTOMER}>Заказчик</Radio>\r\n        </Radio.Group>\r\n        <ImagesList\r\n          removeImage={handleRemoveAvatar}\r\n          images={contractorAvatars}\r\n          editMode={true}\r\n        />\r\n        <UploadFileForm\r\n          onChange={handleUploadAvatar}\r\n          isUploading={avatarUploading}\r\n          buttonText=\"Аватар\"\r\n        />\r\n        {registeringType === ContractorTypesEnum.SUPPLIER ? (\r\n          <SupplierDescrForm control={control} errors={errors} />\r\n        ) : (\r\n          <CustomerDescrForm control={control} errors={errors} />\r\n        )}\r\n        {registeringType === ContractorTypesEnum.SUPPLIER && (\r\n          <SupplierSpecInfo\r\n            categoriesTree={categoriesTree}\r\n            selectedCategories={selectedCategories}\r\n            handleSelectCategories={handleSelectCategories}\r\n            toggleShowMap={toggleShowMap}\r\n            latLng={latLng}\r\n            handleUploadImage={handleUploadImage}\r\n            contractorImageUploading={contractorImageUploading}\r\n            setOtherPhoneNumbers={setOtherPhoneNumbers}\r\n          />\r\n        )}\r\n        <ImagesList\r\n          removeImage={handleRemoveImage}\r\n          images={contractorImages}\r\n          editMode={true}\r\n        />\r\n        <Button\r\n          className=\"order__save-btn\"\r\n          onClick={onSubmit}\r\n          disabled={\r\n            Object.keys(errors).length > 0 ||\r\n            (registeringType === ContractorTypesEnum.SUPPLIER &&\r\n              selectedCategories.length === 0)\r\n          }\r\n        >\r\n          Сохранить\r\n        </Button>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ContractorCreatePage;\r\n","import {\r\n  AdministratorCredentialsType,\r\n  AdministratorInType,\r\n  AdministratorOutType,\r\n} from \"./../models/Administrator\";\r\nimport { axios } from \"../api/axios\";\r\n\r\nexport const adminsApi = {\r\n  getAllAdmin: async (): Promise<AdministratorOutType[]> => {\r\n    const { data } = await axios.get<AdministratorOutType[]>(\"/admins\");\r\n    return data;\r\n  },\r\n  createAdmin: async (\r\n    formData: AdministratorInType\r\n  ): Promise<AdministratorOutType[]> => {\r\n    const { data } = await axios.post<AdministratorOutType[]>(\r\n      \"/admins\",\r\n      formData\r\n    );\r\n    return data;\r\n  },\r\n  checkAdmin: async (\r\n    formData: AdministratorCredentialsType\r\n  ): Promise<AdministratorOutType> => {\r\n    const { data } = await axios.post<AdministratorOutType>(\r\n      \"/checkAdmin\",\r\n      formData\r\n    );\r\n    return data;\r\n  },\r\n  banAdmin: async (id: number): Promise<boolean> => {\r\n    const { data } = await axios.delete<boolean>(`admins/${id}`);\r\n    return data;\r\n  },\r\n  updateAdmin: async (\r\n    id: number,\r\n    formData: AdministratorInType\r\n  ): Promise<AdministratorOutType[]> => {\r\n    const { data } = await axios.patch<AdministratorOutType[]>(\r\n      `/admins/${id}`,\r\n      formData\r\n    );\r\n    return data;\r\n  },\r\n  getAdminById: async (id: number): Promise<AdministratorOutType[]> => {\r\n    const { data } = await axios.get<AdministratorOutType[]>(`/admins/${id}`);\r\n    return data;\r\n  },\r\n};\r\n","import {\r\n  AdministratorCredentialsType,\r\n  AdministratorInType,\r\n} from \"./../../models/Administrator\";\r\nimport { ActionStatusEnum } from \"./../../models/types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AdministratorOutType } from \"../../models/Administrator\";\r\nimport { ActionsCreatorsTypes } from \"../../models/types\";\r\nimport { AppStateType } from \"../store\";\r\nimport { adminsApi } from \"../../services/adminsApi\";\r\n\r\nexport const adminActions = {\r\n  setIsAuth: (isAuth: boolean) => {\r\n    return {\r\n      type: \"SET_IS_AUTH\",\r\n      payload: { isAuth },\r\n    } as const;\r\n  },\r\n  setAuthErrorMessage: (authErrorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_AUTH_ERROR_MESSAGE\",\r\n      payload: { authErrorMessage },\r\n    } as const;\r\n  },\r\n  setAuthLoading: (authLoading: boolean) => {\r\n    return {\r\n      type: \"SET_AUTH_LOADING\",\r\n      payload: { authLoading },\r\n    } as const;\r\n  },\r\n  setIsInit: (isInit: boolean) => {\r\n    return {\r\n      type: \"SET_IS_INIT\",\r\n      payload: { isInit },\r\n    } as const;\r\n  },\r\n  setAdminLoading: (adminLoading: boolean) => {\r\n    return {\r\n      type: \"SET_ADMIN_LOADING\",\r\n      payload: { adminLoading },\r\n    } as const;\r\n  },\r\n  setAdminErrorMessage: (adminErrorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_ADMIN_ERROR_MESSAGE\",\r\n      payload: { adminErrorMessage },\r\n    } as const;\r\n  },\r\n  setAdmins: (admins: AdministratorOutType[]) => {\r\n    return {\r\n      type: \"SET_ADMINS\",\r\n      payload: { admins },\r\n    } as const;\r\n  },\r\n  setAdminActionStatus: (adminActionStatus: ActionStatusEnum) => {\r\n    return {\r\n      type: \"SET_ADMIN_ACTION_STATUS\",\r\n      payload: { adminActionStatus },\r\n    } as const;\r\n  },\r\n  changeBanStatus: (id: number, value: boolean) => {\r\n    return {\r\n      type: \"CHANGE_BAN_STATUS\",\r\n      payload: { id, value },\r\n    } as const;\r\n  },\r\n  setCurrentAdmin: (admin: AdministratorOutType | null) => {\r\n    return {\r\n      type: \"SET_CURRENT_ADMIN\",\r\n      payload: { admin },\r\n    } as const;\r\n  },\r\n};\r\n\r\nexport const clearAdminState = (): ThunkAcionType => async (dispatch) => {\r\n  dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.NEVER));\r\n  dispatch(adminActions.setAdminErrorMessage(null));\r\n};\r\n\r\nexport const createAdmin =\r\n  (formData: AdministratorInType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(adminActions.setAdminLoading(true));\r\n\r\n      const resp = await adminsApi.createAdmin(formData);\r\n      console.log(\"resp --> \", resp);\r\n      if (resp.length > 0) {\r\n        dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.SUCCESS));\r\n      } else {\r\n        dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.ERROR));\r\n        dispatch(\r\n          adminActions.setAdminErrorMessage(\r\n            \"Не удалось создать администратора! Попробуйте еще раз.\"\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.ERROR));\r\n      dispatch(\r\n        adminActions.setAdminErrorMessage(\"Ошибка сети! Попробуйте еще раз.\")\r\n      );\r\n    } finally {\r\n      dispatch(adminActions.setAdminLoading(false));\r\n    }\r\n  };\r\n\r\nexport const updateAdmin =\r\n  (id: number, formData: AdministratorInType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(adminActions.setAdminLoading(true));\r\n\r\n      const resp = await adminsApi.updateAdmin(id, formData);\r\n\r\n      if (resp.length > 0) {\r\n        dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.SUCCESS));\r\n        dispatch(adminActions.setCurrentAdmin(resp[0]));\r\n      } else {\r\n        dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.ERROR));\r\n        dispatch(\r\n          adminActions.setAdminErrorMessage(\r\n            \"Не удалось обновоить администратора! Попробуйте еще раз.\"\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.ERROR));\r\n      dispatch(\r\n        adminActions.setAdminErrorMessage(\"Ошибка сети! Попробуйте еще раз.\")\r\n      );\r\n    } finally {\r\n      dispatch(adminActions.setAdminLoading(false));\r\n    }\r\n  };\r\n\r\nexport const getAllAdmins = (): ThunkAcionType => async (dispatch) => {\r\n  try {\r\n    dispatch(adminActions.setAdminErrorMessage(null));\r\n    dispatch(adminActions.setAdminLoading(true));\r\n\r\n    const admins = await adminsApi.getAllAdmin();\r\n\r\n    dispatch(adminActions.setAdmins(admins));\r\n  } catch (error) {\r\n    dispatch(\r\n      adminActions.setAdminErrorMessage(\"Ошибка сети! Попробуйте еще раз.\")\r\n    );\r\n  } finally {\r\n    dispatch(adminActions.setAdminLoading(false));\r\n  }\r\n};\r\n\r\nexport const banAdmin =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(adminActions.setAdminLoading(true));\r\n\r\n      const resp = await adminsApi.banAdmin(id);\r\n\r\n      if (resp) {\r\n        dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.SUCCESS));\r\n        dispatch(adminActions.changeBanStatus(id, true));\r\n      } else {\r\n        dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.ERROR));\r\n        dispatch(\r\n          adminActions.setAdminErrorMessage(\r\n            \"Не удалось удалить администратора! Попробуйте еще раз.\"\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.ERROR));\r\n      dispatch(\r\n        adminActions.setAdminErrorMessage(\"Ошибка сети! Попробуйте еще раз.\")\r\n      );\r\n    } finally {\r\n      dispatch(adminActions.setAdminLoading(false));\r\n    }\r\n  };\r\n\r\nexport const unBan =\r\n  (id: number, formData: AdministratorInType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(adminActions.setAdminLoading(true));\r\n\r\n      const resp = await adminsApi.updateAdmin(id, formData);\r\n      console.log(\"resp --> \", resp);\r\n      if (resp) {\r\n        dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.SUCCESS));\r\n        dispatch(adminActions.changeBanStatus(id, false));\r\n      } else {\r\n        dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.ERROR));\r\n        dispatch(\r\n          adminActions.setAdminErrorMessage(\r\n            \"Не удалось удалить администратора! Попробуйте еще раз.\"\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      dispatch(adminActions.setAdminActionStatus(ActionStatusEnum.ERROR));\r\n      dispatch(\r\n        adminActions.setAdminErrorMessage(\"Ошибка сети! Попробуйте еще раз.\")\r\n      );\r\n    } finally {\r\n      dispatch(adminActions.setAdminLoading(false));\r\n    }\r\n  };\r\n\r\nexport const auth =\r\n  (formData: AdministratorCredentialsType): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(adminActions.setAuthErrorMessage(null));\r\n      dispatch(adminActions.setAuthLoading(true));\r\n\r\n      const admin = await adminsApi.checkAdmin(formData);\r\n\r\n      if (admin) {\r\n        dispatch(adminActions.setCurrentAdmin(admin));\r\n        localStorage.setItem(\"adminId\", String(admin.id));\r\n        dispatch(adminActions.setIsAuth(true));\r\n      } else {\r\n        dispatch(adminActions.setAuthErrorMessage(\"Ошибка авторизации\"));\r\n      }\r\n    } catch (error) {\r\n      dispatch(adminActions.setAuthErrorMessage(\"Ошибка авторизации\"));\r\n    } finally {\r\n      dispatch(adminActions.setAuthLoading(false));\r\n    }\r\n  };\r\n\r\nexport const checkMe =\r\n  (id: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      const resp = await adminsApi.getAdminById(id);\r\n      if (resp.length > 0 && !resp[0].isBlocked) {\r\n        dispatch(adminActions.setCurrentAdmin(resp[0]));\r\n        dispatch(adminActions.setIsAuth(true));\r\n      } else {\r\n        dispatch(adminActions.setAuthErrorMessage(\"Ошибка авторизации\"));\r\n        dispatch(adminActions.setIsAuth(false));\r\n      }\r\n    } catch (error) {\r\n      dispatch(adminActions.setAuthErrorMessage(\"Ошибка авторизации\"));\r\n      dispatch(adminActions.setIsAuth(false));\r\n    } finally {\r\n      dispatch(adminActions.setIsInit(true));\r\n    }\r\n  };\r\n\r\nexport type AdminActionTypes = ReturnType<\r\n  ActionsCreatorsTypes<typeof adminActions>\r\n>;\r\n\r\ntype ThunkAcionType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  AdminActionTypes\r\n>;\r\n","import { AppStateType } from \"../store\";\r\n\r\nconst getAdminState = (state: AppStateType) => state.admin;\r\n\r\nexport const getIsAuthState = (state: AppStateType) =>\r\n  getAdminState(state).isAuth;\r\n\r\nexport const getAuthLoadingState = (state: AppStateType) =>\r\n  getAdminState(state).authLoading;\r\n\r\nexport const getAuthErrorMessageState = (state: AppStateType) =>\r\n  getAdminState(state).authErrorMessage;\r\n\r\nexport const getIsInitState = (state: AppStateType) =>\r\n  getAdminState(state).isInit;\r\n\r\nexport const getAdminLoadingState = (state: AppStateType) =>\r\n  getAdminState(state).adminLoading;\r\n\r\nexport const getAdminErrorMessageState = (state: AppStateType) =>\r\n  getAdminState(state).adminErrorMessage;\r\n\r\nexport const getAdminsState = (state: AppStateType) =>\r\n  getAdminState(state).admins;\r\n\r\nexport const getAdminActionStatusState = (state: AppStateType) =>\r\n  getAdminState(state).adminActionStatus;\r\n\r\nexport const getCurrentAdminState = (state: AppStateType) =>\r\n  getAdminState(state).admin;\r\n","import { Form, Typography, Input } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, Controller, FieldError } from \"react-hook-form\";\r\nimport {\r\n  AdminFieldsNameType,\r\n  AdministratorCredentialsType,\r\n} from \"../../../models/Administrator\";\r\n\r\ntype AuthFieldPropsType = {\r\n  subtitle: string;\r\n  fieldName: Exclude<AdminFieldsNameType, \"confirm\">;\r\n  required: boolean;\r\n  maxLength?: number;\r\n  control?: Control<AdministratorCredentialsType, object>;\r\n  error?: FieldError;\r\n  password?: boolean;\r\n  defaultValue?: string;\r\n};\r\n\r\nconst { Text } = Typography;\r\n\r\nconst AuthField: React.FC<AuthFieldPropsType> = ({\r\n  control,\r\n  error,\r\n  subtitle,\r\n  fieldName,\r\n  required = true,\r\n  maxLength,\r\n  password,\r\n  defaultValue,\r\n}) => {\r\n  const InputField = password ? Input.Password : Input;\r\n\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      rules={{ required }}\r\n      render={({ field: { onChange, value } }) => (\r\n        <Form.Item\r\n          validateStatus={error ? \"error\" : \"success\"}\r\n          help={error?.message}\r\n          className=\"input form__input\"\r\n          required={required}\r\n        >\r\n          <Text className=\"subtitle\">{subtitle}</Text>\r\n          <InputField\r\n            placeholder={subtitle}\r\n            value={value}\r\n            onChange={onChange}\r\n            maxLength={maxLength}\r\n          />\r\n        </Form.Item>\r\n      )}\r\n      name={fieldName}\r\n      defaultValue={defaultValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthField;\r\n","import React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport {\r\n  AdminFieldsNameType,\r\n  AdministratorCredentialsType,\r\n} from \"../../../models/Administrator\";\r\nimport AuthField from \"./AuthField\";\r\n\r\nconst fields = [\r\n  {\r\n    id: \"1\",\r\n    fieldName: \"phoneNumber\",\r\n    subtitle: \"Телефон\",\r\n    required: true,\r\n    defaultValue: \"+7\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    fieldName: \"password\",\r\n    subtitle: \"Повторите пароль\",\r\n    required: true,\r\n    password: true,\r\n  },\r\n];\r\n\r\ntype AuthFormPropsType = {\r\n  control?: Control<AdministratorCredentialsType, object>;\r\n  errors: {\r\n    phoneNumber?: FieldError;\r\n    password?: FieldError;\r\n    confirm?: FieldError;\r\n  };\r\n};\r\n\r\nconst AuthForm: React.FC<AuthFormPropsType> = ({ control, errors }) => {\r\n  return (\r\n    <>\r\n      {fields.map((field) => {\r\n        return (\r\n          <AuthField\r\n            key={field.id}\r\n            control={control}\r\n            error={\r\n              errors[field.fieldName as Exclude<AdminFieldsNameType, \"confirm\">]\r\n            }\r\n            subtitle={field.subtitle}\r\n            fieldName={\r\n              field.fieldName as Exclude<AdminFieldsNameType, \"confirm\">\r\n            }\r\n            required={field.required}\r\n            password={field.password}\r\n            defaultValue={field.defaultValue}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { Alert, Button, Card, Form, Input, Typography } from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppPreloader } from \"../../components\";\r\nimport { AdministratorCredentialsType } from \"../../models/Administrator\";\r\nimport { auth } from \"../../store/actions/admin\";\r\nimport {\r\n  getAuthErrorMessageState,\r\n  getAuthLoadingState,\r\n} from \"../../store/selectors/admin\";\r\nimport { authSchema } from \"../../utils/validatorsSchemes\";\r\nimport { AuthForm } from \"./components\";\r\n\r\ntype AuthPagePropsType = {};\r\n\r\nconst { Title } = Typography;\r\n\r\nconst AuthPage: React.FC<AuthPagePropsType> = () => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<AdministratorCredentialsType>({\r\n    resolver: yupResolver(authSchema),\r\n  });\r\n\r\n  const authLoading = useSelector(getAuthLoadingState);\r\n  const authError = useSelector(getAuthErrorMessageState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    dispatch(\r\n      auth({\r\n        ...formData,\r\n        phoneNumber: `7${String(formData.phoneNumber).slice(-10)}`,\r\n      })\r\n    );\r\n  });\r\n\r\n  if (authLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"auth__content\">\r\n      <Card className=\"form\">\r\n        {authError && (\r\n          <Alert className=\"error\" message={authError} type={\"error\"} />\r\n        )}\r\n        <Title level={3} className=\"title\">\r\n          Войти\r\n        </Title>\r\n\r\n        <AuthForm control={control} errors={errors} />\r\n        <Button\r\n          className=\"order__save-btn\"\r\n          onClick={onSubmit}\r\n          disabled={Object.keys(errors).length > 0}\r\n        >\r\n          Сохранить\r\n        </Button>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default AuthPage;\r\n","import { Form, Input, Typography } from \"antd\";\r\nimport React, { ChangeEvent } from \"react\";\r\n\r\nconst { Text } = Typography;\r\n\r\ntype CategoryEditablePropsType = {\r\n  editMode: boolean;\r\n  placeholder?: string;\r\n  value: string;\r\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  currentValue?: string;\r\n  error?: string;\r\n};\r\n\r\nconst CategoryEditableField: React.FC<CategoryEditablePropsType> = ({\r\n  placeholder,\r\n  editMode,\r\n  value,\r\n  currentValue,\r\n  error,\r\n  onChange,\r\n}) => {\r\n  const handleInputClick = (\r\n    e: React.MouseEvent<HTMLInputElement, MouseEvent>\r\n  ) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  if (editMode) {\r\n    return (\r\n      <Form.Item\r\n        validateStatus={error ? \"error\" : \"success\"}\r\n        help={error}\r\n        className=\"input\"\r\n        required\r\n        tooltip=\"Обязательное поле\"\r\n      >\r\n        <Input\r\n          placeholder={placeholder}\r\n          onClick={handleInputClick}\r\n          value={currentValue}\r\n          onChange={onChange}\r\n        />\r\n      </Form.Item>\r\n    );\r\n  }\r\n  return <Text>{value}</Text>;\r\n};\r\n\r\nexport default CategoryEditableField;\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { CategoryType } from \"../../../models/Categories\";\r\n\r\ntype CategoryActionsPropsType = {\r\n  editMode: boolean;\r\n  disabledBtn: boolean;\r\n  onSave: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\r\n  onEdit: (category: CategoryType) => void;\r\n  category: CategoryType;\r\n  onRemove: (id: number) => void;\r\n};\r\n\r\nconst CategoryActions: React.FC<CategoryActionsPropsType> = ({\r\n  editMode,\r\n  disabledBtn,\r\n  onSave,\r\n  onEdit,\r\n  category,\r\n  onRemove,\r\n}) => {\r\n  return (\r\n    <div className=\"categories__actions\">\r\n      {editMode ? (\r\n        <Button onClick={onSave} disabled={disabledBtn}>\r\n          Сохранить\r\n        </Button>\r\n      ) : (\r\n        <>\r\n          <Button\r\n            className=\"categories__btn\"\r\n            onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n              e.stopPropagation();\r\n              onEdit(category);\r\n            }}\r\n          >\r\n            Редактировать\r\n          </Button>\r\n          <Button\r\n            className=\"categories__btn\"\r\n            onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n              e.stopPropagation();\r\n              onRemove(category.id);\r\n            }}\r\n            danger\r\n          >\r\n            Удалить\r\n          </Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoryActions;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { Layout, Typography, Empty, Collapse, Button, List } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoriesLoadingState,\r\n  getCategoryInProcessEditState,\r\n  getMainCategoriesState,\r\n  getSubCategoriesState,\r\n} from \"../../store/selectors/categories\";\r\nimport {\r\n  categoriesActions,\r\n  deleteCategoryById,\r\n  updateCategoryById,\r\n} from \"../../store/actions/categories\";\r\nimport { AppAlert, AppPreloader, SelectParentCategory } from \"../../components\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { MainCategoryActions, CategoryEditableField } from \"./components\";\r\nimport { CategoryType } from \"../../models/Categories\";\r\n\r\nconst { Content } = Layout;\r\nconst { Text } = Typography;\r\nconst { Panel } = Collapse;\r\n\r\nconst CategoriesPage = () => {\r\n  const [editableCategory, setEditableCategory] =\r\n    React.useState<CategoryType | null>(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const mainCategories = useSelector(getMainCategoriesState);\r\n  const subCategories = useSelector(getSubCategoriesState);\r\n  const categoriesLoading = useSelector(getCategoriesLoadingState);\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoryInEditProcess = useSelector(getCategoryInProcessEditState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    return () => clearState();\r\n  }, [clearState]);\r\n\r\n  const onRemove = (id: number) => {\r\n    const answer = window.confirm(\"Вы действительно хотите удалить категорию?\");\r\n    if (answer) {\r\n      dispatch(deleteCategoryById(id));\r\n    }\r\n  };\r\n\r\n  const onEdit = (category: CategoryType) => {\r\n    setEditableCategory(category);\r\n  };\r\n\r\n  const onSave = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    e.stopPropagation();\r\n    if (editableCategory) {\r\n      dispatch(updateCategoryById(editableCategory));\r\n    }\r\n    setEditableCategory(null);\r\n  };\r\n\r\n  const onCategoryNameChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setEditableCategory((prev) => {\r\n      if (prev) {\r\n        return { ...prev, name: e.target.value };\r\n      }\r\n      return prev;\r\n    });\r\n  };\r\n\r\n  const handleChangeParentId = (id: number) => {\r\n    setEditableCategory((prev) => {\r\n      if (prev) {\r\n        return { ...prev, parentId: id };\r\n      }\r\n      return prev;\r\n    });\r\n  };\r\n\r\n  if (categoriesLoading) {\r\n    return <AppPreloader size=\"large\" />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={categoriesError}\r\n        successMessage={\"Изменения сохранены\"}\r\n        status={categoriesActionStatus}\r\n      />\r\n      {mainCategories && mainCategories.length > 0 ? (\r\n        <Collapse accordion>\r\n          {mainCategories.map((mainCat) => {\r\n            return (\r\n              <Panel\r\n                header={\r\n                  <div className=\"categories__header\">\r\n                    {categoryInEditProcess === mainCat.id ? (\r\n                      <Text>Сохранение...</Text>\r\n                    ) : (\r\n                      <CategoryEditableField\r\n                        editMode={editableCategory?.id === mainCat.id}\r\n                        value={mainCat.name}\r\n                        currentValue={editableCategory?.name}\r\n                        onChange={onCategoryNameChange}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                }\r\n                key={mainCat.id}\r\n                extra={\r\n                  <MainCategoryActions\r\n                    editMode={editableCategory?.id === mainCat.id}\r\n                    disabledBtn={editableCategory?.name.length === 0}\r\n                    onSave={onSave}\r\n                    onEdit={onEdit}\r\n                    category={mainCat}\r\n                    onRemove={onRemove}\r\n                  />\r\n                }\r\n              >\r\n                {subCategories && (\r\n                  <List\r\n                    dataSource={subCategories.filter(\r\n                      (subCat) => subCat.parentId === mainCat.id\r\n                    )}\r\n                    renderItem={(item) => (\r\n                      <List.Item\r\n                        actions={\r\n                          editableCategory?.id === item.id\r\n                            ? [\r\n                                <Button\r\n                                  onClick={onSave}\r\n                                  disabled={editableCategory?.name.length === 0}\r\n                                >\r\n                                  Сохранить\r\n                                </Button>,\r\n                              ]\r\n                            : [\r\n                                <Button\r\n                                  size=\"small\"\r\n                                  onClick={(\r\n                                    e: React.MouseEvent<HTMLElement, MouseEvent>\r\n                                  ) => {\r\n                                    e.stopPropagation();\r\n                                    onEdit(item);\r\n                                  }}\r\n                                >\r\n                                  Редактировать\r\n                                </Button>,\r\n                                <Button\r\n                                  size=\"small\"\r\n                                  onClick={(\r\n                                    e: React.MouseEvent<HTMLElement, MouseEvent>\r\n                                  ) => {\r\n                                    e.stopPropagation();\r\n                                    onRemove(item.id);\r\n                                  }}\r\n                                  danger\r\n                                >\r\n                                  Удалить\r\n                                </Button>,\r\n                              ]\r\n                        }\r\n                      >\r\n                        <List.Item.Meta\r\n                          description={\r\n                            <>\r\n                              {categoryInEditProcess === item.id ? (\r\n                                <Text>Сохранение...</Text>\r\n                              ) : (\r\n                                <>\r\n                                  <CategoryEditableField\r\n                                    editMode={editableCategory?.id === item.id}\r\n                                    value={item.name}\r\n                                    currentValue={editableCategory?.name}\r\n                                    onChange={onCategoryNameChange}\r\n                                  />\r\n                                  {editableCategory?.id === item.id && (\r\n                                    <SelectParentCategory\r\n                                      mainCategories={mainCategories}\r\n                                      handleChangeParentId={\r\n                                        handleChangeParentId\r\n                                      }\r\n                                      item={item}\r\n                                    />\r\n                                  )}\r\n                                </>\r\n                              )}\r\n                            </>\r\n                          }\r\n                        />\r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                )}\r\n              </Panel>\r\n            );\r\n          })}\r\n        </Collapse>\r\n      ) : (\r\n        <Empty description=\"Данных нет\" />\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default CategoriesPage;\r\n","import React from \"react\";\r\n\r\nimport { Button, Card, Form, Input, Layout, Typography } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoriesLoadingState,\r\n  getMainCategoriesState,\r\n} from \"../../store/selectors/categories\";\r\nimport { AppAlert, AppPreloader, SelectParentCategory } from \"../../components\";\r\nimport {\r\n  categoriesActions,\r\n  createCategory,\r\n} from \"../../store/actions/categories\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { categorySchema } from \"../../utils/validatorsSchemes\";\r\nimport { AddCategoryFormData } from \"../../models/Categories\";\r\n\r\nconst { Content } = Layout;\r\nconst { Text, Title } = Typography;\r\n\r\nconst CategoryCreatePage = () => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<AddCategoryFormData>({\r\n    resolver: yupResolver(categorySchema),\r\n  });\r\n\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n  const mainCategories = useSelector(getMainCategoriesState);\r\n  const categoriesLoading = useSelector(getCategoriesLoadingState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    dispatch(createCategory(formData));\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    return () => clearState();\r\n  }, [clearState]);\r\n\r\n  if (categoriesLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={categoriesError}\r\n        successMessage={\"Категория сохранена\"}\r\n        status={categoriesActionStatus}\r\n      />\r\n      <Card className=\"form\">\r\n        <Title level={3} className=\"title\">\r\n          Создание категории\r\n        </Title>\r\n        <Controller\r\n          control={control}\r\n          rules={{\r\n            required: true,\r\n          }}\r\n          render={({ field: { onChange, value } }) => (\r\n            <Form.Item\r\n              validateStatus={errors.name ? \"error\" : \"success\"}\r\n              help={errors.name?.message}\r\n              className=\"input\"\r\n              required\r\n            >\r\n              <Text className=\"subtitle\">Название категории</Text>\r\n              <Input\r\n                placeholder=\"Название категории\"\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            </Form.Item>\r\n          )}\r\n          name=\"name\"\r\n          defaultValue=\"\"\r\n        />\r\n        {mainCategories && (\r\n          <Controller\r\n            control={control}\r\n            rules={{\r\n              required: true,\r\n            }}\r\n            render={({ field: { onChange, value } }) => (\r\n              <SelectParentCategory\r\n                mainCategories={mainCategories}\r\n                handleChangeParentId={onChange}\r\n                error={errors.parentId?.message}\r\n              />\r\n            )}\r\n            name=\"parentId\"\r\n            defaultValue={0}\r\n          />\r\n        )}\r\n        <Button\r\n          className=\"categories__save-btn\"\r\n          onClick={onSubmit}\r\n          disabled={categoriesLoading || Object.keys(errors).length > 0}\r\n        >\r\n          Сохранить\r\n        </Button>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default CategoryCreatePage;\r\n","import { Button, Card, Empty, List, Typography } from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppAlert } from \"../../components\";\r\nimport {\r\n  categoriesActions,\r\n  updateCategoryById,\r\n} from \"../../store/actions/categories\";\r\nimport {\r\n  getCategoriesActionStatusState,\r\n  getCategoriesErrorMessageState,\r\n  getCategoryInProcessEditState,\r\n  getDeletedCategoriesState,\r\n} from \"../../store/selectors/categories\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { CategoryType } from \"../../models/Categories\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst DeletedCategoriesPage = () => {\r\n  const deletedCategories = useSelector(getDeletedCategoriesState);\r\n  const categoriesError = useSelector(getCategoriesErrorMessageState);\r\n  const categoriesActionStatus = useSelector(getCategoriesActionStatusState);\r\n  const categoryInEditProcess = useSelector(getCategoryInProcessEditState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(\r\n      categoriesActions.setCategoriesActionStatus(ActionStatusEnum.NEVER)\r\n    );\r\n    dispatch(categoriesActions.setCategoriesErrorMessage(null));\r\n  }, [dispatch]);\r\n\r\n  const onRestore = (category: CategoryType) => {\r\n    const answer = window.confirm(\"Восстановить выбранную категорию?\");\r\n    if (answer) {\r\n      const updateCategory = { ...category, isDeleted: false };\r\n      dispatch(updateCategoryById(updateCategory));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={categoriesError}\r\n        successMessage={\"Изменения сохранены\"}\r\n        status={categoriesActionStatus}\r\n      />\r\n      {deletedCategories && deletedCategories.length === 0 ? (\r\n        <Empty />\r\n      ) : (\r\n        <Card>\r\n          <List\r\n            dataSource={deletedCategories}\r\n            renderItem={(item) => (\r\n              <List.Item\r\n                actions={[\r\n                  <Button onClick={() => onRestore(item)}>Восстановить</Button>,\r\n                ]}\r\n              >\r\n                <List.Item.Meta\r\n                  description={\r\n                    categoryInEditProcess === item.id ? (\r\n                      <Text>Сохранение...</Text>\r\n                    ) : (\r\n                      <Text>{item.name}</Text>\r\n                    )\r\n                  }\r\n                />\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Card>\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default DeletedCategoriesPage;\r\n","import { Empty, Card } from \"antd\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink, useParams } from \"react-router-dom\";\r\nimport { AppPreloader } from \"../../components\";\r\nimport { getOrderChats } from \"../../store/actions/orders\";\r\nimport {\r\n  getOrderChatsState,\r\n  getOrdersLoadingState,\r\n} from \"../../store/selectors/orders\";\r\n\r\nconst OrderChatsPage = () => {\r\n  const { orderId }: { orderId?: string } = useParams();\r\n\r\n  const orderChats = useSelector(getOrderChatsState);\r\n  const chatsLoading = useSelector(getOrdersLoadingState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getOrderChats(Number(orderId)));\r\n  }, [dispatch, orderId]);\r\n\r\n  if (chatsLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      {orderChats ? (\r\n        orderChats.length === 0 ? (\r\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n        ) : (\r\n          <>\r\n            {orderChats.map((chat) => (\r\n              <Card\r\n                title={`Чат №${chat.id}`}\r\n                bodyStyle={{ display: \"flex\" }}\r\n                key={chat.id}\r\n              >\r\n                <Card.Grid>\r\n                  Поставщик:{\" \"}\r\n                  {\r\n                    <NavLink to={`/contractors/${chat.supplierId}`}>\r\n                      {chat.supplierName}\r\n                    </NavLink>\r\n                  }\r\n                </Card.Grid>\r\n                <Card.Grid>\r\n                  Заказчик:{\" \"}\r\n                  {\r\n                    <NavLink to={`/contractors/${chat.customerId}`}>\r\n                      {chat.customerName}\r\n                    </NavLink>\r\n                  }\r\n                </Card.Grid>\r\n                <Card.Grid>\r\n                  {\r\n                    <NavLink to={`/orders/${chat.orderId}/chats/${chat.id}`}>\r\n                      Сообщения\r\n                    </NavLink>\r\n                  }\r\n                </Card.Grid>\r\n              </Card>\r\n            ))}\r\n          </>\r\n        )\r\n      ) : null}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default OrderChatsPage;\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { ChatMessageOutType } from \"../../models/Chats\";\r\nimport { ActionsCreatorsTypes } from \"../../models/types\";\r\nimport { chatsApi } from \"../../services/chatsApi\";\r\nimport { AppStateType } from \"../store\";\r\n\r\nexport const chatsActions = {\r\n  setErrorMessage: (errorMessage: string | null) => {\r\n    return {\r\n      type: \"SET_CHATS_ERROR_MESSAGE\",\r\n      payload: { errorMessage },\r\n    } as const;\r\n  },\r\n  setChatsLoading: (chatsLoading: boolean) => {\r\n    return {\r\n      type: \"SET_CHATS_LOADING\",\r\n      payload: { chatsLoading },\r\n    } as const;\r\n  },\r\n  setMessages: (messages: ChatMessageOutType[]) => {\r\n    return {\r\n      type: \"SET_NEW_MESSAGES\",\r\n      payload: { messages },\r\n    } as const;\r\n  },\r\n};\r\n\r\n// chats/{orderId}/{chatId}\r\n\r\nexport const getChatMessages =\r\n  (orderId: number, chatId: number): ThunkAcionType =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(chatsActions.setChatsLoading(true));\r\n      const messages = await chatsApi.getAllChatMessage(orderId, chatId);\r\n\r\n      if (messages) {\r\n        dispatch(chatsActions.setMessages(messages));\r\n      } else {\r\n        dispatch(\r\n          chatsActions.setErrorMessage(\r\n            \"Не удалось загрузить сообщения, попробуйте еще раз\"\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"getChatMessages ---- \", error);\r\n      dispatch(chatsActions.setErrorMessage(\"Ошибка сети, попробуйте еще раз\"));\r\n    } finally {\r\n      dispatch(chatsActions.setChatsLoading(false));\r\n    }\r\n  };\r\nexport type ChatsActionTypes = ReturnType<\r\n  ActionsCreatorsTypes<typeof chatsActions>\r\n>;\r\n\r\ntype ThunkAcionType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  unknown,\r\n  ChatsActionTypes\r\n>;\r\n","import { AppStateType } from \"./../store\";\r\n\r\nconst getChatsState = (state: AppStateType) => state.chats;\r\n\r\nexport const getChatErrorMessageState = (state: AppStateType) =>\r\n  getChatsState(state).errorMessage;\r\nexport const getChatLoadinState = (state: AppStateType) =>\r\n  getChatsState(state).chatsLoading;\r\nexport const getChatMessagesState = (state: AppStateType) =>\r\n  getChatsState(state).messages;\r\n","import { Content } from \"antd/lib/layout/layout\";\r\nimport { List, Typography, Image } from \"antd\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { AppPreloader } from \"../../components\";\r\nimport { getChatMessages } from \"../../store/actions/chats\";\r\nimport {\r\n  getChatLoadinState,\r\n  getChatMessagesState,\r\n} from \"../../store/selectors/chats\";\r\nimport { formatDateWithTime } from \"../../utils/formatter\";\r\nimport {\r\n  ChatMessageAttachmentTypesEnum,\r\n  ChatMessageOutType,\r\n  ChatTypesMessageEnum,\r\n} from \"../../models/Chats\";\r\nimport { baseURL } from \"../../api/axios\";\r\n\r\nconst ChatMessage = (item: ChatMessageOutType) => {\r\n  if (item.type === ChatTypesMessageEnum.TEXT) {\r\n    return (\r\n      <List.Item>\r\n        <Typography.Text>{formatDateWithTime(item.timeStamp)}</Typography.Text>\r\n        <Typography.Text className=\"message__sender\" mark>\r\n          [{item.senderName}]\r\n        </Typography.Text>{\" \"}\r\n        {item.text}\r\n      </List.Item>\r\n    );\r\n  }\r\n\r\n  if (item.type === ChatTypesMessageEnum.ATTACHMENT) {\r\n    return (\r\n      <List.Item className=\"message\">\r\n        <Typography.Text>{formatDateWithTime(item.timeStamp)}</Typography.Text>\r\n        <Typography.Text className=\"message__sender\" mark>\r\n          [{item.senderName}]\r\n        </Typography.Text>{\" \"}\r\n        {item.attachmentType === ChatMessageAttachmentTypesEnum.PICTURE && (\r\n          <Image src={`${baseURL}${item.text}`} className=\"message__image\" />\r\n        )}\r\n        {item.attachmentType === ChatMessageAttachmentTypesEnum.VIDEO && (\r\n          <video className=\"message__video\" controls>\r\n            <source src={`${baseURL}${item.text}`} />\r\n          </video>\r\n        )}\r\n        {item.attachmentType === ChatMessageAttachmentTypesEnum.DOCUMENT && (\r\n          <a href={`${baseURL}${item.text}`}>\r\n            {item.attachmentName ? item.attachmentName : \"Загрузить вложение\"}\r\n          </a>\r\n        )}\r\n      </List.Item>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst ChatPage = () => {\r\n  const { orderId, chatId }: { orderId: string; chatId: string } = useParams();\r\n\r\n  const messages = useSelector(getChatMessagesState);\r\n  const messagesLoading = useSelector(getChatLoadinState);\r\n\r\n  const dispatch = useDispatch();\r\n  React.useEffect(() => {\r\n    dispatch(getChatMessages(Number(orderId), Number(chatId)));\r\n  }, [chatId, dispatch, orderId]);\r\n\r\n  if (messagesLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      {messages && (\r\n        <List bordered dataSource={messages} renderItem={ChatMessage} />\r\n      )}\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","import { Form, Typography, Input } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, Controller, FieldError } from \"react-hook-form\";\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\";\r\nimport {\r\n  AdminFieldsNameType,\r\n  AdminFormDataType,\r\n} from \"../../../models/Administrator\";\r\n\r\ntype AdminFieldPropsType = {\r\n  subtitle: string;\r\n  fieldName: AdminFieldsNameType;\r\n  required: boolean;\r\n  maxLength?: number;\r\n  control?: Control<AdminFormDataType, object>;\r\n  error?: FieldError;\r\n  password?: boolean;\r\n  defaultValue?: string;\r\n};\r\n\r\nconst { Text } = Typography;\r\n\r\nconst AdminField: React.FC<AdminFieldPropsType> = ({\r\n  control,\r\n  error,\r\n  subtitle,\r\n  fieldName,\r\n  required = true,\r\n  maxLength,\r\n  password,\r\n  defaultValue,\r\n}) => {\r\n  const InputField = password ? Input.Password : Input;\r\n\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      rules={{ required }}\r\n      render={({ field: { onChange, value } }) => (\r\n        <Form.Item\r\n          validateStatus={error ? \"error\" : \"success\"}\r\n          help={error?.message}\r\n          className=\"input form__input\"\r\n          required={required}\r\n        >\r\n          <Text className=\"subtitle\">{subtitle}</Text>\r\n          <InputField\r\n            placeholder={subtitle}\r\n            value={value}\r\n            onChange={onChange}\r\n            maxLength={maxLength}\r\n          />\r\n        </Form.Item>\r\n      )}\r\n      name={fieldName}\r\n      defaultValue={defaultValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AdminField;\r\n","import React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport { AdminField } from \".\";\r\nimport {\r\n  AdminFieldsNameType,\r\n  AdminFormDataType,\r\n} from \"../../../models/Administrator\";\r\n\r\nconst fields = [\r\n  {\r\n    id: \"1\",\r\n    fieldName: \"phoneNumber\",\r\n    subtitle: \"Номер телефона для авторизации\",\r\n    maxLength: 12,\r\n    required: true,\r\n    defaultValue: \"+7\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    fieldName: \"password\",\r\n    subtitle: \"Пароль\",\r\n    required: true,\r\n    password: true,\r\n  },\r\n  {\r\n    id: \"3\",\r\n    fieldName: \"confirm\",\r\n    subtitle: \"Повторите пароль\",\r\n    required: true,\r\n    password: true,\r\n  },\r\n];\r\n\r\ntype AdminFormPropsType = {\r\n  control?: Control<AdminFormDataType, object>;\r\n  errors: {\r\n    phoneNumber?: FieldError;\r\n    password?: FieldError;\r\n    confirm?: FieldError;\r\n  };\r\n};\r\n\r\nconst AdminForm: React.FC<AdminFormPropsType> = ({ control, errors }) => {\r\n  return (\r\n    <>\r\n      {fields.map((field) => {\r\n        return (\r\n          <AdminField\r\n            key={field.id}\r\n            control={control}\r\n            error={errors[field.fieldName as AdminFieldsNameType]}\r\n            subtitle={field.subtitle}\r\n            fieldName={field.fieldName as AdminFieldsNameType}\r\n            required={field.required}\r\n            maxLength={field.maxLength}\r\n            defaultValue={field.defaultValue}\r\n            password={field.password}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminForm;\r\n","import React from \"react\";\r\nimport { Button, Card, Layout, Typography } from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { AppAlert, AppPreloader } from \"../../components\";\r\nimport { adminSchema } from \"../../utils/validatorsSchemes\";\r\n\r\nimport { AdminFormDataType } from \"../../models/Administrator\";\r\nimport { AdminForm } from \"./components\";\r\nimport {\r\n  getAdminActionStatusState,\r\n  getAdminErrorMessageState,\r\n  getAdminLoadingState,\r\n} from \"../../store/selectors/admin\";\r\nimport { clearAdminState, createAdmin } from \"../../store/actions/admin\";\r\n\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\n\r\nconst AdminCreatePage = () => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<AdminFormDataType>({\r\n    resolver: yupResolver(adminSchema),\r\n  });\r\n\r\n  const adminLoading = useSelector(getAdminLoadingState);\r\n  const adminErrorMessage = useSelector(getAdminErrorMessageState);\r\n  const adminActionStatus = useSelector(getAdminActionStatusState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    dispatch(\r\n      createAdmin({\r\n        ...formData,\r\n        phoneNumber: `7${String(formData.phoneNumber).slice(-10)}`,\r\n        isBlocked: false,\r\n      })\r\n    );\r\n  });\r\n\r\n  const handleCloseAlert = () => {\r\n    dispatch(clearAdminState());\r\n  };\r\n\r\n  if (adminLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={handleCloseAlert}\r\n        errorMessage={adminErrorMessage}\r\n        successMessage={\"Администратор сохранен\"}\r\n        status={adminActionStatus}\r\n      />\r\n\r\n      <Card className=\"form\">\r\n        <Title level={3} className=\"title\">\r\n          Создание администратора\r\n        </Title>\r\n\r\n        <AdminForm errors={errors} control={control} />\r\n\r\n        <Button\r\n          className=\"order__save-btn\"\r\n          onClick={onSubmit}\r\n          disabled={Object.keys(errors).length > 0}\r\n        >\r\n          Сохранить\r\n        </Button>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default AdminCreatePage;\r\n","import React from \"react\";\r\nimport { ReloadOutlined } from \"@ant-design/icons\";\r\n\r\nimport { Layout, Table, Button } from \"antd\";\r\nimport { AppAlert, AppPreloader } from \"../../components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport useBreakpoint from \"antd/lib/grid/hooks/useBreakpoint\";\r\nimport {\r\n  clearAdminState,\r\n  banAdmin,\r\n  getAllAdmins,\r\n  unBan,\r\n} from \"../../store/actions/admin\";\r\nimport {\r\n  getAdminActionStatusState,\r\n  getAdminErrorMessageState,\r\n  getAdminLoadingState,\r\n  getAdminsState,\r\n} from \"../../store/selectors/admin\";\r\nimport { AdministratorOutType } from \"../../models/Administrator\";\r\n\r\nconst { Content } = Layout;\r\nconst { Column } = Table;\r\n\r\nconst AdminsPage = () => {\r\n  const admins = useSelector(getAdminsState);\r\n  const adminsLoading = useSelector(getAdminLoadingState);\r\n  const adminActionStatus = useSelector(getAdminActionStatusState);\r\n  const adminErrorMessage = useSelector(getAdminErrorMessageState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { xxl } = useBreakpoint();\r\n\r\n  const clearState = React.useCallback(() => {\r\n    dispatch(clearAdminState());\r\n  }, [dispatch]);\r\n\r\n  const handleChangeBanStatus = (administrator: AdministratorOutType) => {\r\n    if (administrator.isBlocked) {\r\n      const confirm = window.confirm(\r\n        \"Вы действительно хотите разбанить администратора?\"\r\n      );\r\n      if (confirm) {\r\n        const newPassword = window.prompt(\"Придумайте новый пароль\");\r\n        if (newPassword) {\r\n          dispatch(\r\n            unBan(administrator.id, {\r\n              phoneNumber: administrator.phoneNumber,\r\n              password: newPassword,\r\n              isBlocked: false,\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      const confirm = window.confirm(\r\n        \"Вы действительно хотите забанить администратора?\"\r\n      );\r\n      if (confirm) {\r\n        dispatch(banAdmin(administrator.id));\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchData = React.useCallback(() => {\r\n    dispatch(getAllAdmins());\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getAllAdmins());\r\n    return () => {\r\n      clearState();\r\n    };\r\n  }, [dispatch, clearState]);\r\n\r\n  if (adminsLoading) {\r\n    return <AppPreloader size=\"large\" />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={clearState}\r\n        errorMessage={adminErrorMessage}\r\n        successMessage=\"Операция прошла успешно\"\r\n        status={adminActionStatus}\r\n      />\r\n      <div className=\"contractors__header\">\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<ReloadOutlined />}\r\n          size=\"large\"\r\n          onClick={fetchData}\r\n        />\r\n      </div>\r\n      <Table\r\n        pagination={{ position: [\"topRight\"] }}\r\n        showSorterTooltip={false}\r\n        dataSource={admins}\r\n        rowKey={\"id\"}\r\n        size={xxl ? \"middle\" : \"small\"}\r\n      >\r\n        <Column<AdministratorOutType>\r\n          title=\"Номер телефона\"\r\n          dataIndex=\"phoneNumber\"\r\n          key=\"phoneNumber\"\r\n          className=\"table-value\"\r\n        />\r\n        <Column<AdministratorOutType>\r\n          title=\"Статус\"\r\n          dataIndex=\"id\"\r\n          key=\"id\"\r\n          className=\"table-value\"\r\n          render={(_, administrator) =>\r\n            administrator.isBlocked ? \"Забанен\" : \"Активный\"\r\n          }\r\n        />\r\n        <Column<AdministratorOutType>\r\n          title=\"Действия\"\r\n          dataIndex=\"id\"\r\n          key=\"id\"\r\n          className=\"table-value\"\r\n          render={(_, administrator) => (\r\n            <Button\r\n              onClick={() => handleChangeBanStatus(administrator)}\r\n              danger={!administrator.isBlocked}\r\n            >\r\n              {administrator.isBlocked ? \"Разбанить\" : \"Забанить\"}\r\n            </Button>\r\n          )}\r\n        />\r\n      </Table>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default AdminsPage;\r\n","import { Form, Typography, Input } from \"antd\";\r\nimport React from \"react\";\r\nimport { Control, Controller, FieldError } from \"react-hook-form\";\r\nimport {\r\n  AdminFieldsNameType,\r\n  AdminFormDataType,\r\n} from \"../../../models/Administrator\";\r\n\r\ntype AdminFieldPropsType = {\r\n  subtitle: string;\r\n  fieldName: Exclude<AdminFieldsNameType, \"phoneNumber\">;\r\n  required: boolean;\r\n  maxLength?: number;\r\n  control?: Control<Exclude<AdminFormDataType, \"phoneNumber\">, object>;\r\n  error?: FieldError;\r\n  password?: boolean;\r\n  defaultValue?: string;\r\n};\r\n\r\nconst { Text } = Typography;\r\n\r\nconst AdminField: React.FC<AdminFieldPropsType> = ({\r\n  control,\r\n  error,\r\n  subtitle,\r\n  fieldName,\r\n  required = true,\r\n  maxLength,\r\n  password,\r\n  defaultValue,\r\n}) => {\r\n  const InputField = password ? Input.Password : Input;\r\n\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      rules={{ required }}\r\n      render={({ field: { onChange, value } }) => (\r\n        <Form.Item\r\n          validateStatus={error ? \"error\" : \"success\"}\r\n          help={error?.message}\r\n          className=\"input form__input\"\r\n          required={required}\r\n        >\r\n          <Text className=\"subtitle\">{subtitle}</Text>\r\n          <InputField\r\n            placeholder={subtitle}\r\n            value={value}\r\n            onChange={onChange}\r\n            maxLength={maxLength}\r\n          />\r\n        </Form.Item>\r\n      )}\r\n      name={fieldName}\r\n      defaultValue={defaultValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AdminField;\r\n","import React from \"react\";\r\nimport { Control, FieldError } from \"react-hook-form\";\r\nimport { AdminField } from \".\";\r\nimport {\r\n  AdminFieldsNameType,\r\n  AdminFormDataType,\r\n} from \"../../../models/Administrator\";\r\n\r\nconst fields = [\r\n  {\r\n    id: \"1\",\r\n    fieldName: \"password\",\r\n    subtitle: \"Новый пароль\",\r\n    required: true,\r\n    password: true,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    fieldName: \"confirm\",\r\n    subtitle: \"Повторите пароль\",\r\n    required: true,\r\n    password: true,\r\n  },\r\n];\r\n\r\ntype AdminFormPropsType = {\r\n  control?: Control<Exclude<AdminFormDataType, \"phoneNumber\">, object>;\r\n  errors: {\r\n    phoneNumber?: FieldError;\r\n    password?: FieldError;\r\n    confirm?: FieldError;\r\n  };\r\n};\r\n\r\nconst AdminForm: React.FC<AdminFormPropsType> = ({ control, errors }) => {\r\n  return (\r\n    <>\r\n      {fields.map((field) => {\r\n        return (\r\n          <AdminField\r\n            key={field.id}\r\n            control={control}\r\n            error={\r\n              errors[\r\n                field.fieldName as Exclude<AdminFieldsNameType, \"phoneNumber\">\r\n              ]\r\n            }\r\n            subtitle={field.subtitle}\r\n            fieldName={\r\n              field.fieldName as Exclude<AdminFieldsNameType, \"phoneNumber\">\r\n            }\r\n            required={field.required}\r\n            password={field.password}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminForm;\r\n","import React from \"react\";\r\nimport { Button, Card, Layout, Typography } from \"antd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { AppAlert, AppPreloader } from \"../../components\";\r\nimport { changePasswordSchema } from \"../../utils/validatorsSchemes\";\r\n\r\nimport { AdminFormDataType } from \"../../models/Administrator\";\r\nimport { AdminForm } from \"./components\";\r\nimport {\r\n  getAdminActionStatusState,\r\n  getAdminErrorMessageState,\r\n  getAdminLoadingState,\r\n  getCurrentAdminState,\r\n} from \"../../store/selectors/admin\";\r\nimport { clearAdminState, updateAdmin } from \"../../store/actions/admin\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\n\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\n\r\nconst ChangePasswordPage = () => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm<Exclude<AdminFormDataType, \"phoneNumber\">>({\r\n    resolver: yupResolver(changePasswordSchema),\r\n  });\r\n\r\n  const adminLoading = useSelector(getAdminLoadingState);\r\n  const adminErrorMessage = useSelector(getAdminErrorMessageState);\r\n  const adminActionStatus = useSelector(getAdminActionStatusState);\r\n  const currentAdmin = useSelector(getCurrentAdminState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = handleSubmit((formData) => {\r\n    if (currentAdmin) {\r\n      const password = formData.password;\r\n      const { id, phoneNumber, isBlocked } = currentAdmin;\r\n      dispatch(updateAdmin(id, { password, phoneNumber, isBlocked }));\r\n    }\r\n  });\r\n\r\n  const handleCloseAlert = () => {\r\n    dispatch(clearAdminState());\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (adminActionStatus === ActionStatusEnum.SUCCESS) {\r\n      reset();\r\n    }\r\n  }, [adminActionStatus, reset]);\r\n\r\n  if (adminLoading) {\r\n    return <AppPreloader />;\r\n  }\r\n\r\n  return (\r\n    <Content className=\"content\">\r\n      <AppAlert\r\n        onClose={handleCloseAlert}\r\n        errorMessage={adminErrorMessage}\r\n        successMessage={\"Администратор сохранен\"}\r\n        status={adminActionStatus}\r\n      />\r\n\r\n      <Card className=\"form\">\r\n        <Title level={3} className=\"title\">\r\n          Смена пароля\r\n        </Title>\r\n\r\n        <AdminForm errors={errors} control={control} />\r\n\r\n        <Button\r\n          className=\"order__save-btn\"\r\n          onClick={onSubmit}\r\n          disabled={Object.keys(errors).length > 0 || !currentAdmin}\r\n        >\r\n          Сохранить\r\n        </Button>\r\n      </Card>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default ChangePasswordPage;\r\n","import React from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { AppHeader, AppSideBar } from \"../components\";\r\nimport {\r\n  CategoriesPage,\r\n  ContractorCreatePage,\r\n  ContractorsPage,\r\n  HomePage,\r\n  OrderCreatePage,\r\n  OrdersPage,\r\n  OrderPage,\r\n  DeletedCategoriesPage,\r\n  ContractorPage,\r\n  OrderChatsPage,\r\n  ChatPage,\r\n  CategoryCreatePage,\r\n  AdminCreatePage,\r\n  AdminsPage,\r\n  ChangePasswordPage,\r\n} from \"../pages\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { adminActions } from \"../store/actions/admin\";\r\n\r\nconst MainLayout = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"adminId\");\r\n    dispatch(adminActions.setIsAuth(false));\r\n  };\r\n\r\n  return (\r\n    <Layout className=\"wrapper\">\r\n      <AppHeader logout={logout} />\r\n      <Layout>\r\n        <AppSideBar />\r\n        <Layout>\r\n          <Switch>\r\n            <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\r\n            <Route exact path=\"/home\">\r\n              <HomePage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/orders\">\r\n              <OrdersPage />\r\n            </Route>\r\n            <Route exact path=\"/orders/create\">\r\n              <OrderCreatePage />\r\n            </Route>\r\n            <Route exact path=\"/orders/:orderId\">\r\n              <OrderPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/orders/:orderId/chats\">\r\n              <OrderChatsPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/orders/:orderId/chats/:chatId\">\r\n              <ChatPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/contractors\">\r\n              <ContractorsPage />\r\n            </Route>\r\n            <Route exact path=\"/contractors/create\">\r\n              <ContractorCreatePage />\r\n            </Route>\r\n            <Route path=\"/contractors/:contractorId\">\r\n              <ContractorPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/categories\">\r\n              <CategoriesPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/categories/deleted\">\r\n              <DeletedCategoriesPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/categories/create\">\r\n              <CategoryCreatePage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/profile/:contractorId\">\r\n              <ContractorPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/admins\">\r\n              <AdminsPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/admins/create\">\r\n              <AdminCreatePage />\r\n            </Route>\r\n            <Route exact path=\"/admins/password\">\r\n              <ChangePasswordPage />\r\n            </Route>\r\n\r\n            <Route exact path=\"*\" render={() => <Redirect to=\"/\" />} />\r\n          </Switch>\r\n        </Layout>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router\";\r\nimport { AuthPage } from \"../pages\";\r\n\r\nconst AuthLayout = () => {\r\n  return (\r\n    <div className=\"auth\">\r\n      <Switch>\r\n        <Route path=\"/login\" component={() => <AuthPage />} />\r\n        <Route path=\"*\" render={() => <Redirect to=\"/login\" />} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthLayout;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppPreloader } from \"./components\";\r\n\r\nimport { AuthLayout, MainLayout } from \"./layouts\";\r\nimport { adminActions, checkMe } from \"./store/actions/admin\";\r\n\r\nimport { getAllCategories } from \"./store/actions/categories\";\r\nimport { getIsAuthState, getIsInitState } from \"./store/selectors/admin\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  const isAuth = useSelector(getIsAuthState);\r\n  const isInit = useSelector(getIsInitState);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getAllCategories());\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    const adminId = localStorage.getItem(\"adminId\");\r\n    if (adminId) {\r\n      dispatch(checkMe(Number(adminId)));\r\n    } else {\r\n      dispatch(adminActions.setIsAuth(false));\r\n      dispatch(adminActions.setIsInit(true));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  if (!isInit) {\r\n    return (\r\n      <div className=\"app\">\r\n        <AppPreloader />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div className=\"app\">{isAuth ? <MainLayout /> : <AuthLayout />}</div>;\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { AdministratorOutType } from \"../../models/Administrator\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { AdminActionTypes } from \"../actions/admin\";\r\n\r\nconst initialState = {\r\n  isInit: false,\r\n  isAuth: false,\r\n  authErrorMessage: null as null | string,\r\n  authLoading: false,\r\n  adminLoading: false,\r\n  adminErrorMessage: null as null | string,\r\n  admins: [] as AdministratorOutType[],\r\n  admin: null as null | AdministratorOutType,\r\n  adminActionStatus: ActionStatusEnum.NEVER,\r\n};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst adminReducer = (\r\n  state = initialState,\r\n  action: AdminActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"SET_ADMIN_LOADING\":\r\n    case \"SET_ADMIN_ERROR_MESSAGE\":\r\n    case \"SET_AUTH_ERROR_MESSAGE\":\r\n    case \"SET_AUTH_LOADING\":\r\n    case \"SET_IS_AUTH\":\r\n    case \"SET_IS_INIT\":\r\n    case \"SET_ADMINS\":\r\n    case \"SET_ADMIN_ACTION_STATUS\":\r\n    case \"SET_CURRENT_ADMIN\": {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n\r\n    case \"CHANGE_BAN_STATUS\": {\r\n      return {\r\n        ...state,\r\n        admins: state.admins.map((admin) => {\r\n          if (admin.id === action.payload.id) {\r\n            return { ...admin, isBlocked: action.payload.value };\r\n          } else {\r\n            return admin;\r\n          }\r\n        }),\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default adminReducer;\r\n","import { ActionStatusEnum } from \"../../models/types\";\r\nimport { CategoriesActionTypes } from \"../actions/categories\";\r\nimport { CategoryType } from \"../../models/Categories\";\r\n\r\nconst initialState = {\r\n  categories: null as CategoryType[] | null | undefined,\r\n  isLoadingCategories: false,\r\n  errorMessage: null as string | null,\r\n  categoriesActionStatus: ActionStatusEnum.NEVER,\r\n  currentCategory: null as CategoryType | null,\r\n  categoryInProcessEdit: null as number | null,\r\n};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst categoriesReducer = (\r\n  state = initialState,\r\n  action: CategoriesActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"SET_CATEGORIES\":\r\n    case \"SET_IS_LOADING_CATEGORIES\":\r\n    case \"SET_CATEGORIES_ERROR_MESSAGE\":\r\n    case \"SET_CATEGORIES_ACTION_STATUS\":\r\n    case \"SET_CURRENT_CATEGORY\":\r\n    case \"SET_CATEGORY_IN_EDIT_PROCESS\": {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n    case \"REPLACE_CATEGORY\": {\r\n      const newCategoriesList = state.categories?.map((category) => {\r\n        if (category.id === action.payload.category.id) {\r\n          return action.payload.category;\r\n        }\r\n        return category;\r\n      });\r\n      return {\r\n        ...state,\r\n        categories: newCategoriesList,\r\n      };\r\n    }\r\n\r\n    case \"REMOVE_CATEGORY\": {\r\n      const newCategoriesList = state.categories?.filter(\r\n        (category) => category.id !== action.payload.id\r\n      );\r\n      return {\r\n        ...state,\r\n        categories: newCategoriesList,\r\n      };\r\n    }\r\n\r\n    case \"CLEAR_CATEGORIES\": {\r\n      return {\r\n        ...state,\r\n        categories: null,\r\n      } as const;\r\n    }\r\n\r\n    case \"ADD_NEW_CATEGORY\": {\r\n      return {\r\n        ...state,\r\n        categories: state.categories\r\n          ? [...state.categories, action.payload.category]\r\n          : [action.payload.category],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default categoriesReducer;\r\n","import { AttachmentOutType } from \"./../../models/Attachments\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { ContractorsActionTypes } from \"../actions/contractors\";\r\nimport { ContractorType } from \"../../models/Contractors\";\r\n\r\nconst initialState = {\r\n  contractors: null as ContractorType[] | null | undefined,\r\n  currentContractor: null as ContractorType | null,\r\n  contractorsLoading: false,\r\n  contractorsActionStatus: ActionStatusEnum.NEVER,\r\n  errorMessage: null as string | null,\r\n  contractorImages: [] as AttachmentOutType[],\r\n  contractorImageUploading: false,\r\n  contractorAvatarUploading: false,\r\n  contractorAvatars: [] as AttachmentOutType[],\r\n};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst contractorsReducer = (\r\n  state = initialState,\r\n  action: ContractorsActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"SET_CURRENT_CONTRACTOR\":\r\n    case \"SET_CONTRACTORS_LOADING\":\r\n    case \"SET_CONTRACTORS_ACTION_STATUS\":\r\n    case \"SET_CONTRACTORS_ERROR_MESSAGE\":\r\n    case \"SET_CONTRACTORS\":\r\n    case \"SET_CONTRACTOR_IMAGE_UPLOADING\":\r\n    case \"SET_CONTRACTOR_AVATAR_UPLOADING\": {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n\r\n    case \"REMOVE_CONTRACTOR\": {\r\n      return {\r\n        ...state,\r\n        contractors: state.contractors?.filter(\r\n          (contractor) => contractor.id !== action.payload.contractorId\r\n        ),\r\n      };\r\n    }\r\n\r\n    case \"SET_CONTRACTOR_IMAGES\": {\r\n      return {\r\n        ...state,\r\n        contractorImages: action.payload.images,\r\n      };\r\n    }\r\n\r\n    case \"ADD_CONTRACTOR_IMAGE\": {\r\n      return {\r\n        ...state,\r\n        contractorImages: [...state.contractorImages, ...action.payload.images],\r\n      };\r\n    }\r\n\r\n    case \"ADD_CONTRACTOR_AVATARS\": {\r\n      return {\r\n        ...state,\r\n        contractorAvatars: action.payload.images,\r\n      };\r\n    }\r\n\r\n    case \"REMOVE_CONTRACTOR_IMAGE\": {\r\n      return {\r\n        ...state,\r\n        contractorImages: state.contractorImages.filter(\r\n          (image) => image.id !== action.payload.imageId\r\n        ),\r\n      };\r\n    }\r\n    case \"REMOVE_CONTRACTOR_AVATAR\": {\r\n      return {\r\n        ...state,\r\n        contractorAvatars: [],\r\n      };\r\n    }\r\n\r\n    case \"CLEAR_CONTRACTOR_IMAGES\": {\r\n      return {\r\n        ...state,\r\n        contractorImages: [],\r\n        contractorAvatars: [],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default contractorsReducer;\r\n","import { AttachmentOutType } from \"../../models/Attachments\";\r\nimport { ChatType } from \"../../models/Chats\";\r\nimport { OrderType } from \"../../models/Orders\";\r\nimport { ActionStatusEnum } from \"../../models/types\";\r\nimport { OrdersActionTypes } from \"../actions/orders\";\r\n\r\nconst initialState = {\r\n  orders: null as OrderType[] | null | undefined,\r\n  ordersLoading: false,\r\n  errorMessage: null as string | null,\r\n  orderActionStatus: ActionStatusEnum.NEVER,\r\n  currentOrder: null as OrderType | null,\r\n  orderImages: [] as AttachmentOutType[],\r\n  orderImageUploading: false,\r\n  orderChats: null as ChatType[] | null,\r\n};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst ordersReducer = (\r\n  state = initialState,\r\n  action: OrdersActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"SET_ORDERS\":\r\n    case \"SET_ORDERS_LOADING\":\r\n    case \"SET_ORDERS_ERROR\":\r\n    case \"SET_ORDER_ACTION_STATUS\":\r\n    case \"SET_CURRENT_ORDER\":\r\n    case \"SET_ORDER_IMAGE_UPLOADING\":\r\n    case \"SET_ORDER_CHATS\": {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n\r\n    case \"ADD_NEW_ORDER\": {\r\n      return {\r\n        ...state,\r\n        orders: state.orders\r\n          ? [...state.orders, action.payload.order]\r\n          : [action.payload.order],\r\n      };\r\n    }\r\n    case \"UPDATE_ORDER\": {\r\n      return {\r\n        ...state,\r\n        orders: state.orders?.map((order) => {\r\n          if (order.id === action.payload.order.id) {\r\n            return action.payload.order;\r\n          }\r\n          return order;\r\n        }),\r\n      };\r\n    }\r\n    case \"REMOVE_ORDER\": {\r\n      return {\r\n        ...state,\r\n        orders: state.orders?.filter((order) => order.id !== action.payload.id),\r\n      };\r\n    }\r\n    case \"SET_ORDER_IMAGES\": {\r\n      return {\r\n        ...state,\r\n        orderImages: action.payload.images,\r\n      };\r\n    }\r\n\r\n    case \"ADD_ORDER_IMAGE\": {\r\n      return {\r\n        ...state,\r\n        orderImages: [...state.orderImages, ...action.payload.images],\r\n      };\r\n    }\r\n\r\n    case \"REMOVE_ORDER_IMAGE\": {\r\n      return {\r\n        ...state,\r\n        orderImages: state.orderImages.filter(\r\n          (image) => image.id !== action.payload.imageId\r\n        ),\r\n      };\r\n    }\r\n\r\n    case \"CLEAR_ORDER_IMAGES\": {\r\n      return {\r\n        ...state,\r\n        orderImages: [],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default ordersReducer;\r\n","import { ChatMessageOutType } from \"../../models/Chats\";\r\nimport { ChatsActionTypes } from \"../actions/chats\";\r\n\r\nconst initialState = {\r\n  errorMessage: null as null | string,\r\n  chatsLoading: false,\r\n  messages: [] as ChatMessageOutType[],\r\n};\r\n\r\ntype initStateType = typeof initialState;\r\n\r\nconst chatsReducer = (\r\n  state = initialState,\r\n  action: ChatsActionTypes\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"SET_CHATS_ERROR_MESSAGE\":\r\n    case \"SET_CHATS_LOADING\": {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n    case \"SET_NEW_MESSAGES\": {\r\n      return {\r\n        ...state,\r\n        messages: action.payload.messages,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default chatsReducer;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  categoriesReducer,\r\n  contractorsReducer,\r\n  adminReducer,\r\n  ordersReducer,\r\n  chatsReducer,\r\n} from \"./reducers\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n  admin: adminReducer,\r\n  categories: categoriesReducer,\r\n  contractors: contractorsReducer,\r\n  orders: ordersReducer,\r\n  chats: chatsReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport default createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./style.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}